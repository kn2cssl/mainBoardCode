
base1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000556c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  0000556c  00005600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000415  0080205e  0080205e  0000565e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000565e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c8  00000000  00000000  000056c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c50b  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002095  00000000  00000000  00012393  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008648  00000000  00000000  00014428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000020d8  00000000  00000000  0001ca70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000265d4  00000000  00000000  0001eb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000073a9  00000000  00000000  0004511c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006a8  00000000  00000000  0004c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ad98  00000000  00000000  0004cb70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__vector_2>
       c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c1       	rjmp	.+538    	; 0x240 <__bad_interrupt>
      26:	00 00       	nop
      28:	0b c1       	rjmp	.+534    	; 0x240 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	09 c1       	rjmp	.+530    	; 0x240 <__bad_interrupt>
      2e:	00 00       	nop
      30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c1       	rjmp	.+522    	; 0x240 <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c5       	rjmp	.+2706   	; 0xacc <__vector_14>
      3a:	00 00       	nop
      3c:	7f c5       	rjmp	.+2814   	; 0xb3c <__vector_15>
      3e:	00 00       	nop
      40:	b5 c5       	rjmp	.+2922   	; 0xbac <__vector_16>
      42:	00 00       	nop
      44:	eb c5       	rjmp	.+3030   	; 0xc1c <__vector_17>
      46:	00 00       	nop
      48:	21 c6       	rjmp	.+3138   	; 0xc8c <__vector_18>
      4a:	00 00       	nop
      4c:	57 c6       	rjmp	.+3246   	; 0xcfc <__vector_19>
      4e:	00 00       	nop
      50:	8d c6       	rjmp	.+3354   	; 0xd6c <__vector_20>
      52:	00 00       	nop
      54:	c3 c6       	rjmp	.+3462   	; 0xddc <__vector_21>
      56:	00 00       	nop
      58:	f9 c6       	rjmp	.+3570   	; 0xe4c <__vector_22>
      5a:	00 00       	nop
      5c:	2f c7       	rjmp	.+3678   	; 0xebc <__vector_23>
      5e:	00 00       	nop
      60:	ef c0       	rjmp	.+478    	; 0x240 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__bad_interrupt>
      66:	00 00       	nop
      68:	eb c0       	rjmp	.+470    	; 0x240 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e9 c0       	rjmp	.+466    	; 0x240 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e7 c0       	rjmp	.+462    	; 0x240 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c0       	rjmp	.+458    	; 0x240 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c0       	rjmp	.+454    	; 0x240 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c0       	rjmp	.+450    	; 0x240 <__bad_interrupt>
      7e:	00 00       	nop
      80:	df c0       	rjmp	.+446    	; 0x240 <__bad_interrupt>
      82:	00 00       	nop
      84:	dd c0       	rjmp	.+442    	; 0x240 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c0       	rjmp	.+438    	; 0x240 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c0       	rjmp	.+434    	; 0x240 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c0       	rjmp	.+426    	; 0x240 <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 c0       	rjmp	.+422    	; 0x240 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d1 c0       	rjmp	.+418    	; 0x240 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cf c0       	rjmp	.+414    	; 0x240 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cd c0       	rjmp	.+410    	; 0x240 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cb c0       	rjmp	.+406    	; 0x240 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_43>
      b0:	c7 c0       	rjmp	.+398    	; 0x240 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c5 c0       	rjmp	.+394    	; 0x240 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c0       	rjmp	.+390    	; 0x240 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_47>
      c0:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_48>
      c4:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_49>
      c8:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_50>
      cc:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_51>
      d0:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_52>
      d4:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_53>
      d8:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_54>
      dc:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_55>
      e0:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_56>
      e4:	ad c0       	rjmp	.+346    	; 0x240 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ab c0       	rjmp	.+342    	; 0x240 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a9 c0       	rjmp	.+338    	; 0x240 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a7 c0       	rjmp	.+334    	; 0x240 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a5 c0       	rjmp	.+330    	; 0x240 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a3 c0       	rjmp	.+326    	; 0x240 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a1 c0       	rjmp	.+322    	; 0x240 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9f c0       	rjmp	.+318    	; 0x240 <__bad_interrupt>
     102:	00 00       	nop
     104:	9d c0       	rjmp	.+314    	; 0x240 <__bad_interrupt>
     106:	00 00       	nop
     108:	9b c0       	rjmp	.+310    	; 0x240 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	99 c0       	rjmp	.+306    	; 0x240 <__bad_interrupt>
     10e:	00 00       	nop
     110:	97 c0       	rjmp	.+302    	; 0x240 <__bad_interrupt>
     112:	00 00       	nop
     114:	95 c0       	rjmp	.+298    	; 0x240 <__bad_interrupt>
     116:	00 00       	nop
     118:	93 c0       	rjmp	.+294    	; 0x240 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	91 c0       	rjmp	.+290    	; 0x240 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8f c0       	rjmp	.+286    	; 0x240 <__bad_interrupt>
     122:	00 00       	nop
     124:	8d c0       	rjmp	.+282    	; 0x240 <__bad_interrupt>
     126:	00 00       	nop
     128:	8b c0       	rjmp	.+278    	; 0x240 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	89 c0       	rjmp	.+274    	; 0x240 <__bad_interrupt>
     12e:	00 00       	nop
     130:	87 c0       	rjmp	.+270    	; 0x240 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__vector_77>
     138:	f9 c6       	rjmp	.+3570   	; 0xf2c <__vector_78>
     13a:	00 00       	nop
     13c:	2f c7       	rjmp	.+3678   	; 0xf9c <__vector_79>
     13e:	00 00       	nop
     140:	65 c7       	rjmp	.+3786   	; 0x100c <__vector_80>
     142:	00 00       	nop
     144:	9b c7       	rjmp	.+3894   	; 0x107c <__vector_81>
     146:	00 00       	nop
     148:	d1 c7       	rjmp	.+4002   	; 0x10ec <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_83>
     150:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_84>
     154:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_85>
     158:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_86>
     15c:	71 c0       	rjmp	.+226    	; 0x240 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6f c0       	rjmp	.+222    	; 0x240 <__bad_interrupt>
     162:	00 00       	nop
     164:	6d c0       	rjmp	.+218    	; 0x240 <__bad_interrupt>
     166:	00 00       	nop
     168:	6b c0       	rjmp	.+214    	; 0x240 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	69 c0       	rjmp	.+210    	; 0x240 <__bad_interrupt>
     16e:	00 00       	nop
     170:	67 c0       	rjmp	.+206    	; 0x240 <__bad_interrupt>
     172:	00 00       	nop
     174:	65 c0       	rjmp	.+202    	; 0x240 <__bad_interrupt>
     176:	00 00       	nop
     178:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__vector_94>
     17c:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__vector_95>
     180:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__vector_96>
     184:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__vector_97>
     188:	5b c0       	rjmp	.+182    	; 0x240 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	59 c0       	rjmp	.+178    	; 0x240 <__bad_interrupt>
     18e:	00 00       	nop
     190:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__vector_100>
     194:	55 c0       	rjmp	.+170    	; 0x240 <__bad_interrupt>
     196:	00 00       	nop
     198:	53 c0       	rjmp	.+166    	; 0x240 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	51 c0       	rjmp	.+162    	; 0x240 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__vector_104>
     1a4:	4d c0       	rjmp	.+154    	; 0x240 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4b c0       	rjmp	.+150    	; 0x240 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	49 c0       	rjmp	.+146    	; 0x240 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_108>
     1b4:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_109>
     1b8:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_110>
     1bc:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_111>
     1c0:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__vector_112>
     1c4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_113>
     1c8:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_114>
     1cc:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_115>
     1d0:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__vector_116>
     1d4:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_117>
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__vector_119>
     1e0:	2f c0       	rjmp	.+94     	; 0x240 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	0c 94 01 24 	jmp	0x4802	; 0x4802 <__vector_122>
     1ec:	29 c0       	rjmp	.+82     	; 0x240 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ec e6       	ldi	r30, 0x6C	; 108
     214:	f5 e5       	ldi	r31, 0x55	; 85
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 35       	cpi	r26, 0x5E	; 94
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	24 e2       	ldi	r18, 0x24	; 36
     22a:	ae e5       	ldi	r26, 0x5E	; 94
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a3 37       	cpi	r26, 0x73	; 115
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 98 18 	call	0x3130	; 0x3130 <main>
     23c:	0c 94 b4 2a 	jmp	0x5568	; 0x5568 <_exit>

00000240 <__bad_interrupt>:
     240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <LCDDataLines>:
}
void LCDStringFlash(char *data)	
{ 
 char k;
 while (k=*data++) LCDSendData(k);
}
     242:	e4 e2       	ldi	r30, 0x24	; 36
     244:	f6 e0       	ldi	r31, 0x06	; 6
     246:	90 81       	ld	r25, Z
     248:	a8 2f       	mov	r26, r24
     24a:	a1 70       	andi	r26, 0x01	; 1
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	aa 0f       	add	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	aa 0f       	add	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	9b 7f       	andi	r25, 0xFB	; 251
     258:	a9 2b       	or	r26, r25
     25a:	a0 83       	st	Z, r26
     25c:	90 81       	ld	r25, Z
     25e:	81 fb       	bst	r24, 1
     260:	66 27       	eor	r22, r22
     262:	60 f9       	bld	r22, 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	66 0f       	add	r22, r22
     268:	77 1f       	adc	r23, r23
     26a:	62 95       	swap	r22
     26c:	72 95       	swap	r23
     26e:	70 7f       	andi	r23, 0xF0	; 240
     270:	76 27       	eor	r23, r22
     272:	60 7f       	andi	r22, 0xF0	; 240
     274:	76 27       	eor	r23, r22
     276:	9f 7d       	andi	r25, 0xDF	; 223
     278:	69 2b       	or	r22, r25
     27a:	60 83       	st	Z, r22
     27c:	90 81       	ld	r25, Z
     27e:	82 fb       	bst	r24, 2
     280:	44 27       	eor	r20, r20
     282:	40 f9       	bld	r20, 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	42 95       	swap	r20
     288:	52 95       	swap	r21
     28a:	50 7f       	andi	r21, 0xF0	; 240
     28c:	54 27       	eor	r21, r20
     28e:	40 7f       	andi	r20, 0xF0	; 240
     290:	54 27       	eor	r21, r20
     292:	9f 7e       	andi	r25, 0xEF	; 239
     294:	49 2b       	or	r20, r25
     296:	40 83       	st	Z, r20
     298:	e4 e4       	ldi	r30, 0x44	; 68
     29a:	f6 e0       	ldi	r31, 0x06	; 6
     29c:	90 81       	ld	r25, Z
     29e:	83 fb       	bst	r24, 3
     2a0:	22 27       	eor	r18, r18
     2a2:	20 f9       	bld	r18, 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	22 0f       	add	r18, r18
     2a8:	33 1f       	adc	r19, r19
     2aa:	22 95       	swap	r18
     2ac:	32 95       	swap	r19
     2ae:	30 7f       	andi	r19, 0xF0	; 240
     2b0:	32 27       	eor	r19, r18
     2b2:	20 7f       	andi	r18, 0xF0	; 240
     2b4:	32 27       	eor	r19, r18
     2b6:	89 2f       	mov	r24, r25
     2b8:	8f 7d       	andi	r24, 0xDF	; 223
     2ba:	28 2b       	or	r18, r24
     2bc:	20 83       	st	Z, r18
     2be:	08 95       	ret

000002c0 <LCDDirOut>:
     2c0:	e0 e2       	ldi	r30, 0x20	; 32
     2c2:	f6 e0       	ldi	r31, 0x06	; 6
     2c4:	80 81       	ld	r24, Z
     2c6:	84 60       	ori	r24, 0x04	; 4
     2c8:	80 83       	st	Z, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	80 62       	ori	r24, 0x20	; 32
     2ce:	80 83       	st	Z, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	80 83       	st	Z, r24
     2d6:	e0 e4       	ldi	r30, 0x40	; 64
     2d8:	f6 e0       	ldi	r31, 0x06	; 6
     2da:	80 81       	ld	r24, Z
     2dc:	80 62       	ori	r24, 0x20	; 32
     2de:	80 83       	st	Z, r24
     2e0:	08 95       	ret

000002e2 <LCDDirIn>:
     2e2:	e0 e2       	ldi	r30, 0x20	; 32
     2e4:	f6 e0       	ldi	r31, 0x06	; 6
     2e6:	80 81       	ld	r24, Z
     2e8:	8b 7f       	andi	r24, 0xFB	; 251
     2ea:	80 83       	st	Z, r24
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 7d       	andi	r24, 0xDF	; 223
     2f0:	80 83       	st	Z, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	8f 7e       	andi	r24, 0xEF	; 239
     2f6:	80 83       	st	Z, r24
     2f8:	e0 e4       	ldi	r30, 0x40	; 64
     2fa:	f6 e0       	ldi	r31, 0x06	; 6
     2fc:	80 81       	ld	r24, Z
     2fe:	8f 7d       	andi	r24, 0xDF	; 223
     300:	80 83       	st	Z, r24
     302:	08 95       	ret

00000304 <LCDSendData>:
     304:	cf 93       	push	r28
     306:	c8 2f       	mov	r28, r24
     308:	8f e1       	ldi	r24, 0x1F	; 31
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <LCDSendData+0x8>
     310:	00 c0       	rjmp	.+0      	; 0x312 <LCDSendData+0xe>
     312:	00 00       	nop
     314:	8c 2f       	mov	r24, r28
     316:	82 95       	swap	r24
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	93 df       	rcall	.-218    	; 0x242 <LCDDataLines>
     31c:	e4 e2       	ldi	r30, 0x24	; 36
     31e:	f6 e0       	ldi	r31, 0x06	; 6
     320:	80 81       	ld	r24, Z
     322:	82 60       	ori	r24, 0x02	; 2
     324:	80 83       	st	Z, r24
     326:	80 81       	ld	r24, Z
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	80 83       	st	Z, r24
     32c:	95 ed       	ldi	r25, 0xD5	; 213
     32e:	9a 95       	dec	r25
     330:	f1 f7       	brne	.-4      	; 0x32e <LCDSendData+0x2a>
     332:	00 00       	nop
     334:	80 81       	ld	r24, Z
     336:	87 7f       	andi	r24, 0xF7	; 247
     338:	80 83       	st	Z, r24
     33a:	85 ed       	ldi	r24, 0xD5	; 213
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCDSendData+0x38>
     340:	00 00       	nop
     342:	8c 2f       	mov	r24, r28
     344:	7e df       	rcall	.-260    	; 0x242 <LCDDataLines>
     346:	e4 e2       	ldi	r30, 0x24	; 36
     348:	f6 e0       	ldi	r31, 0x06	; 6
     34a:	80 81       	ld	r24, Z
     34c:	88 60       	ori	r24, 0x08	; 8
     34e:	80 83       	st	Z, r24
     350:	95 ed       	ldi	r25, 0xD5	; 213
     352:	9a 95       	dec	r25
     354:	f1 f7       	brne	.-4      	; 0x352 <LCDSendData+0x4e>
     356:	00 00       	nop
     358:	80 81       	ld	r24, Z
     35a:	87 7f       	andi	r24, 0xF7	; 247
     35c:	80 83       	st	Z, r24
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <LCDSendCommand>:
     362:	cf 93       	push	r28
     364:	c8 2f       	mov	r28, r24
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	8c 0f       	add	r24, r28
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	38 f4       	brcc	.+14     	; 0x37c <LCDSendCommand+0x1a>
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	9c e9       	ldi	r25, 0x9C	; 156
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <LCDSendCommand+0x10>
     376:	00 c0       	rjmp	.+0      	; 0x378 <LCDSendCommand+0x16>
     378:	00 00       	nop
     37a:	06 c0       	rjmp	.+12     	; 0x388 <LCDSendCommand+0x26>
     37c:	8f e3       	ldi	r24, 0x3F	; 63
     37e:	9f e1       	ldi	r25, 0x1F	; 31
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <LCDSendCommand+0x1e>
     384:	00 c0       	rjmp	.+0      	; 0x386 <LCDSendCommand+0x24>
     386:	00 00       	nop
     388:	8c 2f       	mov	r24, r28
     38a:	82 95       	swap	r24
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	59 df       	rcall	.-334    	; 0x242 <LCDDataLines>
     390:	e4 e2       	ldi	r30, 0x24	; 36
     392:	f6 e0       	ldi	r31, 0x06	; 6
     394:	80 81       	ld	r24, Z
     396:	8d 7f       	andi	r24, 0xFD	; 253
     398:	80 83       	st	Z, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 60       	ori	r24, 0x08	; 8
     39e:	80 83       	st	Z, r24
     3a0:	95 ed       	ldi	r25, 0xD5	; 213
     3a2:	9a 95       	dec	r25
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCDSendCommand+0x40>
     3a6:	00 00       	nop
     3a8:	80 81       	ld	r24, Z
     3aa:	87 7f       	andi	r24, 0xF7	; 247
     3ac:	80 83       	st	Z, r24
     3ae:	85 ed       	ldi	r24, 0xD5	; 213
     3b0:	8a 95       	dec	r24
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDSendCommand+0x4e>
     3b4:	00 00       	nop
     3b6:	8c 2f       	mov	r24, r28
     3b8:	44 df       	rcall	.-376    	; 0x242 <LCDDataLines>
     3ba:	e4 e2       	ldi	r30, 0x24	; 36
     3bc:	f6 e0       	ldi	r31, 0x06	; 6
     3be:	80 81       	ld	r24, Z
     3c0:	88 60       	ori	r24, 0x08	; 8
     3c2:	80 83       	st	Z, r24
     3c4:	95 ed       	ldi	r25, 0xD5	; 213
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDSendCommand+0x64>
     3ca:	00 00       	nop
     3cc:	80 81       	ld	r24, Z
     3ce:	87 7f       	andi	r24, 0xF7	; 247
     3d0:	80 83       	st	Z, r24
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <LCDInit>:
     3d6:	e4 e2       	ldi	r30, 0x24	; 36
     3d8:	f6 e0       	ldi	r31, 0x06	; 6
     3da:	80 81       	ld	r24, Z
     3dc:	87 7f       	andi	r24, 0xF7	; 247
     3de:	80 83       	st	Z, r24
     3e0:	80 df       	rcall	.-256    	; 0x2e2 <LCDDirIn>
     3e2:	2f ef       	ldi	r18, 0xFF	; 255
     3e4:	87 ee       	ldi	r24, 0xE7	; 231
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	21 50       	subi	r18, 0x01	; 1
     3ea:	80 40       	sbci	r24, 0x00	; 0
     3ec:	90 40       	sbci	r25, 0x00	; 0
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <LCDInit+0x12>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCDInit+0x1c>
     3f2:	00 00       	nop
     3f4:	65 df       	rcall	.-310    	; 0x2c0 <LCDDirOut>
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	24 df       	rcall	.-440    	; 0x242 <LCDDataLines>
     3fa:	e0 e2       	ldi	r30, 0x20	; 32
     3fc:	f6 e0       	ldi	r31, 0x06	; 6
     3fe:	80 81       	ld	r24, Z
     400:	82 60       	ori	r24, 0x02	; 2
     402:	80 83       	st	Z, r24
     404:	80 81       	ld	r24, Z
     406:	81 60       	ori	r24, 0x01	; 1
     408:	80 83       	st	Z, r24
     40a:	a4 e2       	ldi	r26, 0x24	; 36
     40c:	b6 e0       	ldi	r27, 0x06	; 6
     40e:	8c 91       	ld	r24, X
     410:	8d 7f       	andi	r24, 0xFD	; 253
     412:	8c 93       	st	X, r24
     414:	8c 91       	ld	r24, X
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	8c 93       	st	X, r24
     41a:	80 81       	ld	r24, Z
     41c:	88 60       	ori	r24, 0x08	; 8
     41e:	80 83       	st	Z, r24
     420:	25 ed       	ldi	r18, 0xD5	; 213
     422:	2a 95       	dec	r18
     424:	f1 f7       	brne	.-4      	; 0x422 <LCDInit+0x4c>
     426:	00 00       	nop
     428:	e4 e2       	ldi	r30, 0x24	; 36
     42a:	f6 e0       	ldi	r31, 0x06	; 6
     42c:	80 81       	ld	r24, Z
     42e:	88 60       	ori	r24, 0x08	; 8
     430:	80 83       	st	Z, r24
     432:	85 ed       	ldi	r24, 0xD5	; 213
     434:	8a 95       	dec	r24
     436:	f1 f7       	brne	.-4      	; 0x434 <LCDInit+0x5e>
     438:	00 00       	nop
     43a:	80 81       	ld	r24, Z
     43c:	87 7f       	andi	r24, 0xF7	; 247
     43e:	80 83       	st	Z, r24
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	23 ef       	ldi	r18, 0xF3	; 243
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	91 50       	subi	r25, 0x01	; 1
     448:	20 40       	sbci	r18, 0x00	; 0
     44a:	80 40       	sbci	r24, 0x00	; 0
     44c:	e1 f7       	brne	.-8      	; 0x446 <LCDInit+0x70>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <LCDInit+0x7a>
     450:	00 00       	nop
     452:	80 81       	ld	r24, Z
     454:	88 60       	ori	r24, 0x08	; 8
     456:	80 83       	st	Z, r24
     458:	95 ed       	ldi	r25, 0xD5	; 213
     45a:	9a 95       	dec	r25
     45c:	f1 f7       	brne	.-4      	; 0x45a <LCDInit+0x84>
     45e:	00 00       	nop
     460:	80 81       	ld	r24, Z
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	80 83       	st	Z, r24
     466:	8f e1       	ldi	r24, 0x1F	; 31
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <LCDInit+0x94>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <LCDInit+0x9a>
     470:	00 00       	nop
     472:	80 81       	ld	r24, Z
     474:	88 60       	ori	r24, 0x08	; 8
     476:	80 83       	st	Z, r24
     478:	95 ed       	ldi	r25, 0xD5	; 213
     47a:	9a 95       	dec	r25
     47c:	f1 f7       	brne	.-4      	; 0x47a <LCDInit+0xa4>
     47e:	00 00       	nop
     480:	80 81       	ld	r24, Z
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	80 83       	st	Z, r24
     486:	8f e1       	ldi	r24, 0x1F	; 31
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LCDInit+0xb4>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCDInit+0xba>
     490:	00 00       	nop
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	d6 de       	rcall	.-596    	; 0x242 <LCDDataLines>
     496:	95 ed       	ldi	r25, 0xD5	; 213
     498:	9a 95       	dec	r25
     49a:	f1 f7       	brne	.-4      	; 0x498 <LCDInit+0xc2>
     49c:	00 00       	nop
     49e:	e4 e2       	ldi	r30, 0x24	; 36
     4a0:	f6 e0       	ldi	r31, 0x06	; 6
     4a2:	80 81       	ld	r24, Z
     4a4:	88 60       	ori	r24, 0x08	; 8
     4a6:	80 83       	st	Z, r24
     4a8:	25 ed       	ldi	r18, 0xD5	; 213
     4aa:	2a 95       	dec	r18
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCDInit+0xd4>
     4ae:	00 00       	nop
     4b0:	80 81       	ld	r24, Z
     4b2:	87 7f       	andi	r24, 0xF7	; 247
     4b4:	80 83       	st	Z, r24
     4b6:	8f e1       	ldi	r24, 0x1F	; 31
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCDInit+0xe4>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCDInit+0xea>
     4c0:	00 00       	nop
     4c2:	88 e2       	ldi	r24, 0x28	; 40
     4c4:	4e df       	rcall	.-356    	; 0x362 <LCDSendCommand>
     4c6:	88 e0       	ldi	r24, 0x08	; 8
     4c8:	4c df       	rcall	.-360    	; 0x362 <LCDSendCommand>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	4a df       	rcall	.-364    	; 0x362 <LCDSendCommand>
     4ce:	86 e0       	ldi	r24, 0x06	; 6
     4d0:	48 df       	rcall	.-368    	; 0x362 <LCDSendCommand>
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	46 cf       	rjmp	.-372    	; 0x362 <LCDSendCommand>
     4d6:	08 95       	ret

000004d8 <LCDStringRam>:
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
     4de:	21 96       	adiw	r28, 0x01	; 1
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <LCDStringRam+0x18>
     4e8:	0d df       	rcall	.-486    	; 0x304 <LCDSendData>
     4ea:	89 91       	ld	r24, Y+
     4ec:	81 11       	cpse	r24, r1
     4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <LCDStringRam+0x10>
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <LCDGotoXY>:
void LCDGotoXY(unsigned char x, unsigned char y)	//Cursor to X Y position
{
 unsigned char DDRAMAddr;	
 switch(y)
     4f6:	62 30       	cpi	r22, 0x02	; 2
     4f8:	31 f0       	breq	.+12     	; 0x506 <LCDGotoXY+0x10>
     4fa:	63 30       	cpi	r22, 0x03	; 3
     4fc:	31 f0       	breq	.+12     	; 0x50a <LCDGotoXY+0x14>
     4fe:	61 30       	cpi	r22, 0x01	; 1
     500:	29 f4       	brne	.+10     	; 0x50c <LCDGotoXY+0x16>
 {
  case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
  case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     502:	80 5c       	subi	r24, 0xC0	; 192
     504:	03 c0       	rjmp	.+6      	; 0x50c <LCDGotoXY+0x16>
  case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     506:	8c 5e       	subi	r24, 0xEC	; 236
     508:	01 c0       	rjmp	.+2      	; 0x50c <LCDGotoXY+0x16>
  case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     50a:	8c 5a       	subi	r24, 0xAC	; 172
  default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
 }	
 LCDSendCommand(1<<LCD_DDRAM | DDRAMAddr);	
     50c:	80 68       	ori	r24, 0x80	; 128
     50e:	29 cf       	rjmp	.-430    	; 0x362 <LCDSendCommand>
     510:	08 95       	ret

00000512 <menu_check_sw>:
    menu_index[2] = 0;
}

bool menu_check_sw(uint8_t SW,uint8_t *SW_Flag)
{
    if(SW && !(*SW_Flag))
     512:	88 23       	and	r24, r24
     514:	39 f0       	breq	.+14     	; 0x524 <menu_check_sw+0x12>
     516:	fb 01       	movw	r30, r22
     518:	80 81       	ld	r24, Z
     51a:	81 11       	cpse	r24, r1
     51c:	07 c0       	rjmp	.+14     	; 0x52c <menu_check_sw+0x1a>
    {
        *SW_Flag = true;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 83       	st	Z, r24
        return 1;
     522:	08 95       	ret
    }
    else if(SW == 0)
        *SW_Flag = false;
     524:	fb 01       	movw	r30, r22
     526:	10 82       	st	Z, r1
    return 0;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
}
     52e:	08 95       	ret

00000530 <Menu_Display>:
	}
}

void Menu_Display(void)
{
    Disp_R(menu_index[0]);
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	f7 e0       	ldi	r31, 0x07	; 7
     534:	94 81       	ldd	r25, Z+4	; 0x04
     536:	80 91 c3 20 	lds	r24, 0x20C3
     53a:	a0 91 00 20 	lds	r26, 0x2000
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	aa 0f       	add	r26, r26
     542:	bb 1f       	adc	r27, r27
     544:	a8 5f       	subi	r26, 0xF8	; 248
     546:	bf 4d       	sbci	r27, 0xDF	; 223
     548:	90 78       	andi	r25, 0x80	; 128
     54a:	2c 91       	ld	r18, X
     54c:	92 2b       	or	r25, r18
     54e:	98 23       	and	r25, r24
     550:	94 83       	std	Z+4, r25	; 0x04
    Disp_L(menu_index[1]);
     552:	e0 e0       	ldi	r30, 0x00	; 0
     554:	f7 e0       	ldi	r31, 0x07	; 7
     556:	94 81       	ldd	r25, Z+4	; 0x04
     558:	a0 91 01 20 	lds	r26, 0x2001
     55c:	b0 e0       	ldi	r27, 0x00	; 0
     55e:	aa 0f       	add	r26, r26
     560:	bb 1f       	adc	r27, r27
     562:	a8 5f       	subi	r26, 0xF8	; 248
     564:	bf 4d       	sbci	r27, 0xDF	; 223
     566:	90 78       	andi	r25, 0x80	; 128
     568:	2c 91       	ld	r18, X
     56a:	92 2b       	or	r25, r18
     56c:	89 23       	and	r24, r25
     56e:	84 83       	std	Z+4, r24	; 0x04
     570:	08 95       	ret

00000572 <menu_table>:
}

void menu_table(void)
{

    switch(menu_index[1])
     572:	80 91 01 20 	lds	r24, 0x2001
     576:	8e 30       	cpi	r24, 0x0E	; 14
     578:	31 f4       	brne	.+12     	; 0x586 <menu_table+0x14>
			break;
			
		}
		break;
	case 0xE:
		switch(menu_index[0])
     57a:	80 91 00 20 	lds	r24, 0x2000
     57e:	8f 30       	cpi	r24, 0x0F	; 15
     580:	11 f4       	brne	.+4      	; 0x586 <menu_table+0x14>
		{
		case 0xF:
			wdt_reset_mcu();
     582:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <wdt_reset_mcu>
     586:	08 95       	ret

00000588 <Menu_Reset>:
uint8_t menu_index[3]={Menu_Clear,Menu_Clear,0};
uint8_t disp;
uint16_t menu_time = 0;

void Menu_Reset(void)
{
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
    uint8_t i=0;
    for (i=0;i<16;i++)
     594:	f1 2c       	mov	r15, r1
    {
        menu_index[1] = i;
     596:	01 e0       	ldi	r16, 0x01	; 1
     598:	10 e2       	ldi	r17, 0x20	; 32
        menu_index[0] = Menu_Default;
     59a:	c0 e0       	ldi	r28, 0x00	; 0
     59c:	d0 e2       	ldi	r29, 0x20	; 32
     59e:	0f 2e       	mov	r0, r31
     5a0:	f1 e1       	ldi	r31, 0x11	; 17
     5a2:	ef 2e       	mov	r14, r31
     5a4:	f0 2d       	mov	r31, r0
void Menu_Reset(void)
{
    uint8_t i=0;
    for (i=0;i<16;i++)
    {
        menu_index[1] = i;
     5a6:	f8 01       	movw	r30, r16
     5a8:	f0 82       	st	Z, r15
        menu_index[0] = Menu_Default;
     5aa:	e8 82       	st	Y, r14
        menu_table();
     5ac:	e2 df       	rcall	.-60     	; 0x572 <menu_table>
uint16_t menu_time = 0;

void Menu_Reset(void)
{
    uint8_t i=0;
    for (i=0;i<16;i++)
     5ae:	f3 94       	inc	r15
     5b0:	f0 e1       	ldi	r31, 0x10	; 16
     5b2:	ff 12       	cpse	r15, r31
     5b4:	f8 cf       	rjmp	.-16     	; 0x5a6 <Menu_Reset+0x1e>
    {
        menu_index[1] = i;
        menu_index[0] = Menu_Default;
        menu_table();
    }
    menu_index[0] = Menu_Clear;
     5b6:	80 e1       	ldi	r24, 0x10	; 16
     5b8:	80 93 00 20 	sts	0x2000, r24
    menu_index[1] = Menu_Clear;
     5bc:	80 93 01 20 	sts	0x2001, r24
    menu_index[2] = 0;
     5c0:	10 92 02 20 	sts	0x2002, r1
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	08 95       	ret

000005d2 <menu_check_status>:
        *SW_Flag = false;
    return 0;
}

void menu_check_status(void)
{
     5d2:	8f 92       	push	r8
     5d4:	9f 92       	push	r9
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	switch(menu_index[2])
     5ea:	80 91 02 20 	lds	r24, 0x2002
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <menu_check_status+0x22>
     5f2:	67 c0       	rjmp	.+206    	; 0x6c2 <menu_check_status+0xf0>
     5f4:	20 f0       	brcs	.+8      	; 0x5fe <menu_check_status+0x2c>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	09 f4       	brne	.+2      	; 0x5fc <menu_check_status+0x2a>
     5fa:	c7 c0       	rjmp	.+398    	; 0x78a <menu_check_status+0x1b8>
     5fc:	e4 c0       	rjmp	.+456    	; 0x7c6 <menu_check_status+0x1f4>
	{
		case 0://Wait for Index0
		Disp_L_PORT.OUT = (Disp_L_PORT.OUT & ~(1<<Segment_DP_bp)) | (((time_ms / 100) & 1) << Segment_DP_bp);
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d7 e0       	ldi	r29, 0x07	; 7
     602:	1c 81       	ldd	r17, Y+4	; 0x04
     604:	60 91 b7 20 	lds	r22, 0x20B7
     608:	70 91 b8 20 	lds	r23, 0x20B8
     60c:	80 91 b9 20 	lds	r24, 0x20B9
     610:	90 91 ba 20 	lds	r25, 0x20BA
     614:	24 e6       	ldi	r18, 0x64	; 100
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>
     620:	20 fb       	bst	r18, 0
     622:	17 f9       	bld	r17, 7
     624:	1c 83       	std	Y+4, r17	; 0x04
		Disp_R_PORT.OUTCLR = Segment_DP_bm;
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	e0 e2       	ldi	r30, 0x20	; 32
     62a:	f7 e0       	ldi	r31, 0x07	; 7
     62c:	86 83       	std	Z+6, r24	; 0x06
		menu_index[1] = Menu_Num;
     62e:	e0 ee       	ldi	r30, 0xE0	; 224
     630:	f6 e0       	ldi	r31, 0x06	; 6
     632:	90 85       	ldd	r25, Z+8	; 0x08
     634:	20 85       	ldd	r18, Z+8	; 0x08
     636:	80 85       	ldd	r24, Z+8	; 0x08
     638:	30 85       	ldd	r19, Z+8	; 0x08
     63a:	30 fb       	bst	r19, 0
     63c:	88 24       	eor	r8, r8
     63e:	80 f8       	bld	r8, 0
     640:	91 2c       	mov	r9, r1
     642:	88 0c       	add	r8, r8
     644:	99 1c       	adc	r9, r9
     646:	22 fb       	bst	r18, 2
     648:	22 27       	eor	r18, r18
     64a:	20 f9       	bld	r18, 0
     64c:	82 2a       	or	r8, r18
     64e:	93 fb       	bst	r25, 3
     650:	aa 24       	eor	r10, r10
     652:	a0 f8       	bld	r10, 0
     654:	b1 2c       	mov	r11, r1
     656:	aa 0c       	add	r10, r10
     658:	bb 1c       	adc	r11, r11
     65a:	aa 0c       	add	r10, r10
     65c:	bb 1c       	adc	r11, r11
     65e:	a8 28       	or	r10, r8
     660:	81 fb       	bst	r24, 1
     662:	cc 24       	eor	r12, r12
     664:	c0 f8       	bld	r12, 0
     666:	d1 2c       	mov	r13, r1
     668:	cc 0c       	add	r12, r12
     66a:	dd 1c       	adc	r13, r13
     66c:	cc 0c       	add	r12, r12
     66e:	dd 1c       	adc	r13, r13
     670:	cc 0c       	add	r12, r12
     672:	dd 1c       	adc	r13, r13
     674:	ca 28       	or	r12, r10
     676:	c0 92 01 20 	sts	0x2001, r12
		menu_index[0] = Menu_Clear;
     67a:	80 e1       	ldi	r24, 0x10	; 16
     67c:	80 93 00 20 	sts	0x2000, r24
		Menu_Display();
     680:	57 df       	rcall	.-338    	; 0x530 <Menu_Display>
		if(menu_check_sw(Menu_Set,&Menu_Set_flg))
     682:	80 91 e8 06 	lds	r24, 0x06E8
     686:	61 e6       	ldi	r22, 0x61	; 97
     688:	70 e2       	ldi	r23, 0x20	; 32
     68a:	88 1f       	adc	r24, r24
     68c:	88 27       	eor	r24, r24
     68e:	88 1f       	adc	r24, r24
     690:	40 df       	rcall	.-384    	; 0x512 <menu_check_sw>
     692:	88 23       	and	r24, r24
     694:	29 f0       	breq	.+10     	; 0x6a0 <menu_check_status+0xce>
		{
			menu_index[2]++;
     696:	e2 e0       	ldi	r30, 0x02	; 2
     698:	f0 e2       	ldi	r31, 0x20	; 32
     69a:	80 81       	ld	r24, Z
     69c:	8f 5f       	subi	r24, 0xFF	; 255
     69e:	80 83       	st	Z, r24
		}
		if(menu_check_sw(Menu_Cancel,&Menu_Cancel_flg))
     6a0:	80 91 a8 06 	lds	r24, 0x06A8
     6a4:	60 e6       	ldi	r22, 0x60	; 96
     6a6:	70 e2       	ldi	r23, 0x20	; 32
     6a8:	82 95       	swap	r24
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	32 df       	rcall	.-412    	; 0x512 <menu_check_sw>
     6ae:	88 23       	and	r24, r24
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <menu_check_status+0xe2>
     6b2:	89 c0       	rjmp	.+274    	; 0x7c6 <menu_check_status+0x1f4>
		{
			 menu_time=100;
     6b4:	84 e6       	ldi	r24, 0x64	; 100
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	80 93 5e 20 	sts	0x205E, r24
     6bc:	90 93 5f 20 	sts	0x205F, r25
     6c0:	82 c0       	rjmp	.+260    	; 0x7c6 <menu_check_status+0x1f4>
		}
		break;
		case 1://Wait for Index1
		Disp_R_PORT.OUT = (Disp_R_PORT.OUT & ~(1<<Segment_DP_bp)) | (((time_ms / 100) & 1) << Segment_DP_bp);
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f0 e2       	ldi	r31, 0x20	; 32
     6c6:	cf 2e       	mov	r12, r31
     6c8:	f7 e0       	ldi	r31, 0x07	; 7
     6ca:	df 2e       	mov	r13, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	f6 01       	movw	r30, r12
     6d0:	b4 80       	ldd	r11, Z+4	; 0x04
     6d2:	60 91 b7 20 	lds	r22, 0x20B7
     6d6:	70 91 b8 20 	lds	r23, 0x20B8
     6da:	80 91 b9 20 	lds	r24, 0x20B9
     6de:	90 91 ba 20 	lds	r25, 0x20BA
     6e2:	24 e6       	ldi	r18, 0x64	; 100
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>
     6ee:	20 fb       	bst	r18, 0
     6f0:	b7 f8       	bld	r11, 7
     6f2:	f6 01       	movw	r30, r12
     6f4:	b4 82       	std	Z+4, r11	; 0x04
		Disp_L_PORT.OUTSET = Segment_DP_bm;
     6f6:	80 e8       	ldi	r24, 0x80	; 128
     6f8:	e0 e0       	ldi	r30, 0x00	; 0
     6fa:	f7 e0       	ldi	r31, 0x07	; 7
     6fc:	85 83       	std	Z+5, r24	; 0x05
		menu_index[0] = Menu_Num;
     6fe:	e0 ee       	ldi	r30, 0xE0	; 224
     700:	f6 e0       	ldi	r31, 0x06	; 6
     702:	90 85       	ldd	r25, Z+8	; 0x08
     704:	20 85       	ldd	r18, Z+8	; 0x08
     706:	80 85       	ldd	r24, Z+8	; 0x08
     708:	30 85       	ldd	r19, Z+8	; 0x08
     70a:	30 fb       	bst	r19, 0
     70c:	ee 24       	eor	r14, r14
     70e:	e0 f8       	bld	r14, 0
     710:	f1 2c       	mov	r15, r1
     712:	ee 0c       	add	r14, r14
     714:	ff 1c       	adc	r15, r15
     716:	22 fb       	bst	r18, 2
     718:	22 27       	eor	r18, r18
     71a:	20 f9       	bld	r18, 0
     71c:	e2 2a       	or	r14, r18
     71e:	93 fb       	bst	r25, 3
     720:	00 27       	eor	r16, r16
     722:	00 f9       	bld	r16, 0
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	00 0f       	add	r16, r16
     728:	11 1f       	adc	r17, r17
     72a:	00 0f       	add	r16, r16
     72c:	11 1f       	adc	r17, r17
     72e:	0e 29       	or	r16, r14
     730:	86 95       	lsr	r24
     732:	81 70       	andi	r24, 0x01	; 1
     734:	c8 2f       	mov	r28, r24
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	df 2f       	mov	r29, r31
     73a:	cc 0f       	add	r28, r28
     73c:	dd 1f       	adc	r29, r29
     73e:	cc 0f       	add	r28, r28
     740:	dd 1f       	adc	r29, r29
     742:	cc 0f       	add	r28, r28
     744:	dd 1f       	adc	r29, r29
     746:	c0 2b       	or	r28, r16
     748:	c0 93 00 20 	sts	0x2000, r28
		Menu_Display();
     74c:	f1 de       	rcall	.-542    	; 0x530 <Menu_Display>
		if(menu_check_sw(Menu_Set,&Menu_Set_flg))
     74e:	80 91 e8 06 	lds	r24, 0x06E8
     752:	61 e6       	ldi	r22, 0x61	; 97
     754:	70 e2       	ldi	r23, 0x20	; 32
     756:	88 1f       	adc	r24, r24
     758:	88 27       	eor	r24, r24
     75a:	88 1f       	adc	r24, r24
     75c:	da de       	rcall	.-588    	; 0x512 <menu_check_sw>
     75e:	88 23       	and	r24, r24
     760:	29 f0       	breq	.+10     	; 0x76c <menu_check_status+0x19a>
		{
			menu_index[2]++;
     762:	e2 e0       	ldi	r30, 0x02	; 2
     764:	f0 e2       	ldi	r31, 0x20	; 32
     766:	80 81       	ld	r24, Z
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	80 83       	st	Z, r24
		}
		if(menu_check_sw(Menu_Cancel,&Menu_Cancel_flg))
     76c:	80 91 a8 06 	lds	r24, 0x06A8
     770:	60 e6       	ldi	r22, 0x60	; 96
     772:	70 e2       	ldi	r23, 0x20	; 32
     774:	82 95       	swap	r24
     776:	81 70       	andi	r24, 0x01	; 1
     778:	cc de       	rcall	.-616    	; 0x512 <menu_check_sw>
     77a:	88 23       	and	r24, r24
     77c:	21 f1       	breq	.+72     	; 0x7c6 <menu_check_status+0x1f4>
		{
			menu_index[2]--;
     77e:	e2 e0       	ldi	r30, 0x02	; 2
     780:	f0 e2       	ldi	r31, 0x20	; 32
     782:	80 81       	ld	r24, Z
     784:	81 50       	subi	r24, 0x01	; 1
     786:	80 83       	st	Z, r24
     788:	1e c0       	rjmp	.+60     	; 0x7c6 <menu_check_status+0x1f4>
		}
		break;
		case 2:
		Disp_R_PORT.OUTSET = Segment_DP_bm;
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	e0 e2       	ldi	r30, 0x20	; 32
     78e:	f7 e0       	ldi	r31, 0x07	; 7
     790:	85 83       	std	Z+5, r24	; 0x05
		Disp_L_PORT.OUTSET = Segment_DP_bm;
     792:	e0 e0       	ldi	r30, 0x00	; 0
     794:	f7 e0       	ldi	r31, 0x07	; 7
     796:	85 83       	std	Z+5, r24	; 0x05
		menu_table();
     798:	ec de       	rcall	.-552    	; 0x572 <menu_table>
		if(menu_check_sw(Menu_Cancel,&Menu_Cancel_flg))
     79a:	80 91 a8 06 	lds	r24, 0x06A8
     79e:	60 e6       	ldi	r22, 0x60	; 96
     7a0:	70 e2       	ldi	r23, 0x20	; 32
     7a2:	82 95       	swap	r24
     7a4:	81 70       	andi	r24, 0x01	; 1
     7a6:	b5 de       	rcall	.-662    	; 0x512 <menu_check_sw>
     7a8:	88 23       	and	r24, r24
     7aa:	69 f0       	breq	.+26     	; 0x7c6 <menu_check_status+0x1f4>
		{
			menu_index[2]--;
     7ac:	e2 e0       	ldi	r30, 0x02	; 2
     7ae:	f0 e2       	ldi	r31, 0x20	; 32
     7b0:	80 81       	ld	r24, Z
     7b2:	81 50       	subi	r24, 0x01	; 1
     7b4:	80 83       	st	Z, r24
			menu_index[0] = Menu_Default;
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
     7b8:	d0 e2       	ldi	r29, 0x20	; 32
     7ba:	81 e1       	ldi	r24, 0x11	; 17
     7bc:	88 83       	st	Y, r24
			menu_table();
     7be:	d9 de       	rcall	.-590    	; 0x572 <menu_table>
			menu_index[0] = Menu_Clear;
     7c0:	80 e1       	ldi	r24, 0x10	; 16
     7c2:	88 83       	st	Y, r24
			Menu_Display();
     7c4:	b5 de       	rcall	.-662    	; 0x530 <Menu_Display>
		}

		break;
	}
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	08 95       	ret

000007e0 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7e0:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     7e2:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7e4:	fc 01       	movw	r30, r24
     7e6:	e0 59       	subi	r30, 0x90	; 144
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	60 95       	com	r22
     7ec:	80 81       	ld	r24, Z
     7ee:	68 23       	and	r22, r24
     7f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7f2:	2f bf       	out	0x3f, r18	; 63
     7f4:	08 95       	ret

000007f6 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7f6:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     7f8:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     7fa:	fc 01       	movw	r30, r24
     7fc:	e0 59       	subi	r30, 0x90	; 144
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	80 81       	ld	r24, Z
     802:	68 2b       	or	r22, r24
     804:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     806:	2f bf       	out	0x3f, r18	; 63
     808:	08 95       	ret

0000080a <adc_enable_clock>:
	conf->ctrlb = adc->CTRLB;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
     80a:	81 15       	cp	r24, r1
     80c:	22 e0       	ldi	r18, 0x02	; 2
     80e:	92 07       	cpc	r25, r18
     810:	69 f4       	brne	.+26     	; 0x82c <adc_enable_clock+0x22>
     812:	80 91 63 20 	lds	r24, 0x2063
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	98 0f       	add	r25, r24
     81a:	90 93 63 20 	sts	0x2063, r25
     81e:	81 11       	cpse	r24, r1
     820:	14 c0       	rjmp	.+40     	; 0x84a <adc_enable_clock+0x40>
     822:	62 e0       	ldi	r22, 0x02	; 2
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	db cf       	rjmp	.-74     	; 0x7e0 <sysclk_enable_module>
     82a:	08 95       	ret
     82c:	80 34       	cpi	r24, 0x40	; 64
     82e:	92 40       	sbci	r25, 0x02	; 2
     830:	61 f4       	brne	.+24     	; 0x84a <adc_enable_clock+0x40>
     832:	80 91 62 20 	lds	r24, 0x2062
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	98 0f       	add	r25, r24
     83a:	90 93 62 20 	sts	0x2062, r25
     83e:	81 11       	cpse	r24, r1
     840:	04 c0       	rjmp	.+8      	; 0x84a <adc_enable_clock+0x40>
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	cb cf       	rjmp	.-106    	; 0x7e0 <sysclk_enable_module>
     84a:	08 95       	ret

0000084c <adc_disable_clock>:
     84c:	81 15       	cp	r24, r1
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	92 07       	cpc	r25, r18
     852:	61 f4       	brne	.+24     	; 0x86c <adc_disable_clock+0x20>
     854:	80 91 63 20 	lds	r24, 0x2063
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	80 93 63 20 	sts	0x2063, r24
     85e:	81 11       	cpse	r24, r1
     860:	13 c0       	rjmp	.+38     	; 0x888 <adc_disable_clock+0x3c>
     862:	62 e0       	ldi	r22, 0x02	; 2
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	c6 cf       	rjmp	.-116    	; 0x7f6 <sysclk_disable_module>
     86a:	08 95       	ret
     86c:	80 34       	cpi	r24, 0x40	; 64
     86e:	92 40       	sbci	r25, 0x02	; 2
     870:	59 f4       	brne	.+22     	; 0x888 <adc_disable_clock+0x3c>
     872:	80 91 62 20 	lds	r24, 0x2062
     876:	81 50       	subi	r24, 0x01	; 1
     878:	80 93 62 20 	sts	0x2062, r24
     87c:	81 11       	cpse	r24, r1
     87e:	04 c0       	rjmp	.+8      	; 0x888 <adc_disable_clock+0x3c>
     880:	62 e0       	ldi	r22, 0x02	; 2
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	b7 cf       	rjmp	.-146    	; 0x7f6 <sysclk_disable_module>
     888:	08 95       	ret

0000088a <adc_enable>:
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	1f b7       	in	r17, 0x3f	; 63
     894:	f8 94       	cli
     896:	b9 df       	rcall	.-142    	; 0x80a <adc_enable_clock>
     898:	88 81       	ld	r24, Y
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	88 83       	st	Y, r24
     89e:	1f bf       	out	0x3f, r17	; 63
     8a0:	8f b7       	in	r24, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	e5 ec       	ldi	r30, 0xC5	; 197
     8a6:	f0 e2       	ldi	r31, 0x20	; 32
     8a8:	90 81       	ld	r25, Z
     8aa:	9f 5f       	subi	r25, 0xFF	; 255
     8ac:	90 83       	st	Z, r25
     8ae:	8f bf       	out	0x3f, r24	; 63
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	08 95       	ret

000008b8 <adc_write_configuration>:
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
     8c8:	8b 01       	movw	r16, r22
     8ca:	c1 15       	cp	r28, r1
     8cc:	22 e0       	ldi	r18, 0x02	; 2
     8ce:	d2 07       	cpc	r29, r18
     8d0:	71 f4       	brne	.+28     	; 0x8ee <adc_write_configuration+0x36>
     8d2:	61 e2       	ldi	r22, 0x21	; 33
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	a7 d0       	rcall	.+334    	; 0xa28 <nvm_read_byte>
     8da:	e8 2e       	mov	r14, r24
     8dc:	f1 2c       	mov	r15, r1
     8de:	60 e2       	ldi	r22, 0x20	; 32
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	a1 d0       	rcall	.+322    	; 0xa28 <nvm_read_byte>
     8e6:	fe 2c       	mov	r15, r14
     8e8:	ee 24       	eor	r14, r14
     8ea:	e8 2a       	or	r14, r24
     8ec:	10 c0       	rjmp	.+32     	; 0x90e <adc_write_configuration+0x56>
     8ee:	80 34       	cpi	r24, 0x40	; 64
     8f0:	92 40       	sbci	r25, 0x02	; 2
     8f2:	59 f5       	brne	.+86     	; 0x94a <adc_write_configuration+0x92>
     8f4:	65 e2       	ldi	r22, 0x25	; 37
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	96 d0       	rcall	.+300    	; 0xa28 <nvm_read_byte>
     8fc:	e8 2e       	mov	r14, r24
     8fe:	f1 2c       	mov	r15, r1
     900:	64 e2       	ldi	r22, 0x24	; 36
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	90 d0       	rcall	.+288    	; 0xa28 <nvm_read_byte>
     908:	fe 2c       	mov	r15, r14
     90a:	ee 24       	eor	r14, r14
     90c:	e8 2a       	or	r14, r24
     90e:	df b6       	in	r13, 0x3f	; 63
     910:	f8 94       	cli
     912:	ce 01       	movw	r24, r28
     914:	7a df       	rcall	.-268    	; 0x80a <adc_enable_clock>
     916:	28 81       	ld	r18, Y
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	88 83       	st	Y, r24
     91c:	ec 86       	std	Y+12, r14	; 0x0c
     91e:	fd 86       	std	Y+13, r15	; 0x0d
     920:	f8 01       	movw	r30, r16
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	96 81       	ldd	r25, Z+6	; 0x06
     926:	88 8f       	std	Y+24, r24	; 0x18
     928:	99 8f       	std	Y+25, r25	; 0x19
     92a:	82 81       	ldd	r24, Z+2	; 0x02
     92c:	8a 83       	std	Y+2, r24	; 0x02
     92e:	84 81       	ldd	r24, Z+4	; 0x04
     930:	8c 83       	std	Y+4, r24	; 0x04
     932:	83 81       	ldd	r24, Z+3	; 0x03
     934:	8b 83       	std	Y+3, r24	; 0x03
     936:	81 81       	ldd	r24, Z+1	; 0x01
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	82 2f       	mov	r24, r18
     93c:	81 70       	andi	r24, 0x01	; 1
     93e:	90 81       	ld	r25, Z
     940:	89 2b       	or	r24, r25
     942:	88 83       	st	Y, r24
     944:	ce 01       	movw	r24, r28
     946:	82 df       	rcall	.-252    	; 0x84c <adc_disable_clock>
     948:	df be       	out	0x3f, r13	; 63
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	08 95       	ret

0000095a <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	7c 01       	movw	r14, r24
     96a:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     96c:	86 2f       	mov	r24, r22
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	21 f4       	brne	.+8      	; 0x97a <adcch_write_configuration+0x20>
		index += 2;
		ch_mask >>= 2;
     972:	66 95       	lsr	r22
     974:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	01 c0       	rjmp	.+2      	; 0x97c <adcch_write_configuration+0x22>
 * \return Pointer to ADC channel
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     97a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     97c:	60 ff       	sbrs	r22, 0
		index++;
     97e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return &adc->CH0 + index;
     980:	e7 01       	movw	r28, r14
     982:	a0 96       	adiw	r28, 0x20	; 32
     984:	98 e0       	ldi	r25, 0x08	; 8
     986:	89 9f       	mul	r24, r25
     988:	c0 0d       	add	r28, r0
     98a:	d1 1d       	adc	r29, r1
     98c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     98e:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     990:	f8 94       	cli
			return;
		}
	}
#endif /* CONFIG_ADC_CALLBACK_ENABLE */

	adc_enable_clock(adc);
     992:	c7 01       	movw	r24, r14
     994:	3a df       	rcall	.-396    	; 0x80a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     996:	f8 01       	movw	r30, r16
     998:	80 81       	ld	r24, Z
     99a:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     9a0:	81 81       	ldd	r24, Z+1	; 0x01
     9a2:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
		// USB devices has channel scan available on ADC channel 0
		adc_ch->SCAN = ch_conf->scan;
	}
#endif
	adc_disable_clock(adc);
     9a4:	c7 01       	movw	r24, r14
     9a6:	52 df       	rcall	.-348    	; 0x84c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9a8:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	08 95       	ret

000009ba <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	7c 01       	movw	r14, r24
     9ca:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     9cc:	86 2f       	mov	r24, r22
     9ce:	83 70       	andi	r24, 0x03	; 3
     9d0:	21 f4       	brne	.+8      	; 0x9da <adcch_read_configuration+0x20>
		index += 2;
		ch_mask >>= 2;
     9d2:	66 95       	lsr	r22
     9d4:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <adcch_read_configuration+0x22>
 * \return Pointer to ADC channel
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     9da:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     9dc:	60 ff       	sbrs	r22, 0
		index++;
     9de:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return &adc->CH0 + index;
     9e0:	87 01       	movw	r16, r14
     9e2:	00 5e       	subi	r16, 0xE0	; 224
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	98 e0       	ldi	r25, 0x08	; 8
     9e8:	89 9f       	mul	r24, r25
     9ea:	00 0d       	add	r16, r0
     9ec:	11 1d       	adc	r17, r1
     9ee:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9f0:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     9f2:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     9f4:	c7 01       	movw	r24, r14
     9f6:	09 df       	rcall	.-494    	; 0x80a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 81       	ld	r24, Z
     9fc:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
		// USB devices has channel scan available on ADC channel 0
		ch_conf->scan = adc_ch->SCAN;
	}
#endif
	adc_disable_clock(adc);
     a06:	c7 01       	movw	r24, r14
     a08:	21 df       	rcall	.-446    	; 0x84c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a0a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	08 95       	ret

00000a1c <ccp_write_io>:
     a1c:	1b be       	out	0x3b, r1	; 59
     a1e:	fc 01       	movw	r30, r24
     a20:	28 ed       	ldi	r18, 0xD8	; 216
     a22:	24 bf       	out	0x34, r18	; 52
     a24:	60 83       	st	Z, r22
     a26:	08 95       	ret

00000a28 <nvm_read_byte>:
     a28:	40 91 ca 01 	lds	r20, 0x01CA
     a2c:	e6 2f       	mov	r30, r22
     a2e:	f7 2f       	mov	r31, r23
     a30:	80 93 ca 01 	sts	0x01CA, r24
     a34:	84 91       	lpm	r24, Z
     a36:	40 93 ca 01 	sts	0x01CA, r20
     a3a:	08 95       	ret

00000a3c <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
     a4e:	6a 01       	movw	r12, r20
     a50:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
     a52:	db 01       	movw	r26, r22
     a54:	ca 01       	movw	r24, r20
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	a1 09       	sbc	r26, r1
     a5a:	b1 09       	sbc	r27, r1
     a5c:	bc 01       	movw	r22, r24
     a5e:	cd 01       	movw	r24, r26
     a60:	60 0f       	add	r22, r16
     a62:	71 1f       	adc	r23, r17
     a64:	82 1f       	adc	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	a7 01       	movw	r20, r14
     a6a:	96 01       	movw	r18, r12
     a6c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>

	if (divisor > 128) {
     a70:	21 38       	cpi	r18, 0x81	; 129
     a72:	31 05       	cpc	r19, r1
     a74:	41 05       	cpc	r20, r1
     a76:	51 05       	cpc	r21, r1
     a78:	f8 f4       	brcc	.+62     	; 0xab8 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
     a7a:	21 34       	cpi	r18, 0x41	; 65
     a7c:	60 f4       	brcc	.+24     	; 0xa96 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
     a7e:	21 32       	cpi	r18, 0x21	; 33
     a80:	60 f4       	brcc	.+24     	; 0xa9a <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
     a82:	21 31       	cpi	r18, 0x11	; 17
     a84:	60 f4       	brcc	.+24     	; 0xa9e <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
     a86:	29 30       	cpi	r18, 0x09	; 9
     a88:	60 f4       	brcc	.+24     	; 0xaa2 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
     a8a:	25 30       	cpi	r18, 0x05	; 5
     a8c:	60 f4       	brcc	.+24     	; 0xaa6 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
     a8e:	23 30       	cpi	r18, 0x03	; 3
     a90:	60 f0       	brcs	.+24     	; 0xaaa <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0b c0       	rjmp	.+22     	; 0xaac <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	09 c0       	rjmp	.+18     	; 0xaac <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
     a9e:	92 e8       	ldi	r25, 0x82	; 130
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
     aa6:	91 e8       	ldi	r25, 0x81	; 129
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
     aaa:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
     aac:	88 81       	ld	r24, Y
     aae:	8c 77       	andi	r24, 0x7C	; 124
     ab0:	89 2b       	or	r24, r25
     ab2:	88 83       	st	Y, r24

	return 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
     ab8:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	08 95       	ret

00000acc <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	08 b6       	in	r0, 0x38	; 56
     ad8:	0f 92       	push	r0
     ada:	18 be       	out	0x38, r1	; 56
     adc:	09 b6       	in	r0, 0x39	; 57
     ade:	0f 92       	push	r0
     ae0:	19 be       	out	0x39, r1	; 57
     ae2:	0b b6       	in	r0, 0x3b	; 59
     ae4:	0f 92       	push	r0
     ae6:	1b be       	out	0x3b, r1	; 59
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     b00:	e0 91 b0 20 	lds	r30, 0x20B0
     b04:	f0 91 b1 20 	lds	r31, 0x20B1
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	09 f0       	breq	.+2      	; 0xb0e <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     b0c:	19 95       	eicall
	}
}
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	0b be       	out	0x3b, r0	; 59
     b2a:	0f 90       	pop	r0
     b2c:	09 be       	out	0x39, r0	; 57
     b2e:	0f 90       	pop	r0
     b30:	08 be       	out	0x38, r0	; 56
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	08 b6       	in	r0, 0x38	; 56
     b48:	0f 92       	push	r0
     b4a:	18 be       	out	0x38, r1	; 56
     b4c:	09 b6       	in	r0, 0x39	; 57
     b4e:	0f 92       	push	r0
     b50:	19 be       	out	0x39, r1	; 57
     b52:	0b b6       	in	r0, 0x3b	; 59
     b54:	0f 92       	push	r0
     b56:	1b be       	out	0x3b, r1	; 59
     b58:	2f 93       	push	r18
     b5a:	3f 93       	push	r19
     b5c:	4f 93       	push	r20
     b5e:	5f 93       	push	r21
     b60:	6f 93       	push	r22
     b62:	7f 93       	push	r23
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     b70:	e0 91 ae 20 	lds	r30, 0x20AE
     b74:	f0 91 af 20 	lds	r31, 0x20AF
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	09 f0       	breq	.+2      	; 0xb7e <__vector_15+0x42>
		tc_tcc0_err_callback();
     b7c:	19 95       	eicall
	}
}
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0b be       	out	0x3b, r0	; 59
     b9a:	0f 90       	pop	r0
     b9c:	09 be       	out	0x39, r0	; 57
     b9e:	0f 90       	pop	r0
     ba0:	08 be       	out	0x38, r0	; 56
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	08 b6       	in	r0, 0x38	; 56
     bb8:	0f 92       	push	r0
     bba:	18 be       	out	0x38, r1	; 56
     bbc:	09 b6       	in	r0, 0x39	; 57
     bbe:	0f 92       	push	r0
     bc0:	19 be       	out	0x39, r1	; 57
     bc2:	0b b6       	in	r0, 0x3b	; 59
     bc4:	0f 92       	push	r0
     bc6:	1b be       	out	0x3b, r1	; 59
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	ef 93       	push	r30
     bde:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     be0:	e0 91 ac 20 	lds	r30, 0x20AC
     be4:	f0 91 ad 20 	lds	r31, 0x20AD
     be8:	30 97       	sbiw	r30, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <__vector_16+0x42>
		tc_tcc0_cca_callback();
     bec:	19 95       	eicall
	}
}
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	09 be       	out	0x39, r0	; 57
     c0e:	0f 90       	pop	r0
     c10:	08 be       	out	0x38, r0	; 56
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	08 b6       	in	r0, 0x38	; 56
     c28:	0f 92       	push	r0
     c2a:	18 be       	out	0x38, r1	; 56
     c2c:	09 b6       	in	r0, 0x39	; 57
     c2e:	0f 92       	push	r0
     c30:	19 be       	out	0x39, r1	; 57
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	1b be       	out	0x3b, r1	; 59
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     c50:	e0 91 aa 20 	lds	r30, 0x20AA
     c54:	f0 91 ab 20 	lds	r31, 0x20AB
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     c5c:	19 95       	eicall
	}
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	0b be       	out	0x3b, r0	; 59
     c7a:	0f 90       	pop	r0
     c7c:	09 be       	out	0x39, r0	; 57
     c7e:	0f 90       	pop	r0
     c80:	08 be       	out	0x38, r0	; 56
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	08 b6       	in	r0, 0x38	; 56
     c98:	0f 92       	push	r0
     c9a:	18 be       	out	0x38, r1	; 56
     c9c:	09 b6       	in	r0, 0x39	; 57
     c9e:	0f 92       	push	r0
     ca0:	19 be       	out	0x39, r1	; 57
     ca2:	0b b6       	in	r0, 0x3b	; 59
     ca4:	0f 92       	push	r0
     ca6:	1b be       	out	0x3b, r1	; 59
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     cc0:	e0 91 a8 20 	lds	r30, 0x20A8
     cc4:	f0 91 a9 20 	lds	r31, 0x20A9
     cc8:	30 97       	sbiw	r30, 0x00	; 0
     cca:	09 f0       	breq	.+2      	; 0xcce <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     ccc:	19 95       	eicall
	}
}
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0b be       	out	0x3b, r0	; 59
     cea:	0f 90       	pop	r0
     cec:	09 be       	out	0x39, r0	; 57
     cee:	0f 90       	pop	r0
     cf0:	08 be       	out	0x38, r0	; 56
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	08 b6       	in	r0, 0x38	; 56
     d08:	0f 92       	push	r0
     d0a:	18 be       	out	0x38, r1	; 56
     d0c:	09 b6       	in	r0, 0x39	; 57
     d0e:	0f 92       	push	r0
     d10:	19 be       	out	0x39, r1	; 57
     d12:	0b b6       	in	r0, 0x3b	; 59
     d14:	0f 92       	push	r0
     d16:	1b be       	out	0x3b, r1	; 59
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     d30:	e0 91 a6 20 	lds	r30, 0x20A6
     d34:	f0 91 a7 20 	lds	r31, 0x20A7
     d38:	30 97       	sbiw	r30, 0x00	; 0
     d3a:	09 f0       	breq	.+2      	; 0xd3e <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     d3c:	19 95       	eicall
	}
}
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0b be       	out	0x3b, r0	; 59
     d5a:	0f 90       	pop	r0
     d5c:	09 be       	out	0x39, r0	; 57
     d5e:	0f 90       	pop	r0
     d60:	08 be       	out	0x38, r0	; 56
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	08 b6       	in	r0, 0x38	; 56
     d78:	0f 92       	push	r0
     d7a:	18 be       	out	0x38, r1	; 56
     d7c:	09 b6       	in	r0, 0x39	; 57
     d7e:	0f 92       	push	r0
     d80:	19 be       	out	0x39, r1	; 57
     d82:	0b b6       	in	r0, 0x3b	; 59
     d84:	0f 92       	push	r0
     d86:	1b be       	out	0x3b, r1	; 59
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     da0:	e0 91 a4 20 	lds	r30, 0x20A4
     da4:	f0 91 a5 20 	lds	r31, 0x20A5
     da8:	30 97       	sbiw	r30, 0x00	; 0
     daa:	09 f0       	breq	.+2      	; 0xdae <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     dac:	19 95       	eicall
	}
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0b be       	out	0x3b, r0	; 59
     dca:	0f 90       	pop	r0
     dcc:	09 be       	out	0x39, r0	; 57
     dce:	0f 90       	pop	r0
     dd0:	08 be       	out	0x38, r0	; 56
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	08 b6       	in	r0, 0x38	; 56
     de8:	0f 92       	push	r0
     dea:	18 be       	out	0x38, r1	; 56
     dec:	09 b6       	in	r0, 0x39	; 57
     dee:	0f 92       	push	r0
     df0:	19 be       	out	0x39, r1	; 57
     df2:	0b b6       	in	r0, 0x3b	; 59
     df4:	0f 92       	push	r0
     df6:	1b be       	out	0x3b, r1	; 59
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     e10:	e0 91 a2 20 	lds	r30, 0x20A2
     e14:	f0 91 a3 20 	lds	r31, 0x20A3
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_21+0x42>
		tc_tcc1_err_callback();
     e1c:	19 95       	eicall
	}
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	09 be       	out	0x39, r0	; 57
     e3e:	0f 90       	pop	r0
     e40:	08 be       	out	0x38, r0	; 56
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	08 b6       	in	r0, 0x38	; 56
     e58:	0f 92       	push	r0
     e5a:	18 be       	out	0x38, r1	; 56
     e5c:	09 b6       	in	r0, 0x39	; 57
     e5e:	0f 92       	push	r0
     e60:	19 be       	out	0x39, r1	; 57
     e62:	0b b6       	in	r0, 0x3b	; 59
     e64:	0f 92       	push	r0
     e66:	1b be       	out	0x3b, r1	; 59
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     e80:	e0 91 a0 20 	lds	r30, 0x20A0
     e84:	f0 91 a1 20 	lds	r31, 0x20A1
     e88:	30 97       	sbiw	r30, 0x00	; 0
     e8a:	09 f0       	breq	.+2      	; 0xe8e <__vector_22+0x42>
		tc_tcc1_cca_callback();
     e8c:	19 95       	eicall
	}
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	09 be       	out	0x39, r0	; 57
     eae:	0f 90       	pop	r0
     eb0:	08 be       	out	0x38, r0	; 56
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	08 b6       	in	r0, 0x38	; 56
     ec8:	0f 92       	push	r0
     eca:	18 be       	out	0x38, r1	; 56
     ecc:	09 b6       	in	r0, 0x39	; 57
     ece:	0f 92       	push	r0
     ed0:	19 be       	out	0x39, r1	; 57
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	1b be       	out	0x3b, r1	; 59
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     ef0:	e0 91 9e 20 	lds	r30, 0x209E
     ef4:	f0 91 9f 20 	lds	r31, 0x209F
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     efc:	19 95       	eicall
	}
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	09 be       	out	0x39, r0	; 57
     f1e:	0f 90       	pop	r0
     f20:	08 be       	out	0x38, r0	; 56
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	08 b6       	in	r0, 0x38	; 56
     f38:	0f 92       	push	r0
     f3a:	18 be       	out	0x38, r1	; 56
     f3c:	09 b6       	in	r0, 0x39	; 57
     f3e:	0f 92       	push	r0
     f40:	19 be       	out	0x39, r1	; 57
     f42:	0b b6       	in	r0, 0x3b	; 59
     f44:	0f 92       	push	r0
     f46:	1b be       	out	0x3b, r1	; 59
     f48:	2f 93       	push	r18
     f4a:	3f 93       	push	r19
     f4c:	4f 93       	push	r20
     f4e:	5f 93       	push	r21
     f50:	6f 93       	push	r22
     f52:	7f 93       	push	r23
     f54:	8f 93       	push	r24
     f56:	9f 93       	push	r25
     f58:	af 93       	push	r26
     f5a:	bf 93       	push	r27
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     f60:	e0 91 9c 20 	lds	r30, 0x209C
     f64:	f0 91 9d 20 	lds	r31, 0x209D
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__vector_78+0x42>
		tc_tcd0_err_callback();
     f6c:	19 95       	eicall
	}
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0b be       	out	0x3b, r0	; 59
     f8a:	0f 90       	pop	r0
     f8c:	09 be       	out	0x39, r0	; 57
     f8e:	0f 90       	pop	r0
     f90:	08 be       	out	0x38, r0	; 56
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	08 b6       	in	r0, 0x38	; 56
     fa8:	0f 92       	push	r0
     faa:	18 be       	out	0x38, r1	; 56
     fac:	09 b6       	in	r0, 0x39	; 57
     fae:	0f 92       	push	r0
     fb0:	19 be       	out	0x39, r1	; 57
     fb2:	0b b6       	in	r0, 0x3b	; 59
     fb4:	0f 92       	push	r0
     fb6:	1b be       	out	0x3b, r1	; 59
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     fd0:	e0 91 9a 20 	lds	r30, 0x209A
     fd4:	f0 91 9b 20 	lds	r31, 0x209B
     fd8:	30 97       	sbiw	r30, 0x00	; 0
     fda:	09 f0       	breq	.+2      	; 0xfde <__vector_79+0x42>
		tc_tcd0_cca_callback();
     fdc:	19 95       	eicall
	}
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0b be       	out	0x3b, r0	; 59
     ffa:	0f 90       	pop	r0
     ffc:	09 be       	out	0x39, r0	; 57
     ffe:	0f 90       	pop	r0
    1000:	08 be       	out	0x38, r0	; 56
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	08 b6       	in	r0, 0x38	; 56
    1018:	0f 92       	push	r0
    101a:	18 be       	out	0x38, r1	; 56
    101c:	09 b6       	in	r0, 0x39	; 57
    101e:	0f 92       	push	r0
    1020:	19 be       	out	0x39, r1	; 57
    1022:	0b b6       	in	r0, 0x3b	; 59
    1024:	0f 92       	push	r0
    1026:	1b be       	out	0x3b, r1	; 59
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1040:	e0 91 98 20 	lds	r30, 0x2098
    1044:	f0 91 99 20 	lds	r31, 0x2099
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	09 f0       	breq	.+2      	; 0x104e <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    104c:	19 95       	eicall
	}
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0b be       	out	0x3b, r0	; 59
    106a:	0f 90       	pop	r0
    106c:	09 be       	out	0x39, r0	; 57
    106e:	0f 90       	pop	r0
    1070:	08 be       	out	0x38, r0	; 56
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	08 b6       	in	r0, 0x38	; 56
    1088:	0f 92       	push	r0
    108a:	18 be       	out	0x38, r1	; 56
    108c:	09 b6       	in	r0, 0x39	; 57
    108e:	0f 92       	push	r0
    1090:	19 be       	out	0x39, r1	; 57
    1092:	0b b6       	in	r0, 0x3b	; 59
    1094:	0f 92       	push	r0
    1096:	1b be       	out	0x3b, r1	; 59
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    10b0:	e0 91 96 20 	lds	r30, 0x2096
    10b4:	f0 91 97 20 	lds	r31, 0x2097
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    10bc:	19 95       	eicall
	}
}
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	09 be       	out	0x39, r0	; 57
    10de:	0f 90       	pop	r0
    10e0:	08 be       	out	0x38, r0	; 56
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	08 b6       	in	r0, 0x38	; 56
    10f8:	0f 92       	push	r0
    10fa:	18 be       	out	0x38, r1	; 56
    10fc:	09 b6       	in	r0, 0x39	; 57
    10fe:	0f 92       	push	r0
    1100:	19 be       	out	0x39, r1	; 57
    1102:	0b b6       	in	r0, 0x3b	; 59
    1104:	0f 92       	push	r0
    1106:	1b be       	out	0x3b, r1	; 59
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1120:	e0 91 94 20 	lds	r30, 0x2094
    1124:	f0 91 95 20 	lds	r31, 0x2095
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	09 f0       	breq	.+2      	; 0x112e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    112c:	19 95       	eicall
	}
}
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	09 be       	out	0x39, r0	; 57
    114e:	0f 90       	pop	r0
    1150:	08 be       	out	0x38, r0	; 56
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	08 b6       	in	r0, 0x38	; 56
    1168:	0f 92       	push	r0
    116a:	18 be       	out	0x38, r1	; 56
    116c:	09 b6       	in	r0, 0x39	; 57
    116e:	0f 92       	push	r0
    1170:	19 be       	out	0x39, r1	; 57
    1172:	0b b6       	in	r0, 0x3b	; 59
    1174:	0f 92       	push	r0
    1176:	1b be       	out	0x3b, r1	; 59
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1190:	e0 91 92 20 	lds	r30, 0x2092
    1194:	f0 91 93 20 	lds	r31, 0x2093
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	09 f0       	breq	.+2      	; 0x119e <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    119c:	19 95       	eicall
	}
}
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0b be       	out	0x3b, r0	; 59
    11ba:	0f 90       	pop	r0
    11bc:	09 be       	out	0x39, r0	; 57
    11be:	0f 90       	pop	r0
    11c0:	08 be       	out	0x38, r0	; 56
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	08 b6       	in	r0, 0x38	; 56
    11d8:	0f 92       	push	r0
    11da:	18 be       	out	0x38, r1	; 56
    11dc:	09 b6       	in	r0, 0x39	; 57
    11de:	0f 92       	push	r0
    11e0:	19 be       	out	0x39, r1	; 57
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	1b be       	out	0x3b, r1	; 59
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1200:	e0 91 90 20 	lds	r30, 0x2090
    1204:	f0 91 91 20 	lds	r31, 0x2091
    1208:	30 97       	sbiw	r30, 0x00	; 0
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_84+0x42>
		tc_tcd1_err_callback();
    120c:	19 95       	eicall
	}
}
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	09 be       	out	0x39, r0	; 57
    122e:	0f 90       	pop	r0
    1230:	08 be       	out	0x38, r0	; 56
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	08 b6       	in	r0, 0x38	; 56
    1248:	0f 92       	push	r0
    124a:	18 be       	out	0x38, r1	; 56
    124c:	09 b6       	in	r0, 0x39	; 57
    124e:	0f 92       	push	r0
    1250:	19 be       	out	0x39, r1	; 57
    1252:	0b b6       	in	r0, 0x3b	; 59
    1254:	0f 92       	push	r0
    1256:	1b be       	out	0x3b, r1	; 59
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1270:	e0 91 8e 20 	lds	r30, 0x208E
    1274:	f0 91 8f 20 	lds	r31, 0x208F
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	09 f0       	breq	.+2      	; 0x127e <__vector_85+0x42>
		tc_tcd1_cca_callback();
    127c:	19 95       	eicall
	}
}
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	09 be       	out	0x39, r0	; 57
    129e:	0f 90       	pop	r0
    12a0:	08 be       	out	0x38, r0	; 56
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	08 b6       	in	r0, 0x38	; 56
    12b8:	0f 92       	push	r0
    12ba:	18 be       	out	0x38, r1	; 56
    12bc:	09 b6       	in	r0, 0x39	; 57
    12be:	0f 92       	push	r0
    12c0:	19 be       	out	0x39, r1	; 57
    12c2:	0b b6       	in	r0, 0x3b	; 59
    12c4:	0f 92       	push	r0
    12c6:	1b be       	out	0x3b, r1	; 59
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    12e0:	e0 91 8c 20 	lds	r30, 0x208C
    12e4:	f0 91 8d 20 	lds	r31, 0x208D
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    12ec:	19 95       	eicall
	}
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0b be       	out	0x3b, r0	; 59
    130a:	0f 90       	pop	r0
    130c:	09 be       	out	0x39, r0	; 57
    130e:	0f 90       	pop	r0
    1310:	08 be       	out	0x38, r0	; 56
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	08 b6       	in	r0, 0x38	; 56
    1328:	0f 92       	push	r0
    132a:	18 be       	out	0x38, r1	; 56
    132c:	09 b6       	in	r0, 0x39	; 57
    132e:	0f 92       	push	r0
    1330:	19 be       	out	0x39, r1	; 57
    1332:	0b b6       	in	r0, 0x3b	; 59
    1334:	0f 92       	push	r0
    1336:	1b be       	out	0x3b, r1	; 59
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1350:	e0 91 8a 20 	lds	r30, 0x208A
    1354:	f0 91 8b 20 	lds	r31, 0x208B
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <__vector_47+0x42>
		tc_tce0_ovf_callback();
    135c:	19 95       	eicall
	}
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0b be       	out	0x3b, r0	; 59
    137a:	0f 90       	pop	r0
    137c:	09 be       	out	0x39, r0	; 57
    137e:	0f 90       	pop	r0
    1380:	08 be       	out	0x38, r0	; 56
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	08 b6       	in	r0, 0x38	; 56
    1398:	0f 92       	push	r0
    139a:	18 be       	out	0x38, r1	; 56
    139c:	09 b6       	in	r0, 0x39	; 57
    139e:	0f 92       	push	r0
    13a0:	19 be       	out	0x39, r1	; 57
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	1b be       	out	0x3b, r1	; 59
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    13c0:	e0 91 88 20 	lds	r30, 0x2088
    13c4:	f0 91 89 20 	lds	r31, 0x2089
    13c8:	30 97       	sbiw	r30, 0x00	; 0
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__vector_48+0x42>
		tc_tce0_err_callback();
    13cc:	19 95       	eicall
	}
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0b be       	out	0x3b, r0	; 59
    13ea:	0f 90       	pop	r0
    13ec:	09 be       	out	0x39, r0	; 57
    13ee:	0f 90       	pop	r0
    13f0:	08 be       	out	0x38, r0	; 56
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	08 b6       	in	r0, 0x38	; 56
    1408:	0f 92       	push	r0
    140a:	18 be       	out	0x38, r1	; 56
    140c:	09 b6       	in	r0, 0x39	; 57
    140e:	0f 92       	push	r0
    1410:	19 be       	out	0x39, r1	; 57
    1412:	0b b6       	in	r0, 0x3b	; 59
    1414:	0f 92       	push	r0
    1416:	1b be       	out	0x3b, r1	; 59
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1430:	e0 91 86 20 	lds	r30, 0x2086
    1434:	f0 91 87 20 	lds	r31, 0x2087
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	09 f0       	breq	.+2      	; 0x143e <__vector_49+0x42>
		tc_tce0_cca_callback();
    143c:	19 95       	eicall
	}
}
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0b be       	out	0x3b, r0	; 59
    145a:	0f 90       	pop	r0
    145c:	09 be       	out	0x39, r0	; 57
    145e:	0f 90       	pop	r0
    1460:	08 be       	out	0x38, r0	; 56
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	08 b6       	in	r0, 0x38	; 56
    1478:	0f 92       	push	r0
    147a:	18 be       	out	0x38, r1	; 56
    147c:	09 b6       	in	r0, 0x39	; 57
    147e:	0f 92       	push	r0
    1480:	19 be       	out	0x39, r1	; 57
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	1b be       	out	0x3b, r1	; 59
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    14a0:	e0 91 84 20 	lds	r30, 0x2084
    14a4:	f0 91 85 20 	lds	r31, 0x2085
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	09 f0       	breq	.+2      	; 0x14ae <__vector_50+0x42>
		tc_tce0_ccb_callback();
    14ac:	19 95       	eicall
	}
}
    14ae:	ff 91       	pop	r31
    14b0:	ef 91       	pop	r30
    14b2:	bf 91       	pop	r27
    14b4:	af 91       	pop	r26
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	7f 91       	pop	r23
    14bc:	6f 91       	pop	r22
    14be:	5f 91       	pop	r21
    14c0:	4f 91       	pop	r20
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0b be       	out	0x3b, r0	; 59
    14ca:	0f 90       	pop	r0
    14cc:	09 be       	out	0x39, r0	; 57
    14ce:	0f 90       	pop	r0
    14d0:	08 be       	out	0x38, r0	; 56
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	08 b6       	in	r0, 0x38	; 56
    14e8:	0f 92       	push	r0
    14ea:	18 be       	out	0x38, r1	; 56
    14ec:	09 b6       	in	r0, 0x39	; 57
    14ee:	0f 92       	push	r0
    14f0:	19 be       	out	0x39, r1	; 57
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	1b be       	out	0x3b, r1	; 59
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1510:	e0 91 82 20 	lds	r30, 0x2082
    1514:	f0 91 83 20 	lds	r31, 0x2083
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	09 f0       	breq	.+2      	; 0x151e <__vector_51+0x42>
		tc_tce0_ccc_callback();
    151c:	19 95       	eicall
	}
}
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	0b be       	out	0x3b, r0	; 59
    153a:	0f 90       	pop	r0
    153c:	09 be       	out	0x39, r0	; 57
    153e:	0f 90       	pop	r0
    1540:	08 be       	out	0x38, r0	; 56
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	08 b6       	in	r0, 0x38	; 56
    1558:	0f 92       	push	r0
    155a:	18 be       	out	0x38, r1	; 56
    155c:	09 b6       	in	r0, 0x39	; 57
    155e:	0f 92       	push	r0
    1560:	19 be       	out	0x39, r1	; 57
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	1b be       	out	0x3b, r1	; 59
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1580:	e0 91 80 20 	lds	r30, 0x2080
    1584:	f0 91 81 20 	lds	r31, 0x2081
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_52+0x42>
		tc_tce0_ccd_callback();
    158c:	19 95       	eicall
	}
}
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0b be       	out	0x3b, r0	; 59
    15aa:	0f 90       	pop	r0
    15ac:	09 be       	out	0x39, r0	; 57
    15ae:	0f 90       	pop	r0
    15b0:	08 be       	out	0x38, r0	; 56
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0
    15b8:	1f 90       	pop	r1
    15ba:	18 95       	reti

000015bc <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	08 b6       	in	r0, 0x38	; 56
    15c8:	0f 92       	push	r0
    15ca:	18 be       	out	0x38, r1	; 56
    15cc:	09 b6       	in	r0, 0x39	; 57
    15ce:	0f 92       	push	r0
    15d0:	19 be       	out	0x39, r1	; 57
    15d2:	0b b6       	in	r0, 0x3b	; 59
    15d4:	0f 92       	push	r0
    15d6:	1b be       	out	0x3b, r1	; 59
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    15f0:	e0 91 7e 20 	lds	r30, 0x207E
    15f4:	f0 91 7f 20 	lds	r31, 0x207F
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	09 f0       	breq	.+2      	; 0x15fe <__vector_53+0x42>
		tc_tce1_ovf_callback();
    15fc:	19 95       	eicall
	}
}
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0b be       	out	0x3b, r0	; 59
    161a:	0f 90       	pop	r0
    161c:	09 be       	out	0x39, r0	; 57
    161e:	0f 90       	pop	r0
    1620:	08 be       	out	0x38, r0	; 56
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	08 b6       	in	r0, 0x38	; 56
    1638:	0f 92       	push	r0
    163a:	18 be       	out	0x38, r1	; 56
    163c:	09 b6       	in	r0, 0x39	; 57
    163e:	0f 92       	push	r0
    1640:	19 be       	out	0x39, r1	; 57
    1642:	0b b6       	in	r0, 0x3b	; 59
    1644:	0f 92       	push	r0
    1646:	1b be       	out	0x3b, r1	; 59
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1660:	e0 91 7c 20 	lds	r30, 0x207C
    1664:	f0 91 7d 20 	lds	r31, 0x207D
    1668:	30 97       	sbiw	r30, 0x00	; 0
    166a:	09 f0       	breq	.+2      	; 0x166e <__vector_54+0x42>
		tc_tce1_err_callback();
    166c:	19 95       	eicall
	}
}
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	09 be       	out	0x39, r0	; 57
    168e:	0f 90       	pop	r0
    1690:	08 be       	out	0x38, r0	; 56
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	0f 90       	pop	r0
    1698:	1f 90       	pop	r1
    169a:	18 95       	reti

0000169c <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	08 b6       	in	r0, 0x38	; 56
    16a8:	0f 92       	push	r0
    16aa:	18 be       	out	0x38, r1	; 56
    16ac:	09 b6       	in	r0, 0x39	; 57
    16ae:	0f 92       	push	r0
    16b0:	19 be       	out	0x39, r1	; 57
    16b2:	0b b6       	in	r0, 0x3b	; 59
    16b4:	0f 92       	push	r0
    16b6:	1b be       	out	0x3b, r1	; 59
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    16d0:	e0 91 7a 20 	lds	r30, 0x207A
    16d4:	f0 91 7b 20 	lds	r31, 0x207B
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_55+0x42>
		tc_tce1_cca_callback();
    16dc:	19 95       	eicall
	}
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0b be       	out	0x3b, r0	; 59
    16fa:	0f 90       	pop	r0
    16fc:	09 be       	out	0x39, r0	; 57
    16fe:	0f 90       	pop	r0
    1700:	08 be       	out	0x38, r0	; 56
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	08 b6       	in	r0, 0x38	; 56
    1718:	0f 92       	push	r0
    171a:	18 be       	out	0x38, r1	; 56
    171c:	09 b6       	in	r0, 0x39	; 57
    171e:	0f 92       	push	r0
    1720:	19 be       	out	0x39, r1	; 57
    1722:	0b b6       	in	r0, 0x3b	; 59
    1724:	0f 92       	push	r0
    1726:	1b be       	out	0x3b, r1	; 59
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1740:	e0 91 78 20 	lds	r30, 0x2078
    1744:	f0 91 79 20 	lds	r31, 0x2079
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <__vector_56+0x42>
		tc_tce1_ccb_callback();
    174c:	19 95       	eicall
	}
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	09 be       	out	0x39, r0	; 57
    176e:	0f 90       	pop	r0
    1770:	08 be       	out	0x38, r0	; 56
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	08 b6       	in	r0, 0x38	; 56
    1788:	0f 92       	push	r0
    178a:	18 be       	out	0x38, r1	; 56
    178c:	09 b6       	in	r0, 0x39	; 57
    178e:	0f 92       	push	r0
    1790:	19 be       	out	0x39, r1	; 57
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	1b be       	out	0x3b, r1	; 59
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    17b0:	e0 91 76 20 	lds	r30, 0x2076
    17b4:	f0 91 77 20 	lds	r31, 0x2077
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	09 f0       	breq	.+2      	; 0x17be <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    17bc:	19 95       	eicall
	}
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0b be       	out	0x3b, r0	; 59
    17da:	0f 90       	pop	r0
    17dc:	09 be       	out	0x39, r0	; 57
    17de:	0f 90       	pop	r0
    17e0:	08 be       	out	0x38, r0	; 56
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	08 b6       	in	r0, 0x38	; 56
    17f8:	0f 92       	push	r0
    17fa:	18 be       	out	0x38, r1	; 56
    17fc:	09 b6       	in	r0, 0x39	; 57
    17fe:	0f 92       	push	r0
    1800:	19 be       	out	0x39, r1	; 57
    1802:	0b b6       	in	r0, 0x3b	; 59
    1804:	0f 92       	push	r0
    1806:	1b be       	out	0x3b, r1	; 59
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1820:	e0 91 74 20 	lds	r30, 0x2074
    1824:	f0 91 75 20 	lds	r31, 0x2075
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	09 f0       	breq	.+2      	; 0x182e <__vector_109+0x42>
		tc_tcf0_err_callback();
    182c:	19 95       	eicall
	}
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0b be       	out	0x3b, r0	; 59
    184a:	0f 90       	pop	r0
    184c:	09 be       	out	0x39, r0	; 57
    184e:	0f 90       	pop	r0
    1850:	08 be       	out	0x38, r0	; 56
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	11 24       	eor	r1, r1
    1866:	08 b6       	in	r0, 0x38	; 56
    1868:	0f 92       	push	r0
    186a:	18 be       	out	0x38, r1	; 56
    186c:	09 b6       	in	r0, 0x39	; 57
    186e:	0f 92       	push	r0
    1870:	19 be       	out	0x39, r1	; 57
    1872:	0b b6       	in	r0, 0x3b	; 59
    1874:	0f 92       	push	r0
    1876:	1b be       	out	0x3b, r1	; 59
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1890:	e0 91 72 20 	lds	r30, 0x2072
    1894:	f0 91 73 20 	lds	r31, 0x2073
    1898:	30 97       	sbiw	r30, 0x00	; 0
    189a:	09 f0       	breq	.+2      	; 0x189e <__vector_110+0x42>
		tc_tcf0_cca_callback();
    189c:	19 95       	eicall
	}
}
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0b be       	out	0x3b, r0	; 59
    18ba:	0f 90       	pop	r0
    18bc:	09 be       	out	0x39, r0	; 57
    18be:	0f 90       	pop	r0
    18c0:	08 be       	out	0x38, r0	; 56
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	08 b6       	in	r0, 0x38	; 56
    18d8:	0f 92       	push	r0
    18da:	18 be       	out	0x38, r1	; 56
    18dc:	09 b6       	in	r0, 0x39	; 57
    18de:	0f 92       	push	r0
    18e0:	19 be       	out	0x39, r1	; 57
    18e2:	0b b6       	in	r0, 0x3b	; 59
    18e4:	0f 92       	push	r0
    18e6:	1b be       	out	0x3b, r1	; 59
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1900:	e0 91 70 20 	lds	r30, 0x2070
    1904:	f0 91 71 20 	lds	r31, 0x2071
    1908:	30 97       	sbiw	r30, 0x00	; 0
    190a:	09 f0       	breq	.+2      	; 0x190e <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    190c:	19 95       	eicall
	}
}
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	09 be       	out	0x39, r0	; 57
    192e:	0f 90       	pop	r0
    1930:	08 be       	out	0x38, r0	; 56
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    193c:	1f 92       	push	r1
    193e:	0f 92       	push	r0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	0f 92       	push	r0
    1944:	11 24       	eor	r1, r1
    1946:	08 b6       	in	r0, 0x38	; 56
    1948:	0f 92       	push	r0
    194a:	18 be       	out	0x38, r1	; 56
    194c:	09 b6       	in	r0, 0x39	; 57
    194e:	0f 92       	push	r0
    1950:	19 be       	out	0x39, r1	; 57
    1952:	0b b6       	in	r0, 0x3b	; 59
    1954:	0f 92       	push	r0
    1956:	1b be       	out	0x3b, r1	; 59
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1970:	e0 91 6e 20 	lds	r30, 0x206E
    1974:	f0 91 6f 20 	lds	r31, 0x206F
    1978:	30 97       	sbiw	r30, 0x00	; 0
    197a:	09 f0       	breq	.+2      	; 0x197e <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    197c:	19 95       	eicall
	}
}
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	7f 91       	pop	r23
    198c:	6f 91       	pop	r22
    198e:	5f 91       	pop	r21
    1990:	4f 91       	pop	r20
    1992:	3f 91       	pop	r19
    1994:	2f 91       	pop	r18
    1996:	0f 90       	pop	r0
    1998:	0b be       	out	0x3b, r0	; 59
    199a:	0f 90       	pop	r0
    199c:	09 be       	out	0x39, r0	; 57
    199e:	0f 90       	pop	r0
    19a0:	08 be       	out	0x38, r0	; 56
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	08 b6       	in	r0, 0x38	; 56
    19b8:	0f 92       	push	r0
    19ba:	18 be       	out	0x38, r1	; 56
    19bc:	09 b6       	in	r0, 0x39	; 57
    19be:	0f 92       	push	r0
    19c0:	19 be       	out	0x39, r1	; 57
    19c2:	0b b6       	in	r0, 0x3b	; 59
    19c4:	0f 92       	push	r0
    19c6:	1b be       	out	0x3b, r1	; 59
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    19e0:	e0 91 6c 20 	lds	r30, 0x206C
    19e4:	f0 91 6d 20 	lds	r31, 0x206D
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    19ec:	19 95       	eicall
	}
}
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0b be       	out	0x3b, r0	; 59
    1a0a:	0f 90       	pop	r0
    1a0c:	09 be       	out	0x39, r0	; 57
    1a0e:	0f 90       	pop	r0
    1a10:	08 be       	out	0x38, r0	; 56
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	08 b6       	in	r0, 0x38	; 56
    1a28:	0f 92       	push	r0
    1a2a:	18 be       	out	0x38, r1	; 56
    1a2c:	09 b6       	in	r0, 0x39	; 57
    1a2e:	0f 92       	push	r0
    1a30:	19 be       	out	0x39, r1	; 57
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	1b be       	out	0x3b, r1	; 59
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1a50:	e0 91 6a 20 	lds	r30, 0x206A
    1a54:	f0 91 6b 20 	lds	r31, 0x206B
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1a5c:	19 95       	eicall
	}
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0b be       	out	0x3b, r0	; 59
    1a7a:	0f 90       	pop	r0
    1a7c:	09 be       	out	0x39, r0	; 57
    1a7e:	0f 90       	pop	r0
    1a80:	08 be       	out	0x38, r0	; 56
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	08 b6       	in	r0, 0x38	; 56
    1a98:	0f 92       	push	r0
    1a9a:	18 be       	out	0x38, r1	; 56
    1a9c:	09 b6       	in	r0, 0x39	; 57
    1a9e:	0f 92       	push	r0
    1aa0:	19 be       	out	0x39, r1	; 57
    1aa2:	0b b6       	in	r0, 0x3b	; 59
    1aa4:	0f 92       	push	r0
    1aa6:	1b be       	out	0x3b, r1	; 59
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1ac0:	e0 91 68 20 	lds	r30, 0x2068
    1ac4:	f0 91 69 20 	lds	r31, 0x2069
    1ac8:	30 97       	sbiw	r30, 0x00	; 0
    1aca:	09 f0       	breq	.+2      	; 0x1ace <__vector_115+0x42>
		tc_tcf1_err_callback();
    1acc:	19 95       	eicall
	}
}
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0b be       	out	0x3b, r0	; 59
    1aea:	0f 90       	pop	r0
    1aec:	09 be       	out	0x39, r0	; 57
    1aee:	0f 90       	pop	r0
    1af0:	08 be       	out	0x38, r0	; 56
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	0f 90       	pop	r0
    1af8:	1f 90       	pop	r1
    1afa:	18 95       	reti

00001afc <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1afc:	1f 92       	push	r1
    1afe:	0f 92       	push	r0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	08 b6       	in	r0, 0x38	; 56
    1b08:	0f 92       	push	r0
    1b0a:	18 be       	out	0x38, r1	; 56
    1b0c:	09 b6       	in	r0, 0x39	; 57
    1b0e:	0f 92       	push	r0
    1b10:	19 be       	out	0x39, r1	; 57
    1b12:	0b b6       	in	r0, 0x3b	; 59
    1b14:	0f 92       	push	r0
    1b16:	1b be       	out	0x3b, r1	; 59
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1b30:	e0 91 66 20 	lds	r30, 0x2066
    1b34:	f0 91 67 20 	lds	r31, 0x2067
    1b38:	30 97       	sbiw	r30, 0x00	; 0
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1b3c:	19 95       	eicall
	}
}
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0b be       	out	0x3b, r0	; 59
    1b5a:	0f 90       	pop	r0
    1b5c:	09 be       	out	0x39, r0	; 57
    1b5e:	0f 90       	pop	r0
    1b60:	08 be       	out	0x38, r0	; 56
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	08 b6       	in	r0, 0x38	; 56
    1b78:	0f 92       	push	r0
    1b7a:	18 be       	out	0x38, r1	; 56
    1b7c:	09 b6       	in	r0, 0x39	; 57
    1b7e:	0f 92       	push	r0
    1b80:	19 be       	out	0x39, r1	; 57
    1b82:	0b b6       	in	r0, 0x3b	; 59
    1b84:	0f 92       	push	r0
    1b86:	1b be       	out	0x3b, r1	; 59
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1ba0:	e0 91 64 20 	lds	r30, 0x2064
    1ba4:	f0 91 65 20 	lds	r31, 0x2065
    1ba8:	30 97       	sbiw	r30, 0x00	; 0
    1baa:	09 f0       	breq	.+2      	; 0x1bae <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1bac:	19 95       	eicall
	}
}
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	0b be       	out	0x3b, r0	; 59
    1bca:	0f 90       	pop	r0
    1bcc:	09 be       	out	0x39, r0	; 57
    1bce:	0f 90       	pop	r0
    1bd0:	08 be       	out	0x38, r0	; 56
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1bdc:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bde:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1be0:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1be2:	28 2f       	mov	r18, r24
    1be4:	39 2f       	mov	r19, r25
    1be6:	21 15       	cp	r18, r1
    1be8:	88 e0       	ldi	r24, 0x08	; 8
    1bea:	38 07       	cpc	r19, r24
    1bec:	59 f4       	brne	.+22     	; 0x1c04 <tc_enable+0x28>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	83 e0       	ldi	r24, 0x03	; 3
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1bf8:	64 e0       	ldi	r22, 0x04	; 4
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c02:	6a c0       	rjmp	.+212    	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1c04:	20 34       	cpi	r18, 0x40	; 64
    1c06:	88 e0       	ldi	r24, 0x08	; 8
    1c08:	38 07       	cpc	r19, r24
    1c0a:	59 f4       	brne	.+22     	; 0x1c22 <tc_enable+0x46>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1c16:	64 e0       	ldi	r22, 0x04	; 4
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c20:	5b c0       	rjmp	.+182    	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1c22:	21 15       	cp	r18, r1
    1c24:	89 e0       	ldi	r24, 0x09	; 9
    1c26:	38 07       	cpc	r19, r24
    1c28:	59 f4       	brne	.+22     	; 0x1c40 <tc_enable+0x64>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	84 e0       	ldi	r24, 0x04	; 4
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c3e:	4c c0       	rjmp	.+152    	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1c40:	20 34       	cpi	r18, 0x40	; 64
    1c42:	89 e0       	ldi	r24, 0x09	; 9
    1c44:	38 07       	cpc	r19, r24
    1c46:	59 f4       	brne	.+22     	; 0x1c5e <tc_enable+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1c52:	64 e0       	ldi	r22, 0x04	; 4
    1c54:	84 e0       	ldi	r24, 0x04	; 4
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c5c:	3d c0       	rjmp	.+122    	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1c5e:	21 15       	cp	r18, r1
    1c60:	8a e0       	ldi	r24, 0x0A	; 10
    1c62:	38 07       	cpc	r19, r24
    1c64:	59 f4       	brne	.+22     	; 0x1c7c <tc_enable+0xa0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	85 e0       	ldi	r24, 0x05	; 5
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1c70:	64 e0       	ldi	r22, 0x04	; 4
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c7a:	2e c0       	rjmp	.+92     	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1c7c:	20 34       	cpi	r18, 0x40	; 64
    1c7e:	8a e0       	ldi	r24, 0x0A	; 10
    1c80:	38 07       	cpc	r19, r24
    1c82:	59 f4       	brne	.+22     	; 0x1c9a <tc_enable+0xbe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	85 e0       	ldi	r24, 0x05	; 5
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1c8e:	64 e0       	ldi	r22, 0x04	; 4
    1c90:	85 e0       	ldi	r24, 0x05	; 5
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1c98:	1f c0       	rjmp	.+62     	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1c9a:	21 15       	cp	r18, r1
    1c9c:	8b e0       	ldi	r24, 0x0B	; 11
    1c9e:	38 07       	cpc	r19, r24
    1ca0:	59 f4       	brne	.+22     	; 0x1cb8 <tc_enable+0xdc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	86 e0       	ldi	r24, 0x06	; 6
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1cac:	64 e0       	ldi	r22, 0x04	; 4
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1cb6:	10 c0       	rjmp	.+32     	; 0x1cd8 <tc_enable+0xfc>
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
    1cb8:	20 34       	cpi	r18, 0x40	; 64
    1cba:	3b 40       	sbci	r19, 0x0B	; 11
    1cbc:	59 f4       	brne	.+22     	; 0x1cd4 <tc_enable+0xf8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	86 e0       	ldi	r24, 0x06	; 6
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1cc8:	64 e0       	ldi	r22, 0x04	; 4
    1cca:	86 e0       	ldi	r24, 0x06	; 6
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sysclk_enable_module>
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <tc_enable+0xfc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cd4:	cf bf       	out	0x3f, r28	; 63
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <tc_enable+0x10e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1cd8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1cda:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1cdc:	e5 ec       	ldi	r30, 0xC5	; 197
    1cde:	f0 e2       	ldi	r31, 0x20	; 32
    1ce0:	90 81       	ld	r25, Z
    1ce2:	9f 5f       	subi	r25, 0xFF	; 255
    1ce4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ce6:	8f bf       	out	0x3f, r24	; 63
    1ce8:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <usart_putchar>:
	}
	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1cee:	fc 01       	movw	r30, r24
    1cf0:	81 81       	ldd	r24, Z+1	; 0x01
    1cf2:	85 ff       	sbrs	r24, 5
    1cf4:	fd cf       	rjmp	.-6      	; 0x1cf0 <usart_putchar+0x2>
    1cf6:	60 83       	st	Z, r22
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	08 95       	ret

00001cfe <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1cfe:	4f 92       	push	r4
    1d00:	5f 92       	push	r5
    1d02:	6f 92       	push	r6
    1d04:	7f 92       	push	r7
    1d06:	8f 92       	push	r8
    1d08:	9f 92       	push	r9
    1d0a:	af 92       	push	r10
    1d0c:	bf 92       	push	r11
    1d0e:	cf 92       	push	r12
    1d10:	df 92       	push	r13
    1d12:	ef 92       	push	r14
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	ec 01       	movw	r28, r24
    1d20:	4a 01       	movw	r8, r20
    1d22:	5b 01       	movw	r10, r22
    1d24:	28 01       	movw	r4, r16
    1d26:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
    1d28:	d9 01       	movw	r26, r18
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	68 94       	set
    1d2e:	12 f8       	bld	r1, 2
    1d30:	b6 95       	lsr	r27
    1d32:	a7 95       	ror	r26
    1d34:	97 95       	ror	r25
    1d36:	87 95       	ror	r24
    1d38:	16 94       	lsr	r1
    1d3a:	d1 f7       	brne	.-12     	; 0x1d30 <usart_set_baudrate+0x32>
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
    1d3c:	b9 01       	movw	r22, r18
    1d3e:	a8 01       	movw	r20, r16
    1d40:	03 2e       	mov	r0, r19
    1d42:	36 e1       	ldi	r19, 0x16	; 22
    1d44:	76 95       	lsr	r23
    1d46:	67 95       	ror	r22
    1d48:	57 95       	ror	r21
    1d4a:	47 95       	ror	r20
    1d4c:	3a 95       	dec	r19
    1d4e:	d1 f7       	brne	.-12     	; 0x1d44 <usart_set_baudrate+0x46>
    1d50:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	22 fd       	sbrc	r18, 2
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    1d58:	b6 95       	lsr	r27
    1d5a:	a7 95       	ror	r26
    1d5c:	97 95       	ror	r25
    1d5e:	87 95       	ror	r24
		min_rate /= 2;
    1d60:	76 95       	lsr	r23
    1d62:	67 95       	ror	r22
    1d64:	57 95       	ror	r21
    1d66:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1d68:	88 15       	cp	r24, r8
    1d6a:	99 05       	cpc	r25, r9
    1d6c:	aa 05       	cpc	r26, r10
    1d6e:	bb 05       	cpc	r27, r11
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <usart_set_baudrate+0x76>
    1d72:	a6 c0       	rjmp	.+332    	; 0x1ec0 <usart_set_baudrate+0x1c2>
    1d74:	84 16       	cp	r8, r20
    1d76:	95 06       	cpc	r9, r21
    1d78:	a6 06       	cpc	r10, r22
    1d7a:	b7 06       	cpc	r11, r23
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <usart_set_baudrate+0x82>
    1d7e:	a2 c0       	rjmp	.+324    	; 0x1ec4 <usart_set_baudrate+0x1c6>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	82 fd       	sbrc	r24, 2
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <usart_set_baudrate+0x90>
		baud *= 2;
    1d86:	88 0c       	add	r8, r8
    1d88:	99 1c       	adc	r9, r9
    1d8a:	aa 1c       	adc	r10, r10
    1d8c:	bb 1c       	adc	r11, r11

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1d8e:	c3 01       	movw	r24, r6
    1d90:	b2 01       	movw	r22, r4
    1d92:	a5 01       	movw	r20, r10
    1d94:	94 01       	movw	r18, r8
    1d96:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1d9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	41 05       	cpc	r20, r1
    1da0:	51 05       	cpc	r21, r1
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <usart_set_baudrate+0xa8>
    1da4:	91 c0       	rjmp	.+290    	; 0x1ec8 <usart_set_baudrate+0x1ca>
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
    1da6:	c1 2c       	mov	r12, r1
    1da8:	d1 2c       	mov	r13, r1
    1daa:	76 01       	movw	r14, r12
    1dac:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1dae:	19 ef       	ldi	r17, 0xF9	; 249
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1db2:	2c 15       	cp	r18, r12
    1db4:	3d 05       	cpc	r19, r13
    1db6:	4e 05       	cpc	r20, r14
    1db8:	5f 05       	cpc	r21, r15
    1dba:	68 f0       	brcs	.+26     	; 0x1dd6 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1dbc:	cc 0c       	add	r12, r12
    1dbe:	dd 1c       	adc	r13, r13
    1dc0:	ee 1c       	adc	r14, r14
    1dc2:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1dc4:	1d 3f       	cpi	r17, 0xFD	; 253
    1dc6:	14 f4       	brge	.+4      	; 0x1dcc <usart_set_baudrate+0xce>
			limit |= 1;
    1dc8:	68 94       	set
    1dca:	c0 f8       	bld	r12, 0
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1dcc:	1f 5f       	subi	r17, 0xFF	; 255
    1dce:	17 30       	cpi	r17, 0x07	; 7
    1dd0:	81 f7       	brne	.-32     	; 0x1db2 <usart_set_baudrate+0xb4>
    1dd2:	21 2f       	mov	r18, r17
    1dd4:	50 c0       	rjmp	.+160    	; 0x1e76 <usart_set_baudrate+0x178>
    1dd6:	21 2f       	mov	r18, r17
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1dd8:	11 23       	and	r17, r17
    1dda:	0c f0       	brlt	.+2      	; 0x1dde <usart_set_baudrate+0xe0>
    1ddc:	4c c0       	rjmp	.+152    	; 0x1e76 <usart_set_baudrate+0x178>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1dde:	d5 01       	movw	r26, r10
    1de0:	c4 01       	movw	r24, r8
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	aa 1f       	adc	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	aa 1f       	adc	r26, r26
    1df0:	bb 1f       	adc	r27, r27
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	aa 1f       	adc	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	48 1a       	sub	r4, r24
    1dfc:	59 0a       	sbc	r5, r25
    1dfe:	6a 0a       	sbc	r6, r26
    1e00:	7b 0a       	sbc	r7, r27
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right
		 * shift.)
		 */
		if (exp <= -3) {
    1e02:	1e 3f       	cpi	r17, 0xFE	; 254
    1e04:	f4 f4       	brge	.+60     	; 0x1e42 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1e06:	6d ef       	ldi	r22, 0xFD	; 253
    1e08:	7f ef       	ldi	r23, 0xFF	; 255
    1e0a:	61 1b       	sub	r22, r17
    1e0c:	71 09       	sbc	r23, r1
    1e0e:	17 fd       	sbrc	r17, 7
    1e10:	73 95       	inc	r23
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <usart_set_baudrate+0x11e>
    1e14:	44 0c       	add	r4, r4
    1e16:	55 1c       	adc	r5, r5
    1e18:	66 1c       	adc	r6, r6
    1e1a:	77 1c       	adc	r7, r7
    1e1c:	6a 95       	dec	r22
    1e1e:	d2 f7       	brpl	.-12     	; 0x1e14 <usart_set_baudrate+0x116>
    1e20:	d5 01       	movw	r26, r10
    1e22:	c4 01       	movw	r24, r8
    1e24:	b6 95       	lsr	r27
    1e26:	a7 95       	ror	r26
    1e28:	97 95       	ror	r25
    1e2a:	87 95       	ror	r24
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	64 0d       	add	r22, r4
    1e32:	75 1d       	adc	r23, r5
    1e34:	86 1d       	adc	r24, r6
    1e36:	97 1d       	adc	r25, r7
    1e38:	a5 01       	movw	r20, r10
    1e3a:	94 01       	movw	r18, r8
    1e3c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>
    1e40:	36 c0       	rjmp	.+108    	; 0x1eae <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1e42:	23 e0       	ldi	r18, 0x03	; 3
    1e44:	21 0f       	add	r18, r17
    1e46:	d5 01       	movw	r26, r10
    1e48:	c4 01       	movw	r24, r8
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <usart_set_baudrate+0x156>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	aa 1f       	adc	r26, r26
    1e52:	bb 1f       	adc	r27, r27
    1e54:	2a 95       	dec	r18
    1e56:	d2 f7       	brpl	.-12     	; 0x1e4c <usart_set_baudrate+0x14e>
    1e58:	9c 01       	movw	r18, r24
    1e5a:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1e5c:	b6 95       	lsr	r27
    1e5e:	a7 95       	ror	r26
    1e60:	97 95       	ror	r25
    1e62:	87 95       	ror	r24
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	64 0d       	add	r22, r4
    1e6a:	75 1d       	adc	r23, r5
    1e6c:	86 1d       	adc	r24, r6
    1e6e:	97 1d       	adc	r25, r7
    1e70:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>
    1e74:	1c c0       	rjmp	.+56     	; 0x1eae <usart_set_baudrate+0x1b0>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1e76:	2d 5f       	subi	r18, 0xFD	; 253
    1e78:	d5 01       	movw	r26, r10
    1e7a:	c4 01       	movw	r24, r8
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <usart_set_baudrate+0x188>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	aa 1f       	adc	r26, r26
    1e84:	bb 1f       	adc	r27, r27
    1e86:	2a 95       	dec	r18
    1e88:	d2 f7       	brpl	.-12     	; 0x1e7e <usart_set_baudrate+0x180>
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1e8e:	b6 95       	lsr	r27
    1e90:	a7 95       	ror	r26
    1e92:	97 95       	ror	r25
    1e94:	87 95       	ror	r24
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	64 0d       	add	r22, r4
    1e9c:	75 1d       	adc	r23, r5
    1e9e:	86 1d       	adc	r24, r6
    1ea0:	97 1d       	adc	r25, r7
    1ea2:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <__udivmodsi4>
    1ea6:	21 50       	subi	r18, 0x01	; 1
    1ea8:	31 09       	sbc	r19, r1
    1eaa:	41 09       	sbc	r20, r1
    1eac:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1eae:	83 2f       	mov	r24, r19
    1eb0:	8f 70       	andi	r24, 0x0F	; 15
    1eb2:	12 95       	swap	r17
    1eb4:	10 7f       	andi	r17, 0xF0	; 240
    1eb6:	18 2b       	or	r17, r24
    1eb8:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1eba:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	18 c0       	rjmp	.+48     	; 0x1ef0 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <usart_set_baudrate+0x1f2>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <usart_set_baudrate+0x1f2>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ec8:	d5 01       	movw	r26, r10
    1eca:	c4 01       	movw	r24, r8
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	aa 1f       	adc	r26, r26
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	48 1a       	sub	r4, r24
    1ee6:	59 0a       	sbc	r5, r25
    1ee8:	6a 0a       	sbc	r6, r26
    1eea:	7b 0a       	sbc	r7, r27
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1eec:	19 ef       	ldi	r17, 0xF9	; 249
    1eee:	8b cf       	rjmp	.-234    	; 0x1e06 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	7f 90       	pop	r7
    1f0a:	6f 90       	pop	r6
    1f0c:	5f 90       	pop	r5
    1f0e:	4f 90       	pop	r4
    1f10:	08 95       	ret

00001f12 <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    1f12:	63 e0       	ldi	r22, 0x03	; 3
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 0e 05 	call	0xa1c	; 0xa1c <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
    1f1c:	e0 e8       	ldi	r30, 0x80	; 128
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	80 fd       	sbrc	r24, 0
    1f24:	fd cf       	rjmp	.-6      	; 0x1f20 <wdt_reset_mcu+0xe>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
    1f26:	6b e2       	ldi	r22, 0x2B	; 43
    1f28:	81 e8       	ldi	r24, 0x81	; 129
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <ccp_write_io>
    1f30:	e0 e8       	ldi	r30, 0x80	; 128
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	80 fd       	sbrc	r24, 0
    1f38:	fd cf       	rjmp	.-6      	; 0x1f34 <wdt_reset_mcu+0x22>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
    1f3a:	a8 95       	wdr
    1f3c:	ff cf       	rjmp	.-2      	; 0x1f3c <wdt_reset_mcu+0x2a>

00001f3e <En_RC32M>:


//Motor_Param M0,M1,M2,M3;

void En_RC32M(void)
{
    1f3e:	e0 e5       	ldi	r30, 0x50	; 80
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	82 60       	ori	r24, 0x02	; 2
    1f46:	80 83       	st	Z, r24
    // Start RC32M OSC
    1f48:	e1 e5       	ldi	r30, 0x51	; 81
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	81 ff       	sbrs	r24, 1
    1f50:	fd cf       	rjmp	.-6      	; 0x1f4c <En_RC32M+0xe>
    OSC_CTRL |= OSC_RC32MEN_bm;
    while(!(OSC_STATUS & OSC_RC32MRDY_bm));

    1f52:	88 ed       	ldi	r24, 0xD8	; 216
    1f54:	84 bf       	out	0x34, r24	; 52
    // Select the system clock source: 32 MHz Internal RC Osc.
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 40 00 	sts	0x0040, r24
    CCP = CCP_IOREG_gc;
    CLK_CTRL = CLK_SCLKSEL_RC32M_gc;

    1f5c:	e0 e5       	ldi	r30, 0x50	; 80
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	82 7e       	andi	r24, 0xE2	; 226
    1f64:	80 83       	st	Z, r24
    1f66:	08 95       	ret

00001f68 <PORT_init>:
    // Disable the unused oscillators: 2 MHz, internal 32 kHz, external clock/crystal oscillator, PLL
    OSC_CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
};

void PORT_init(void)
{
    1f68:	80 e4       	ldi	r24, 0x40	; 64
    1f6a:	80 93 21 06 	sts	0x0621, r24
	
    1f6e:	87 e4       	ldi	r24, 0x47	; 71
    1f70:	80 93 41 06 	sts	0x0641, r24
	PORTB_DIRSET = KCK_Charge_PIN_bm;
    1f74:	10 92 53 06 	sts	0x0653, r1
	PORTC_DIRSET = KCK_Chip_PIN_bm | KCK_DIR_PIN_bm | Buzzer_PIN_bm | PIN2_bm ;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	80 93 49 06 	sts	0x0649, r24
	PORTC_PIN3CTRL=PORT_ISC_BOTHEDGES_gc;
    1f7e:	28 e0       	ldi	r18, 0x08	; 8
    1f80:	20 93 4a 06 	sts	0x064A, r18
	PORTC_INTCTRL = PORT_INT0LVL_LO_gc;
	PORTC_INT0MASK = PIN3_bm;
    1f84:	9e e2       	ldi	r25, 0x2E	; 46
    1f86:	90 93 61 06 	sts	0x0661, r25
	PORTD_DIRSET = Gyro_SCL_PIN_bm | LED_White_PIN_bm | LED_Red_PIN_bm | LED_Green_PIN_bm;  //SDA TWI tuye pin ctrl tanzimat mikhad?!
	
	//PORTD_PIN2CTRL = PORT_ISC_RISING_gc;  PORTD_PIN3CTRL= PORT_ISC_RISING_gc;  //KCK Sens1 , 2
	//PORTD_INTCTRL = PORT_INT0LVL_LO_gc;
	//PORTD_INT0MASK = KCK_Sens1_PIN_bm | KCK_Sens2_PIN_bm;
		
    1f8a:	9a eb       	ldi	r25, 0xBA	; 186
    1f8c:	90 93 81 06 	sts	0x0681, r25
	
    1f90:	e0 e9       	ldi	r30, 0x90	; 144
    1f92:	f6 e0       	ldi	r31, 0x06	; 6
    1f94:	90 81       	ld	r25, Z
    1f96:	92 60       	ori	r25, 0x02	; 2
    1f98:	90 83       	st	Z, r25
	PORTE_DIRSET = NRF24L01_L_CE_LINE | NRF24L01_L_CS_LINE | NRF24L01_L_MOSI_LINE | NRF24L01_L_SCK_LINE; // wireless module & programmer data
    1f9a:	e9 e8       	ldi	r30, 0x89	; 137
    1f9c:	f6 e0       	ldi	r31, 0x06	; 6
    1f9e:	90 81       	ld	r25, Z
    1fa0:	91 60       	ori	r25, 0x01	; 1
    1fa2:	90 83       	st	Z, r25
	PORTE_PIN0CTRL |= PORT_ISC_FALLING_gc;
    1fa4:	ea e8       	ldi	r30, 0x8A	; 138
    1fa6:	f6 e0       	ldi	r31, 0x06	; 6
    1fa8:	90 81       	ld	r25, Z
    1faa:	91 60       	ori	r25, 0x01	; 1
    1fac:	90 83       	st	Z, r25
	//PORTF_PIN2CTRL = PORT_ISC_RISING_gc;
	//PORTF_PIN3CTRL = PORT_ISC_BOTHEDGES_gc;
	//PORTF_PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
	//PORTF_PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
	//PORTF_PIN6CTRL = PORT_ISC_BOTHEDGES_gc;
	//PORTF_INTCTRL |= PORT_INT0LVL_LO_gc;
    1fae:	90 e1       	ldi	r25, 0x10	; 16
    1fb0:	90 93 aa 06 	sts	0x06AA, r25
	//PORTF_INT0MASK = Menu_Cancel_PIN_bm | Menu_PIN3_bm | Menu_PIN2_bm | Menu_PIN1_bm | Menu_PIN0_bm;
	PORTF_INT0MASK = Menu_Cancel_PIN_bm;
    1fb4:	98 e8       	ldi	r25, 0x88	; 136
    1fb6:	90 93 a1 06 	sts	0x06A1, r25
   
    1fba:	90 93 a5 06 	sts	0x06A5, r25
   PORTF_DIRSET = PIN3_bm;
   PORTF_OUTSET = PIN3_bm;
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	90 93 20 07 	sts	0x0720, r25
   
    1fc4:	90 93 00 07 	sts	0x0700, r25
   PORTK_DIR = 0xFF;//SegR
   PORTJ_DIR = 0xFF;//SegL
   
   //PORTK_PIN0CTRL = PORT_ISC_RISING_gc;
   //PORTK_INTCTRL = PORT_INT0LVL_LO_gc;
   //PORTK_INT0MASK = Menu_Set_PIN_bm;
    1fc8:	10 92 d0 07 	sts	0x07D0, r1
   
    1fcc:	10 92 d3 07 	sts	0x07D3, r1
   PORTQ_PIN0CTRL = PORT_ISC_BOTHEDGES_gc;
    1fd0:	95 e0       	ldi	r25, 0x05	; 5
    1fd2:	90 93 c9 07 	sts	0x07C9, r25
   PORTQ_PIN3CTRL = PORT_ISC_BOTHEDGES_gc;
    1fd6:	80 93 ca 07 	sts	0x07CA, r24
   PORTQ_INTCTRL  = PORT_INT0LVL_LO_gc|PORT_INT1LVL_LO_gc;
    1fda:	20 93 cb 07 	sts	0x07CB, r18
   PORTQ_INT0MASK = PIN0_bm;
   PORTQ_INT1MASK = PIN3_bm;
    1fde:	10 92 f5 06 	sts	0x06F5, r1
   
    1fe2:	80 93 f7 06 	sts	0x06F7, r24
  PORTH_PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
    1fe6:	90 93 e9 06 	sts	0x06E9, r25
  PORTH_PIN7CTRL = PORT_ISC_RISING_gc;
    1fea:	80 e2       	ldi	r24, 0x20	; 32
    1fec:	80 93 ea 06 	sts	0x06EA, r24
  PORTH_INTCTRL  = PORT_INT0LVL_LO_gc|PORT_INT1LVL_LO_gc;
    1ff0:	8f e8       	ldi	r24, 0x8F	; 143
    1ff2:	80 93 eb 06 	sts	0x06EB, r24
    1ff6:	08 95       	ret

00001ff8 <TimerC0_init>:
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1ff8:	e0 e0       	ldi	r30, 0x00	; 0
    1ffa:	f8 e0       	ldi	r31, 0x08	; 8
    1ffc:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1ffe:	80 7f       	andi	r24, 0xF0	; 240
    2000:	86 60       	ori	r24, 0x06	; 6
    2002:	80 83       	st	Z, r24
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2004:	81 81       	ldd	r24, Z+1	; 0x01
    2006:	88 7f       	andi	r24, 0xF8	; 248
    2008:	83 60       	ori	r24, 0x03	; 3
    200a:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    200c:	8f ef       	ldi	r24, 0xFF	; 255
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	86 a3       	std	Z+38, r24	; 0x26
    2012:	97 a3       	std	Z+39, r25	; 0x27
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
	if (dir == TC_UP) {
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
    2014:	80 85       	ldd	r24, Z+8	; 0x08
    2016:	8e 6f       	ori	r24, 0xFE	; 254
    2018:	80 87       	std	Z+8, r24	; 0x08
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
    201a:	81 81       	ldd	r24, Z+1	; 0x01
    201c:	80 61       	ori	r24, 0x10	; 16
    201e:	81 83       	std	Z+1, r24	; 0x01
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	80 62       	ori	r24, 0x20	; 32
    2024:	81 83       	std	Z+1, r24	; 0x01
{
	tc_write_clock_source(&TCC0,TC_CLKSEL_DIV256_gc);
	tc_set_wgm(&TCC0,TC_WG_SS);
	tc_write_period(&TCC0,0x00FF);
	tc_set_direction(&TCC0,TC_UP);
	tc_enable_cc_channels(&TCC0,TC_CCAEN);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	98 e0       	ldi	r25, 0x08	; 8
    202a:	d8 cd       	rjmp	.-1104   	; 0x1bdc <tc_enable>
    202c:	08 95       	ret

0000202e <TimerD0_init>:
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    202e:	e0 e0       	ldi	r30, 0x00	; 0
    2030:	f9 e0       	ldi	r31, 0x09	; 9
    2032:	80 81       	ld	r24, Z
 * \note Configuring the clock starts alos the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2034:	80 7f       	andi	r24, 0xF0	; 240
    2036:	86 60       	ori	r24, 0x06	; 6
    2038:	80 83       	st	Z, r24
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	88 7f       	andi	r24, 0xF8	; 248
    203e:	81 83       	std	Z+1, r24	; 0x01
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    2040:	86 81       	ldd	r24, Z+6	; 0x06
    2042:	8c 7f       	andi	r24, 0xFC	; 252
    2044:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2046:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    2048:	82 60       	ori	r24, 0x02	; 2
    204a:	86 83       	std	Z+6, r24	; 0x06
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    204c:	8d e7       	ldi	r24, 0x7D	; 125
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	86 a3       	std	Z+38, r24	; 0x26
    2052:	97 a3       	std	Z+39, r25	; 0x27
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
	if (dir == TC_UP) {
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
    2054:	80 85       	ldd	r24, Z+8	; 0x08
    2056:	8e 6f       	ori	r24, 0xFE	; 254
    2058:	80 87       	std	Z+8, r24	; 0x08
void TimerD0_init(void)
{
	tc_write_clock_source(&TCD0,TC_CLKSEL_DIV256_gc);
	tc_set_wgm(&TCD0,TC_WG_NORMAL);
	tc_set_overflow_interrupt_level(&TCD0,TC_INT_LVL_MED);
	tc_write_period(&TCD0,TIMERD0_PER);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	99 e0       	ldi	r25, 0x09	; 9
    205e:	be cd       	rjmp	.-1156   	; 0x1bdc <tc_enable>
    2060:	08 95       	ret

00002062 <SPI_Init>:
	tc_set_direction(&TCD0,TC_UP);
	tc_enable(&TCD0);
};

    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
void SPI_Init(void)
    2066:	00 e0       	ldi	r16, 0x00	; 0
    2068:	18 e4       	ldi	r17, 0x48	; 72
    206a:	28 ee       	ldi	r18, 0xE8	; 232
    206c:	31 e0       	ldi	r19, 0x01	; 1
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	52 e1       	ldi	r21, 0x12	; 18
    2072:	6a e7       	ldi	r22, 0x7A	; 122
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	80 ec       	ldi	r24, 0xC0	; 192
    2078:	9a e0       	ldi	r25, 0x0A	; 10
    207a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <spi_xmega_set_baud_div>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    207e:	e0 ec       	ldi	r30, 0xC0	; 192
    2080:	fa e0       	ldi	r31, 0x0A	; 10
    2082:	80 81       	ld	r24, Z
    2084:	80 61       	ori	r24, 0x10	; 16
    2086:	80 83       	st	Z, r24
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    2088:	80 81       	ld	r24, Z
    208a:	80 64       	ori	r24, 0x40	; 64
    208c:	80 83       	st	Z, r24
{
	 spi_xmega_set_baud_div(&NRF24L01_L_SPI,8000000UL,F_CPU);
	 spi_enable_master_mode(&NRF24L01_L_SPI);
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <USARTE0_init>:
	 spi_enable(&NRF24L01_L_SPI);
}



    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    209c:	c0 ea       	ldi	r28, 0xA0	; 160
    209e:	da e0       	ldi	r29, 0x0A	; 10
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	8f 73       	andi	r24, 0x3F	; 63
    20a4:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	8d 83       	std	Y+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	8f 7c       	andi	r24, 0xCF	; 207
    20ae:	80 62       	ori	r24, 0x20	; 32
    20b0:	8b 83       	std	Y+3, r24	; 0x03
#define USARTF0_conf USARTF0
#define USARTF0_BUADRATE 9600
void USARTF0_init(void)
{
	usart_set_mode(&USARTF0_conf,USART_CMODE_ASYNCHRONOUS_gc);
    20b2:	00 e0       	ldi	r16, 0x00	; 0
    20b4:	18 e4       	ldi	r17, 0x48	; 72
    20b6:	28 ee       	ldi	r18, 0xE8	; 232
    20b8:	31 e0       	ldi	r19, 0x01	; 1
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	55 e2       	ldi	r21, 0x25	; 37
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	80 ea       	ldi	r24, 0xA0	; 160
    20c4:	9a e0       	ldi	r25, 0x0A	; 10
    20c6:	1b de       	rcall	.-970    	; 0x1cfe <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	88 60       	ori	r24, 0x08	; 8
    20cc:	8c 83       	std	Y+4, r24	; 0x04
	usart_format_set(&USARTF0_conf,USART_CHSIZE_8BIT_gc,USART_PMODE_DISABLED_gc,false);
	usart_set_rx_interrupt_level(&USARTF0_conf,USART_INT_LVL_MED);
	//usart_set_dre_interrupt_level(&USARTF0_conf,USART_INT_LVL_LO);
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <USARTF0_init>:
	usart_set_baudrate(&USARTF0_conf,USARTF0_BUADRATE,F_CPU);
	usart_tx_enable(&USARTF0_conf);
	usart_rx_enable(&USARTF0_conf);
}

    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    20e0:	c0 ea       	ldi	r28, 0xA0	; 160
    20e2:	db e0       	ldi	r29, 0x0B	; 11
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	8f 73       	andi	r24, 0x3F	; 63
    20e8:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	8d 83       	std	Y+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	8f 7c       	andi	r24, 0xCF	; 207
    20f2:	80 62       	ori	r24, 0x20	; 32
    20f4:	8b 83       	std	Y+3, r24	; 0x03
#define USARTF1_conf USARTF1
#define USARTF1_BUADRATE 9600
void USARTF1_init(void)
{
	usart_set_mode(&USARTF1_conf,USART_CMODE_ASYNCHRONOUS_gc);
    20f6:	00 e0       	ldi	r16, 0x00	; 0
    20f8:	18 e4       	ldi	r17, 0x48	; 72
    20fa:	28 ee       	ldi	r18, 0xE8	; 232
    20fc:	31 e0       	ldi	r19, 0x01	; 1
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	55 e2       	ldi	r21, 0x25	; 37
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	80 ea       	ldi	r24, 0xA0	; 160
    2108:	9b e0       	ldi	r25, 0x0B	; 11
    210a:	f9 dd       	rcall	.-1038   	; 0x1cfe <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	88 60       	ori	r24, 0x08	; 8
    2110:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	80 61       	ori	r24, 0x10	; 16
    2116:	8c 83       	std	Y+4, r24	; 0x04
	usart_format_set(&USARTF1_conf,USART_CHSIZE_8BIT_gc,USART_PMODE_DISABLED_gc,false);
	//usart_set_rx_interrupt_level(&USARTF1_conf,USART_INT_LVL_MED);
	//usart_set_dre_interrupt_level(&USARTF1_conf,USART_INT_LVL_LO);
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	08 95       	ret

00002122 <USARTF1_init>:
	usart_set_baudrate(&USARTF1_conf,USARTF1_BUADRATE,F_CPU);
	usart_tx_enable(&USARTF1_conf);
	//usart_rx_enable(&USARTF1_conf);
}

//KCK_CAP_VFB   -----> B7
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    212a:	c0 eb       	ldi	r28, 0xB0	; 176
    212c:	db e0       	ldi	r29, 0x0B	; 11
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	8f 73       	andi	r24, 0x3F	; 63
    2132:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	8d 83       	std	Y+5, r24	; 0x05
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	8f 7c       	andi	r24, 0xCF	; 207
    213c:	80 62       	ori	r24, 0x20	; 32
    213e:	8b 83       	std	Y+3, r24	; 0x03
#define CONFIG_ADC_INTLVL ADC_CH_INTLVL_LO_gc
void ADCA_init(void)
{
    struct adc_config adca_conf;
    struct adc_channel_config adca_ch_conf;
    2140:	00 e0       	ldi	r16, 0x00	; 0
    2142:	18 e4       	ldi	r17, 0x48	; 72
    2144:	28 ee       	ldi	r18, 0xE8	; 232
    2146:	31 e0       	ldi	r19, 0x01	; 1
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	55 e2       	ldi	r21, 0x25	; 37
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	80 eb       	ldi	r24, 0xB0	; 176
    2152:	9b e0       	ldi	r25, 0x0B	; 11
    2154:	d4 dd       	rcall	.-1112   	; 0x1cfe <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	88 60       	ori	r24, 0x08	; 8
    215a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	80 61       	ori	r24, 0x10	; 16
    2160:	8c 83       	std	Y+4, r24	; 0x04
    //
    //// Initialize configuration structures.
    //adc_read_configuration(&ADCB, &adcb_conf);
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret

0000216c <ADCA_init>:
    //
    ///* Configure the ADC module:
    //* - unsigned, 12-bit results
    //* - AREFA voltage reference
    //* - 8000 kHz clock rate
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	2a 97       	sbiw	r28, 0x0a	; 10
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	de bf       	out	0x3e, r29	; 62
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    217a:	61 e2       	ldi	r22, 0x21	; 33
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	0e 94 14 05 	call	0xa28	; 0xa28 <nvm_read_byte>
    2184:	60 e2       	ldi	r22, 0x20	; 32
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	0e 94 14 05 	call	0xa28	; 0xa28 <nvm_read_byte>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	// Preserve all but conversion and resolution config.
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	9f 7c       	andi	r25, 0xCF	; 207
	conf->refctrl |= ref;
    2196:	90 62       	ori	r25, 0x20	; 32
    2198:	9b 83       	std	Y+3, r25	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    219a:	92 e0       	ldi	r25, 0x02	; 2
    219c:	9d 83       	std	Y+5, r25	; 0x05
				(nr_of_ch << ADC_EVACT_gp);
		break;

#if XMEGA_A || XMEGA_AU
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    219e:	88 60       	ori	r24, 0x08	; 8
    21a0:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    21a2:	1c 82       	std	Y+4, r1	; 0x04
    //*/
    adcch_read_configuration(&ADCA,1, &adca_ch_conf);
    adcch_set_input(&adca_ch_conf,ADCCH_POS_PIN3,ADCCH_NEG_NONE,ADC_CH_GAIN_1X_gc);
    adcch_write_configuration(&ADCA,1,&adca_ch_conf);
    
    ///* Configure ADC channel 1: darim az channel 0 estefade mikonim ehtemalan!
    21a4:	be 01       	movw	r22, r28
    21a6:	6f 5f       	subi	r22, 0xFF	; 255
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <adc_write_configuration>
    //* - Input: ADCB5
    //* - Set Interrupt Mode: Below the threshold
    //* - interrupts disable
    ////*/
    //adcch_read_configuration(&ADCA,1, &adca_ch_conf);
    //adcch_set_input(&adcb_ch_conf,ADCCH_POS_PIN5,ADCCH_NEG_NONE,ADC_CH_GAIN_1X_gc);
    21b2:	ae 01       	movw	r20, r28
    21b4:	48 5f       	subi	r20, 0xF8	; 248
    21b6:	5f 4f       	sbci	r21, 0xFF	; 255
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	92 e0       	ldi	r25, 0x02	; 2
    21be:	0e 94 dd 04 	call	0x9ba	; 0x9ba <adcch_read_configuration>

	// Configure for single-ended measurement.
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    21c6:	88 e1       	ldi	r24, 0x18	; 24
    21c8:	89 87       	std	Y+9, r24	; 0x09
	////adcch_set_interrupt_mode(&adcb_ch_conf,ADCCH_MODE_ABOVE);
	////adcch_enable_interrupt(&adcb_ch_conf);
    21ca:	ae 01       	movw	r20, r28
    21cc:	48 5f       	subi	r20, 0xF8	; 248
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	92 e0       	ldi	r25, 0x02	; 2
    21d6:	0e 94 ad 04 	call	0x95a	; 0x95a <adcch_write_configuration>
}

void OUT_Bling(PORT_t *OUT_PORT,uint8_t OUT_PIN_bp,uint8_t Speed,uint32_t *Time_ON,uint32_t time_ms)
{
	if((*Time_ON) >0)
	(*Time_ON)--;
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	0e 94 45 04 	call	0x88a	; 0x88a <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    21e2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    21e4:	f8 94       	cli
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    21e6:	e0 e0       	ldi	r30, 0x00	; 0
    21e8:	f2 e0       	ldi	r31, 0x02	; 2
    21ea:	90 81       	ld	r25, Z
    21ec:	94 60       	ori	r25, 0x04	; 4
    21ee:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    21f0:	8f bf       	out	0x3f, r24	; 63
	if((Speed) != 0 && (*Time_ON) > 1)
	OUT_PORT->OUT = (OUT_PORT->OUT & ~(1<<OUT_PIN_bp)) | (((time_ms / (Speed)) & 0x00001) << OUT_PIN_bp);
	//if((Speed) == 0 && (*Time_ON) >  1)		///////Set OUT
	//OUT_PORT->OUTSET = 1<<OUT_PIN_bp;
	if((*Time_ON) == 1)						///////Clr OUT
    21f2:	2a 96       	adiw	r28, 0x0a	; 10
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	08 95       	ret

000021fe <__vector_43>:
	};

}

void get_MS(char rx)
{
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	0f 92       	push	r0
    2206:	11 24       	eor	r1, r1
    2208:	08 b6       	in	r0, 0x38	; 56
    220a:	0f 92       	push	r0
    220c:	18 be       	out	0x38, r1	; 56
    220e:	09 b6       	in	r0, 0x39	; 57
    2210:	0f 92       	push	r0
    2212:	19 be       	out	0x39, r1	; 57
    2214:	0a b6       	in	r0, 0x3a	; 58
    2216:	0f 92       	push	r0
    2218:	1a be       	out	0x3a, r1	; 58
    221a:	0b b6       	in	r0, 0x3b	; 59
    221c:	0f 92       	push	r0
    221e:	1b be       	out	0x3b, r1	; 59
    2220:	2f 92       	push	r2
    2222:	3f 92       	push	r3
    2224:	4f 92       	push	r4
    2226:	5f 92       	push	r5
    2228:	6f 92       	push	r6
    222a:	7f 92       	push	r7
    222c:	8f 92       	push	r8
    222e:	9f 92       	push	r9
    2230:	af 92       	push	r10
    2232:	bf 92       	push	r11
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	2f 93       	push	r18
    2240:	3f 93       	push	r19
    2242:	4f 93       	push	r20
    2244:	5f 93       	push	r21
    2246:	6f 93       	push	r22
    2248:	7f 93       	push	r23
    224a:	8f 93       	push	r24
    224c:	9f 93       	push	r25
    224e:	af 93       	push	r26
    2250:	bf 93       	push	r27
    2252:	ef 93       	push	r30
    2254:	ff 93       	push	r31
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	c2 55       	subi	r28, 0x52	; 82
    2260:	d1 09       	sbc	r29, r1
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	60 e7       	ldi	r22, 0x70	; 112
    2268:	87 e2       	ldi	r24, 0x27	; 39
    226a:	0e 94 b5 24 	call	0x496a	; 0x496a <NRF24L01_L_WriteReg>
    226e:	d8 2e       	mov	r13, r24
    2270:	86 ff       	sbrs	r24, 6
    2272:	dd c3       	rjmp	.+1978   	; 0x2a2e <__vector_43+0x830>
    2274:	88 e0       	ldi	r24, 0x08	; 8
    2276:	e0 e6       	ldi	r30, 0x60	; 96
    2278:	f6 e0       	ldi	r31, 0x06	; 6
    227a:	87 83       	std	Z+7, r24	; 0x07
    227c:	60 e2       	ldi	r22, 0x20	; 32
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	86 e7       	ldi	r24, 0x76	; 118
    2282:	93 e2       	ldi	r25, 0x23	; 35
    2284:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <NRF24L01_L_Read_RX_Buf>
    2288:	40 91 76 23 	lds	r20, 0x2376
    228c:	e8 e0       	ldi	r30, 0x08	; 8
    228e:	f6 e0       	ldi	r31, 0x06	; 6
    2290:	70 81       	ld	r23, Z
    2292:	60 81       	ld	r22, Z
    2294:	20 81       	ld	r18, Z
    2296:	50 81       	ld	r21, Z
    2298:	84 2f       	mov	r24, r20
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	22 1f       	adc	r18, r18
    229e:	22 27       	eor	r18, r18
    22a0:	22 1f       	adc	r18, r18
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	22 0f       	add	r18, r18
    22aa:	33 1f       	adc	r19, r19
    22ac:	76 fb       	bst	r23, 6
    22ae:	ee 24       	eor	r14, r14
    22b0:	e0 f8       	bld	r14, 0
    22b2:	f1 2c       	mov	r15, r1
    22b4:	e2 2a       	or	r14, r18
    22b6:	f3 2a       	or	r15, r19
    22b8:	64 fb       	bst	r22, 4
    22ba:	00 27       	eor	r16, r16
    22bc:	00 f9       	bld	r16, 0
    22be:	10 e0       	ldi	r17, 0x00	; 0
    22c0:	00 0f       	add	r16, r16
    22c2:	11 1f       	adc	r17, r17
    22c4:	e0 2a       	or	r14, r16
    22c6:	f1 2a       	or	r15, r17
    22c8:	55 fb       	bst	r21, 5
    22ca:	55 27       	eor	r21, r21
    22cc:	50 f9       	bld	r21, 0
    22ce:	62 96       	adiw	r28, 0x12	; 18
    22d0:	5f af       	std	Y+63, r21	; 0x3f
    22d2:	62 97       	sbiw	r28, 0x12	; 18
    22d4:	63 96       	adiw	r28, 0x13	; 19
    22d6:	1f ae       	std	Y+63, r1	; 0x3f
    22d8:	63 97       	sbiw	r28, 0x13	; 19
    22da:	63 96       	adiw	r28, 0x13	; 19
    22dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    22de:	3f ad       	ldd	r19, Y+63	; 0x3f
    22e0:	63 97       	sbiw	r28, 0x13	; 19
    22e2:	22 0f       	add	r18, r18
    22e4:	33 1f       	adc	r19, r19
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	22 0f       	add	r18, r18
    22ec:	33 1f       	adc	r19, r19
    22ee:	2e 29       	or	r18, r14
    22f0:	3f 29       	or	r19, r15
    22f2:	82 17       	cp	r24, r18
    22f4:	93 07       	cpc	r25, r19
    22f6:	09 f0       	breq	.+2      	; 0x22fa <__vector_43+0xfc>
    22f8:	9a c3       	rjmp	.+1844   	; 0x2a2e <__vector_43+0x830>
    22fa:	10 92 c1 20 	sts	0x20C1, r1
    22fe:	10 92 c2 20 	sts	0x20C2, r1
    2302:	50 81       	ld	r21, Z
    2304:	30 81       	ld	r19, Z
    2306:	80 81       	ld	r24, Z
    2308:	20 81       	ld	r18, Z
    230a:	88 1f       	adc	r24, r24
    230c:	88 27       	eor	r24, r24
    230e:	88 1f       	adc	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	56 fb       	bst	r21, 6
    231c:	aa 24       	eor	r10, r10
    231e:	a0 f8       	bld	r10, 0
    2320:	b1 2c       	mov	r11, r1
    2322:	a8 2a       	or	r10, r24
    2324:	b9 2a       	or	r11, r25
    2326:	32 95       	swap	r19
    2328:	31 70       	andi	r19, 0x01	; 1
    232a:	39 83       	std	Y+1, r19	; 0x01
    232c:	1a 82       	std	Y+2, r1	; 0x02
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	a8 2a       	or	r10, r24
    2338:	b9 2a       	or	r11, r25
    233a:	25 fb       	bst	r18, 5
    233c:	88 24       	eor	r8, r8
    233e:	80 f8       	bld	r8, 0
    2340:	91 2c       	mov	r9, r1
    2342:	c4 01       	movw	r24, r8
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	45 01       	movw	r8, r10
    2352:	88 2a       	or	r8, r24
    2354:	99 2a       	or	r9, r25
    2356:	57 e1       	ldi	r21, 0x17	; 23
    2358:	58 9d       	mul	r21, r8
    235a:	d0 01       	movw	r26, r0
    235c:	59 9d       	mul	r21, r9
    235e:	b0 0d       	add	r27, r0
    2360:	11 24       	eor	r1, r1
    2362:	a2 53       	subi	r26, 0x32	; 50
    2364:	bf 4d       	sbci	r27, 0xDF	; 223
    2366:	4c 93       	st	X, r20
    2368:	40 81       	ld	r20, Z
    236a:	30 81       	ld	r19, Z
    236c:	80 81       	ld	r24, Z
    236e:	20 81       	ld	r18, Z
    2370:	88 1f       	adc	r24, r24
    2372:	88 27       	eor	r24, r24
    2374:	88 1f       	adc	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	46 fb       	bst	r20, 6
    2382:	66 24       	eor	r6, r6
    2384:	60 f8       	bld	r6, 0
    2386:	71 2c       	mov	r7, r1
    2388:	68 2a       	or	r6, r24
    238a:	79 2a       	or	r7, r25
    238c:	34 fb       	bst	r19, 4
    238e:	44 24       	eor	r4, r4
    2390:	40 f8       	bld	r4, 0
    2392:	51 2c       	mov	r5, r1
    2394:	44 0c       	add	r4, r4
    2396:	55 1c       	adc	r5, r5
    2398:	64 28       	or	r6, r4
    239a:	75 28       	or	r7, r5
    239c:	25 fb       	bst	r18, 5
    239e:	22 24       	eor	r2, r2
    23a0:	20 f8       	bld	r2, 0
    23a2:	31 2c       	mov	r3, r1
    23a4:	c1 01       	movw	r24, r2
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	13 01       	movw	r2, r6
    23b4:	28 2a       	or	r2, r24
    23b6:	39 2a       	or	r3, r25
    23b8:	52 9d       	mul	r21, r2
    23ba:	d0 01       	movw	r26, r0
    23bc:	53 9d       	mul	r21, r3
    23be:	b0 0d       	add	r27, r0
    23c0:	11 24       	eor	r1, r1
    23c2:	a2 53       	subi	r26, 0x32	; 50
    23c4:	bf 4d       	sbci	r27, 0xDF	; 223
    23c6:	80 91 77 23 	lds	r24, 0x2377
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	8d 93       	st	X+, r24
    23d0:	9c 93       	st	X, r25
    23d2:	12 97       	sbiw	r26, 0x02	; 2
    23d4:	30 81       	ld	r19, Z
    23d6:	20 81       	ld	r18, Z
    23d8:	80 81       	ld	r24, Z
    23da:	40 81       	ld	r20, Z
    23dc:	88 1f       	adc	r24, r24
    23de:	88 27       	eor	r24, r24
    23e0:	88 1f       	adc	r24, r24
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	36 fb       	bst	r19, 6
    23ee:	33 27       	eor	r19, r19
    23f0:	30 f9       	bld	r19, 0
    23f2:	3b 83       	std	Y+3, r19	; 0x03
    23f4:	1c 82       	std	Y+4, r1	; 0x04
    23f6:	6b 81       	ldd	r22, Y+3	; 0x03
    23f8:	7c 81       	ldd	r23, Y+4	; 0x04
    23fa:	86 2b       	or	r24, r22
    23fc:	97 2b       	or	r25, r23
    23fe:	22 95       	swap	r18
    2400:	21 70       	andi	r18, 0x01	; 1
    2402:	2d 83       	std	Y+5, r18	; 0x05
    2404:	1e 82       	std	Y+6, r1	; 0x06
    2406:	2d 81       	ldd	r18, Y+5	; 0x05
    2408:	3e 81       	ldd	r19, Y+6	; 0x06
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	82 2b       	or	r24, r18
    2410:	93 2b       	or	r25, r19
    2412:	45 fb       	bst	r20, 5
    2414:	44 27       	eor	r20, r20
    2416:	40 f9       	bld	r20, 0
    2418:	4f 83       	std	Y+7, r20	; 0x07
    241a:	18 86       	std	Y+8, r1	; 0x08
    241c:	2f 81       	ldd	r18, Y+7	; 0x07
    241e:	38 85       	ldd	r19, Y+8	; 0x08
    2420:	22 0f       	add	r18, r18
    2422:	33 1f       	adc	r19, r19
    2424:	22 0f       	add	r18, r18
    2426:	33 1f       	adc	r19, r19
    2428:	22 0f       	add	r18, r18
    242a:	33 1f       	adc	r19, r19
    242c:	82 2b       	or	r24, r18
    242e:	93 2b       	or	r25, r19
    2430:	58 9f       	mul	r21, r24
    2432:	d0 01       	movw	r26, r0
    2434:	59 9f       	mul	r21, r25
    2436:	b0 0d       	add	r27, r0
    2438:	11 24       	eor	r1, r1
    243a:	a2 53       	subi	r26, 0x32	; 50
    243c:	bf 4d       	sbci	r27, 0xDF	; 223
    243e:	80 91 78 23 	lds	r24, 0x2378
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	13 96       	adiw	r26, 0x03	; 3
    2446:	8d 93       	st	X+, r24
    2448:	9c 93       	st	X, r25
    244a:	14 97       	sbiw	r26, 0x04	; 4
    244c:	30 81       	ld	r19, Z
    244e:	20 81       	ld	r18, Z
    2450:	80 81       	ld	r24, Z
    2452:	40 81       	ld	r20, Z
    2454:	88 1f       	adc	r24, r24
    2456:	88 27       	eor	r24, r24
    2458:	88 1f       	adc	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	36 fb       	bst	r19, 6
    2466:	33 27       	eor	r19, r19
    2468:	30 f9       	bld	r19, 0
    246a:	39 87       	std	Y+9, r19	; 0x09
    246c:	1a 86       	std	Y+10, r1	; 0x0a
    246e:	a9 85       	ldd	r26, Y+9	; 0x09
    2470:	ba 85       	ldd	r27, Y+10	; 0x0a
    2472:	8a 2b       	or	r24, r26
    2474:	9b 2b       	or	r25, r27
    2476:	22 95       	swap	r18
    2478:	21 70       	andi	r18, 0x01	; 1
    247a:	2b 87       	std	Y+11, r18	; 0x0b
    247c:	1c 86       	std	Y+12, r1	; 0x0c
    247e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2480:	3c 85       	ldd	r19, Y+12	; 0x0c
    2482:	22 0f       	add	r18, r18
    2484:	33 1f       	adc	r19, r19
    2486:	82 2b       	or	r24, r18
    2488:	93 2b       	or	r25, r19
    248a:	45 fb       	bst	r20, 5
    248c:	44 27       	eor	r20, r20
    248e:	40 f9       	bld	r20, 0
    2490:	4d 87       	std	Y+13, r20	; 0x0d
    2492:	1e 86       	std	Y+14, r1	; 0x0e
    2494:	2d 85       	ldd	r18, Y+13	; 0x0d
    2496:	3e 85       	ldd	r19, Y+14	; 0x0e
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	82 2b       	or	r24, r18
    24a6:	93 2b       	or	r25, r19
    24a8:	58 9f       	mul	r21, r24
    24aa:	d0 01       	movw	r26, r0
    24ac:	59 9f       	mul	r21, r25
    24ae:	b0 0d       	add	r27, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	a2 53       	subi	r26, 0x32	; 50
    24b4:	bf 4d       	sbci	r27, 0xDF	; 223
    24b6:	80 91 79 23 	lds	r24, 0x2379
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	15 96       	adiw	r26, 0x05	; 5
    24be:	8d 93       	st	X+, r24
    24c0:	9c 93       	st	X, r25
    24c2:	16 97       	sbiw	r26, 0x06	; 6
    24c4:	30 81       	ld	r19, Z
    24c6:	20 81       	ld	r18, Z
    24c8:	80 81       	ld	r24, Z
    24ca:	40 81       	ld	r20, Z
    24cc:	88 1f       	adc	r24, r24
    24ce:	88 27       	eor	r24, r24
    24d0:	88 1f       	adc	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	36 fb       	bst	r19, 6
    24de:	33 27       	eor	r19, r19
    24e0:	30 f9       	bld	r19, 0
    24e2:	3f 87       	std	Y+15, r19	; 0x0f
    24e4:	18 8a       	std	Y+16, r1	; 0x10
    24e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    24e8:	78 89       	ldd	r23, Y+16	; 0x10
    24ea:	86 2b       	or	r24, r22
    24ec:	97 2b       	or	r25, r23
    24ee:	22 95       	swap	r18
    24f0:	21 70       	andi	r18, 0x01	; 1
    24f2:	29 8b       	std	Y+17, r18	; 0x11
    24f4:	1a 8a       	std	Y+18, r1	; 0x12
    24f6:	29 89       	ldd	r18, Y+17	; 0x11
    24f8:	3a 89       	ldd	r19, Y+18	; 0x12
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	82 2b       	or	r24, r18
    2500:	93 2b       	or	r25, r19
    2502:	45 fb       	bst	r20, 5
    2504:	44 27       	eor	r20, r20
    2506:	40 f9       	bld	r20, 0
    2508:	4b 8b       	std	Y+19, r20	; 0x13
    250a:	1c 8a       	std	Y+20, r1	; 0x14
    250c:	2b 89       	ldd	r18, Y+19	; 0x13
    250e:	3c 89       	ldd	r19, Y+20	; 0x14
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	22 0f       	add	r18, r18
    2516:	33 1f       	adc	r19, r19
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	82 2b       	or	r24, r18
    251e:	93 2b       	or	r25, r19
    2520:	58 9f       	mul	r21, r24
    2522:	d0 01       	movw	r26, r0
    2524:	59 9f       	mul	r21, r25
    2526:	b0 0d       	add	r27, r0
    2528:	11 24       	eor	r1, r1
    252a:	a2 53       	subi	r26, 0x32	; 50
    252c:	bf 4d       	sbci	r27, 0xDF	; 223
    252e:	80 91 7a 23 	lds	r24, 0x237A
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	17 96       	adiw	r26, 0x07	; 7
    2536:	8d 93       	st	X+, r24
    2538:	9c 93       	st	X, r25
    253a:	18 97       	sbiw	r26, 0x08	; 8
    253c:	30 81       	ld	r19, Z
    253e:	20 81       	ld	r18, Z
    2540:	80 81       	ld	r24, Z
    2542:	40 81       	ld	r20, Z
    2544:	88 1f       	adc	r24, r24
    2546:	88 27       	eor	r24, r24
    2548:	88 1f       	adc	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	36 fb       	bst	r19, 6
    2556:	33 27       	eor	r19, r19
    2558:	30 f9       	bld	r19, 0
    255a:	3d 8b       	std	Y+21, r19	; 0x15
    255c:	1e 8a       	std	Y+22, r1	; 0x16
    255e:	ad 89       	ldd	r26, Y+21	; 0x15
    2560:	be 89       	ldd	r27, Y+22	; 0x16
    2562:	8a 2b       	or	r24, r26
    2564:	9b 2b       	or	r25, r27
    2566:	22 95       	swap	r18
    2568:	21 70       	andi	r18, 0x01	; 1
    256a:	2f 8b       	std	Y+23, r18	; 0x17
    256c:	18 8e       	std	Y+24, r1	; 0x18
    256e:	2f 89       	ldd	r18, Y+23	; 0x17
    2570:	38 8d       	ldd	r19, Y+24	; 0x18
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	82 2b       	or	r24, r18
    2578:	93 2b       	or	r25, r19
    257a:	45 fb       	bst	r20, 5
    257c:	44 27       	eor	r20, r20
    257e:	40 f9       	bld	r20, 0
    2580:	49 8f       	std	Y+25, r20	; 0x19
    2582:	1a 8e       	std	Y+26, r1	; 0x1a
    2584:	29 8d       	ldd	r18, Y+25	; 0x19
    2586:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2588:	22 0f       	add	r18, r18
    258a:	33 1f       	adc	r19, r19
    258c:	22 0f       	add	r18, r18
    258e:	33 1f       	adc	r19, r19
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	82 2b       	or	r24, r18
    2596:	93 2b       	or	r25, r19
    2598:	58 9f       	mul	r21, r24
    259a:	d0 01       	movw	r26, r0
    259c:	59 9f       	mul	r21, r25
    259e:	b0 0d       	add	r27, r0
    25a0:	11 24       	eor	r1, r1
    25a2:	a2 53       	subi	r26, 0x32	; 50
    25a4:	bf 4d       	sbci	r27, 0xDF	; 223
    25a6:	80 91 7b 23 	lds	r24, 0x237B
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	19 96       	adiw	r26, 0x09	; 9
    25ae:	8d 93       	st	X+, r24
    25b0:	9c 93       	st	X, r25
    25b2:	1a 97       	sbiw	r26, 0x0a	; 10
    25b4:	30 81       	ld	r19, Z
    25b6:	20 81       	ld	r18, Z
    25b8:	80 81       	ld	r24, Z
    25ba:	40 81       	ld	r20, Z
    25bc:	88 1f       	adc	r24, r24
    25be:	88 27       	eor	r24, r24
    25c0:	88 1f       	adc	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	36 fb       	bst	r19, 6
    25ce:	33 27       	eor	r19, r19
    25d0:	30 f9       	bld	r19, 0
    25d2:	3b 8f       	std	Y+27, r19	; 0x1b
    25d4:	1c 8e       	std	Y+28, r1	; 0x1c
    25d6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    25d8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    25da:	86 2b       	or	r24, r22
    25dc:	97 2b       	or	r25, r23
    25de:	22 95       	swap	r18
    25e0:	21 70       	andi	r18, 0x01	; 1
    25e2:	2d 8f       	std	Y+29, r18	; 0x1d
    25e4:	1e 8e       	std	Y+30, r1	; 0x1e
    25e6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    25e8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	82 2b       	or	r24, r18
    25f0:	93 2b       	or	r25, r19
    25f2:	45 fb       	bst	r20, 5
    25f4:	44 27       	eor	r20, r20
    25f6:	40 f9       	bld	r20, 0
    25f8:	4f 8f       	std	Y+31, r20	; 0x1f
    25fa:	18 a2       	std	Y+32, r1	; 0x20
    25fc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    25fe:	38 a1       	ldd	r19, Y+32	; 0x20
    2600:	22 0f       	add	r18, r18
    2602:	33 1f       	adc	r19, r19
    2604:	22 0f       	add	r18, r18
    2606:	33 1f       	adc	r19, r19
    2608:	22 0f       	add	r18, r18
    260a:	33 1f       	adc	r19, r19
    260c:	82 2b       	or	r24, r18
    260e:	93 2b       	or	r25, r19
    2610:	58 9f       	mul	r21, r24
    2612:	d0 01       	movw	r26, r0
    2614:	59 9f       	mul	r21, r25
    2616:	b0 0d       	add	r27, r0
    2618:	11 24       	eor	r1, r1
    261a:	a2 53       	subi	r26, 0x32	; 50
    261c:	bf 4d       	sbci	r27, 0xDF	; 223
    261e:	80 91 7c 23 	lds	r24, 0x237C
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	1b 96       	adiw	r26, 0x0b	; 11
    2626:	8d 93       	st	X+, r24
    2628:	9c 93       	st	X, r25
    262a:	1c 97       	sbiw	r26, 0x0c	; 12
    262c:	30 81       	ld	r19, Z
    262e:	20 81       	ld	r18, Z
    2630:	80 81       	ld	r24, Z
    2632:	40 81       	ld	r20, Z
    2634:	88 1f       	adc	r24, r24
    2636:	88 27       	eor	r24, r24
    2638:	88 1f       	adc	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	36 fb       	bst	r19, 6
    2646:	33 27       	eor	r19, r19
    2648:	30 f9       	bld	r19, 0
    264a:	39 a3       	std	Y+33, r19	; 0x21
    264c:	1a a2       	std	Y+34, r1	; 0x22
    264e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2650:	ba a1       	ldd	r27, Y+34	; 0x22
    2652:	8a 2b       	or	r24, r26
    2654:	9b 2b       	or	r25, r27
    2656:	22 95       	swap	r18
    2658:	21 70       	andi	r18, 0x01	; 1
    265a:	2b a3       	std	Y+35, r18	; 0x23
    265c:	1c a2       	std	Y+36, r1	; 0x24
    265e:	2b a1       	ldd	r18, Y+35	; 0x23
    2660:	3c a1       	ldd	r19, Y+36	; 0x24
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	82 2b       	or	r24, r18
    2668:	93 2b       	or	r25, r19
    266a:	45 fb       	bst	r20, 5
    266c:	44 27       	eor	r20, r20
    266e:	40 f9       	bld	r20, 0
    2670:	4d a3       	std	Y+37, r20	; 0x25
    2672:	1e a2       	std	Y+38, r1	; 0x26
    2674:	2d a1       	ldd	r18, Y+37	; 0x25
    2676:	3e a1       	ldd	r19, Y+38	; 0x26
    2678:	22 0f       	add	r18, r18
    267a:	33 1f       	adc	r19, r19
    267c:	22 0f       	add	r18, r18
    267e:	33 1f       	adc	r19, r19
    2680:	22 0f       	add	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	82 2b       	or	r24, r18
    2686:	93 2b       	or	r25, r19
    2688:	58 9f       	mul	r21, r24
    268a:	d0 01       	movw	r26, r0
    268c:	59 9f       	mul	r21, r25
    268e:	b0 0d       	add	r27, r0
    2690:	11 24       	eor	r1, r1
    2692:	a2 53       	subi	r26, 0x32	; 50
    2694:	bf 4d       	sbci	r27, 0xDF	; 223
    2696:	80 91 7d 23 	lds	r24, 0x237D
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	1d 96       	adiw	r26, 0x0d	; 13
    269e:	8d 93       	st	X+, r24
    26a0:	9c 93       	st	X, r25
    26a2:	1e 97       	sbiw	r26, 0x0e	; 14
    26a4:	30 81       	ld	r19, Z
    26a6:	20 81       	ld	r18, Z
    26a8:	80 81       	ld	r24, Z
    26aa:	40 81       	ld	r20, Z
    26ac:	88 1f       	adc	r24, r24
    26ae:	88 27       	eor	r24, r24
    26b0:	88 1f       	adc	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	36 fb       	bst	r19, 6
    26be:	33 27       	eor	r19, r19
    26c0:	30 f9       	bld	r19, 0
    26c2:	3f a3       	std	Y+39, r19	; 0x27
    26c4:	18 a6       	std	Y+40, r1	; 0x28
    26c6:	6f a1       	ldd	r22, Y+39	; 0x27
    26c8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ca:	86 2b       	or	r24, r22
    26cc:	97 2b       	or	r25, r23
    26ce:	22 95       	swap	r18
    26d0:	21 70       	andi	r18, 0x01	; 1
    26d2:	29 a7       	std	Y+41, r18	; 0x29
    26d4:	1a a6       	std	Y+42, r1	; 0x2a
    26d6:	29 a5       	ldd	r18, Y+41	; 0x29
    26d8:	3a a5       	ldd	r19, Y+42	; 0x2a
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	82 2b       	or	r24, r18
    26e0:	93 2b       	or	r25, r19
    26e2:	45 fb       	bst	r20, 5
    26e4:	44 27       	eor	r20, r20
    26e6:	40 f9       	bld	r20, 0
    26e8:	4b a7       	std	Y+43, r20	; 0x2b
    26ea:	1c a6       	std	Y+44, r1	; 0x2c
    26ec:	2b a5       	ldd	r18, Y+43	; 0x2b
    26ee:	3c a5       	ldd	r19, Y+44	; 0x2c
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	22 0f       	add	r18, r18
    26f6:	33 1f       	adc	r19, r19
    26f8:	22 0f       	add	r18, r18
    26fa:	33 1f       	adc	r19, r19
    26fc:	82 2b       	or	r24, r18
    26fe:	93 2b       	or	r25, r19
    2700:	58 9f       	mul	r21, r24
    2702:	d0 01       	movw	r26, r0
    2704:	59 9f       	mul	r21, r25
    2706:	b0 0d       	add	r27, r0
    2708:	11 24       	eor	r1, r1
    270a:	a2 53       	subi	r26, 0x32	; 50
    270c:	bf 4d       	sbci	r27, 0xDF	; 223
    270e:	80 91 7e 23 	lds	r24, 0x237E
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	1f 96       	adiw	r26, 0x0f	; 15
    2716:	8d 93       	st	X+, r24
    2718:	9c 93       	st	X, r25
    271a:	50 97       	sbiw	r26, 0x10	; 16
    271c:	30 81       	ld	r19, Z
    271e:	20 81       	ld	r18, Z
    2720:	80 81       	ld	r24, Z
    2722:	40 81       	ld	r20, Z
    2724:	88 1f       	adc	r24, r24
    2726:	88 27       	eor	r24, r24
    2728:	88 1f       	adc	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	36 fb       	bst	r19, 6
    2736:	33 27       	eor	r19, r19
    2738:	30 f9       	bld	r19, 0
    273a:	3d a7       	std	Y+45, r19	; 0x2d
    273c:	1e a6       	std	Y+46, r1	; 0x2e
    273e:	ad a5       	ldd	r26, Y+45	; 0x2d
    2740:	be a5       	ldd	r27, Y+46	; 0x2e
    2742:	8a 2b       	or	r24, r26
    2744:	9b 2b       	or	r25, r27
    2746:	22 95       	swap	r18
    2748:	21 70       	andi	r18, 0x01	; 1
    274a:	2f a7       	std	Y+47, r18	; 0x2f
    274c:	18 aa       	std	Y+48, r1	; 0x30
    274e:	2f a5       	ldd	r18, Y+47	; 0x2f
    2750:	38 a9       	ldd	r19, Y+48	; 0x30
    2752:	22 0f       	add	r18, r18
    2754:	33 1f       	adc	r19, r19
    2756:	82 2b       	or	r24, r18
    2758:	93 2b       	or	r25, r19
    275a:	45 fb       	bst	r20, 5
    275c:	44 27       	eor	r20, r20
    275e:	40 f9       	bld	r20, 0
    2760:	49 ab       	std	Y+49, r20	; 0x31
    2762:	1a aa       	std	Y+50, r1	; 0x32
    2764:	29 a9       	ldd	r18, Y+49	; 0x31
    2766:	3a a9       	ldd	r19, Y+50	; 0x32
    2768:	22 0f       	add	r18, r18
    276a:	33 1f       	adc	r19, r19
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	82 2b       	or	r24, r18
    2776:	93 2b       	or	r25, r19
    2778:	58 9f       	mul	r21, r24
    277a:	d0 01       	movw	r26, r0
    277c:	59 9f       	mul	r21, r25
    277e:	b0 0d       	add	r27, r0
    2780:	11 24       	eor	r1, r1
    2782:	a2 53       	subi	r26, 0x32	; 50
    2784:	bf 4d       	sbci	r27, 0xDF	; 223
    2786:	80 91 7f 23 	lds	r24, 0x237F
    278a:	51 96       	adiw	r26, 0x11	; 17
    278c:	8c 93       	st	X, r24
    278e:	30 81       	ld	r19, Z
    2790:	20 81       	ld	r18, Z
    2792:	80 81       	ld	r24, Z
    2794:	40 81       	ld	r20, Z
    2796:	88 1f       	adc	r24, r24
    2798:	88 27       	eor	r24, r24
    279a:	88 1f       	adc	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	36 fb       	bst	r19, 6
    27a8:	33 27       	eor	r19, r19
    27aa:	30 f9       	bld	r19, 0
    27ac:	3b ab       	std	Y+51, r19	; 0x33
    27ae:	1c aa       	std	Y+52, r1	; 0x34
    27b0:	6b a9       	ldd	r22, Y+51	; 0x33
    27b2:	7c a9       	ldd	r23, Y+52	; 0x34
    27b4:	86 2b       	or	r24, r22
    27b6:	97 2b       	or	r25, r23
    27b8:	22 95       	swap	r18
    27ba:	21 70       	andi	r18, 0x01	; 1
    27bc:	2d ab       	std	Y+53, r18	; 0x35
    27be:	1e aa       	std	Y+54, r1	; 0x36
    27c0:	2d a9       	ldd	r18, Y+53	; 0x35
    27c2:	3e a9       	ldd	r19, Y+54	; 0x36
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	82 2b       	or	r24, r18
    27ca:	93 2b       	or	r25, r19
    27cc:	45 fb       	bst	r20, 5
    27ce:	44 27       	eor	r20, r20
    27d0:	40 f9       	bld	r20, 0
    27d2:	4f ab       	std	Y+55, r20	; 0x37
    27d4:	18 ae       	std	Y+56, r1	; 0x38
    27d6:	2f a9       	ldd	r18, Y+55	; 0x37
    27d8:	38 ad       	ldd	r19, Y+56	; 0x38
    27da:	22 0f       	add	r18, r18
    27dc:	33 1f       	adc	r19, r19
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	22 0f       	add	r18, r18
    27e4:	33 1f       	adc	r19, r19
    27e6:	82 2b       	or	r24, r18
    27e8:	93 2b       	or	r25, r19
    27ea:	58 9f       	mul	r21, r24
    27ec:	d0 01       	movw	r26, r0
    27ee:	59 9f       	mul	r21, r25
    27f0:	b0 0d       	add	r27, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	a2 53       	subi	r26, 0x32	; 50
    27f6:	bf 4d       	sbci	r27, 0xDF	; 223
    27f8:	80 91 80 23 	lds	r24, 0x2380
    27fc:	52 96       	adiw	r26, 0x12	; 18
    27fe:	8c 93       	st	X, r24
    2800:	30 81       	ld	r19, Z
    2802:	20 81       	ld	r18, Z
    2804:	80 81       	ld	r24, Z
    2806:	40 81       	ld	r20, Z
    2808:	88 1f       	adc	r24, r24
    280a:	88 27       	eor	r24, r24
    280c:	88 1f       	adc	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	36 fb       	bst	r19, 6
    281a:	33 27       	eor	r19, r19
    281c:	30 f9       	bld	r19, 0
    281e:	39 af       	std	Y+57, r19	; 0x39
    2820:	1a ae       	std	Y+58, r1	; 0x3a
    2822:	a9 ad       	ldd	r26, Y+57	; 0x39
    2824:	ba ad       	ldd	r27, Y+58	; 0x3a
    2826:	8a 2b       	or	r24, r26
    2828:	9b 2b       	or	r25, r27
    282a:	22 95       	swap	r18
    282c:	21 70       	andi	r18, 0x01	; 1
    282e:	2b af       	std	Y+59, r18	; 0x3b
    2830:	1c ae       	std	Y+60, r1	; 0x3c
    2832:	2b ad       	ldd	r18, Y+59	; 0x3b
    2834:	3c ad       	ldd	r19, Y+60	; 0x3c
    2836:	22 0f       	add	r18, r18
    2838:	33 1f       	adc	r19, r19
    283a:	82 2b       	or	r24, r18
    283c:	93 2b       	or	r25, r19
    283e:	45 fb       	bst	r20, 5
    2840:	44 27       	eor	r20, r20
    2842:	40 f9       	bld	r20, 0
    2844:	4d af       	std	Y+61, r20	; 0x3d
    2846:	1e ae       	std	Y+62, r1	; 0x3e
    2848:	2d ad       	ldd	r18, Y+61	; 0x3d
    284a:	3e ad       	ldd	r19, Y+62	; 0x3e
    284c:	22 0f       	add	r18, r18
    284e:	33 1f       	adc	r19, r19
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	22 0f       	add	r18, r18
    2856:	33 1f       	adc	r19, r19
    2858:	82 2b       	or	r24, r18
    285a:	93 2b       	or	r25, r19
    285c:	58 9f       	mul	r21, r24
    285e:	d0 01       	movw	r26, r0
    2860:	59 9f       	mul	r21, r25
    2862:	b0 0d       	add	r27, r0
    2864:	11 24       	eor	r1, r1
    2866:	a2 53       	subi	r26, 0x32	; 50
    2868:	bf 4d       	sbci	r27, 0xDF	; 223
    286a:	80 91 81 23 	lds	r24, 0x2381
    286e:	53 96       	adiw	r26, 0x13	; 19
    2870:	8c 93       	st	X, r24
    2872:	30 81       	ld	r19, Z
    2874:	20 81       	ld	r18, Z
    2876:	80 81       	ld	r24, Z
    2878:	40 81       	ld	r20, Z
    287a:	88 1f       	adc	r24, r24
    287c:	88 27       	eor	r24, r24
    287e:	88 1f       	adc	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	36 fb       	bst	r19, 6
    288c:	33 27       	eor	r19, r19
    288e:	30 f9       	bld	r19, 0
    2890:	3f af       	std	Y+63, r19	; 0x3f
    2892:	21 96       	adiw	r28, 0x01	; 1
    2894:	1f ae       	std	Y+63, r1	; 0x3f
    2896:	21 97       	sbiw	r28, 0x01	; 1
    2898:	21 96       	adiw	r28, 0x01	; 1
    289a:	6e ad       	ldd	r22, Y+62	; 0x3e
    289c:	7f ad       	ldd	r23, Y+63	; 0x3f
    289e:	21 97       	sbiw	r28, 0x01	; 1
    28a0:	86 2b       	or	r24, r22
    28a2:	97 2b       	or	r25, r23
    28a4:	22 95       	swap	r18
    28a6:	21 70       	andi	r18, 0x01	; 1
    28a8:	22 96       	adiw	r28, 0x02	; 2
    28aa:	2f af       	std	Y+63, r18	; 0x3f
    28ac:	22 97       	sbiw	r28, 0x02	; 2
    28ae:	23 96       	adiw	r28, 0x03	; 3
    28b0:	1f ae       	std	Y+63, r1	; 0x3f
    28b2:	23 97       	sbiw	r28, 0x03	; 3
    28b4:	23 96       	adiw	r28, 0x03	; 3
    28b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    28b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    28ba:	23 97       	sbiw	r28, 0x03	; 3
    28bc:	22 0f       	add	r18, r18
    28be:	33 1f       	adc	r19, r19
    28c0:	82 2b       	or	r24, r18
    28c2:	93 2b       	or	r25, r19
    28c4:	45 fb       	bst	r20, 5
    28c6:	44 27       	eor	r20, r20
    28c8:	40 f9       	bld	r20, 0
    28ca:	24 96       	adiw	r28, 0x04	; 4
    28cc:	4f af       	std	Y+63, r20	; 0x3f
    28ce:	24 97       	sbiw	r28, 0x04	; 4
    28d0:	25 96       	adiw	r28, 0x05	; 5
    28d2:	1f ae       	std	Y+63, r1	; 0x3f
    28d4:	25 97       	sbiw	r28, 0x05	; 5
    28d6:	25 96       	adiw	r28, 0x05	; 5
    28d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    28da:	3f ad       	ldd	r19, Y+63	; 0x3f
    28dc:	25 97       	sbiw	r28, 0x05	; 5
    28de:	22 0f       	add	r18, r18
    28e0:	33 1f       	adc	r19, r19
    28e2:	22 0f       	add	r18, r18
    28e4:	33 1f       	adc	r19, r19
    28e6:	22 0f       	add	r18, r18
    28e8:	33 1f       	adc	r19, r19
    28ea:	82 2b       	or	r24, r18
    28ec:	93 2b       	or	r25, r19
    28ee:	58 9f       	mul	r21, r24
    28f0:	d0 01       	movw	r26, r0
    28f2:	59 9f       	mul	r21, r25
    28f4:	b0 0d       	add	r27, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	a2 53       	subi	r26, 0x32	; 50
    28fa:	bf 4d       	sbci	r27, 0xDF	; 223
    28fc:	80 91 82 23 	lds	r24, 0x2382
    2900:	54 96       	adiw	r26, 0x14	; 20
    2902:	8c 93       	st	X, r24
    2904:	30 81       	ld	r19, Z
    2906:	20 81       	ld	r18, Z
    2908:	80 81       	ld	r24, Z
    290a:	40 81       	ld	r20, Z
    290c:	88 1f       	adc	r24, r24
    290e:	88 27       	eor	r24, r24
    2910:	88 1f       	adc	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	36 fb       	bst	r19, 6
    291e:	33 27       	eor	r19, r19
    2920:	30 f9       	bld	r19, 0
    2922:	26 96       	adiw	r28, 0x06	; 6
    2924:	3f af       	std	Y+63, r19	; 0x3f
    2926:	26 97       	sbiw	r28, 0x06	; 6
    2928:	27 96       	adiw	r28, 0x07	; 7
    292a:	1f ae       	std	Y+63, r1	; 0x3f
    292c:	27 97       	sbiw	r28, 0x07	; 7
    292e:	27 96       	adiw	r28, 0x07	; 7
    2930:	ae ad       	ldd	r26, Y+62	; 0x3e
    2932:	bf ad       	ldd	r27, Y+63	; 0x3f
    2934:	27 97       	sbiw	r28, 0x07	; 7
    2936:	8a 2b       	or	r24, r26
    2938:	9b 2b       	or	r25, r27
    293a:	22 95       	swap	r18
    293c:	21 70       	andi	r18, 0x01	; 1
    293e:	28 96       	adiw	r28, 0x08	; 8
    2940:	2f af       	std	Y+63, r18	; 0x3f
    2942:	28 97       	sbiw	r28, 0x08	; 8
    2944:	29 96       	adiw	r28, 0x09	; 9
    2946:	1f ae       	std	Y+63, r1	; 0x3f
    2948:	29 97       	sbiw	r28, 0x09	; 9
    294a:	29 96       	adiw	r28, 0x09	; 9
    294c:	2e ad       	ldd	r18, Y+62	; 0x3e
    294e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2950:	29 97       	sbiw	r28, 0x09	; 9
    2952:	22 0f       	add	r18, r18
    2954:	33 1f       	adc	r19, r19
    2956:	82 2b       	or	r24, r18
    2958:	93 2b       	or	r25, r19
    295a:	45 fb       	bst	r20, 5
    295c:	44 27       	eor	r20, r20
    295e:	40 f9       	bld	r20, 0
    2960:	2a 96       	adiw	r28, 0x0a	; 10
    2962:	4f af       	std	Y+63, r20	; 0x3f
    2964:	2a 97       	sbiw	r28, 0x0a	; 10
    2966:	2b 96       	adiw	r28, 0x0b	; 11
    2968:	1f ae       	std	Y+63, r1	; 0x3f
    296a:	2b 97       	sbiw	r28, 0x0b	; 11
    296c:	2b 96       	adiw	r28, 0x0b	; 11
    296e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2970:	3f ad       	ldd	r19, Y+63	; 0x3f
    2972:	2b 97       	sbiw	r28, 0x0b	; 11
    2974:	22 0f       	add	r18, r18
    2976:	33 1f       	adc	r19, r19
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	82 2b       	or	r24, r18
    2982:	93 2b       	or	r25, r19
    2984:	58 9f       	mul	r21, r24
    2986:	d0 01       	movw	r26, r0
    2988:	59 9f       	mul	r21, r25
    298a:	b0 0d       	add	r27, r0
    298c:	11 24       	eor	r1, r1
    298e:	a2 53       	subi	r26, 0x32	; 50
    2990:	bf 4d       	sbci	r27, 0xDF	; 223
    2992:	80 91 83 23 	lds	r24, 0x2383
    2996:	55 96       	adiw	r26, 0x15	; 21
    2998:	8c 93       	st	X, r24
    299a:	30 81       	ld	r19, Z
    299c:	20 81       	ld	r18, Z
    299e:	80 81       	ld	r24, Z
    29a0:	40 81       	ld	r20, Z
    29a2:	88 1f       	adc	r24, r24
    29a4:	88 27       	eor	r24, r24
    29a6:	88 1f       	adc	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	36 fb       	bst	r19, 6
    29b4:	33 27       	eor	r19, r19
    29b6:	30 f9       	bld	r19, 0
    29b8:	2c 96       	adiw	r28, 0x0c	; 12
    29ba:	3f af       	std	Y+63, r19	; 0x3f
    29bc:	2c 97       	sbiw	r28, 0x0c	; 12
    29be:	2d 96       	adiw	r28, 0x0d	; 13
    29c0:	1f ae       	std	Y+63, r1	; 0x3f
    29c2:	2d 97       	sbiw	r28, 0x0d	; 13
    29c4:	2d 96       	adiw	r28, 0x0d	; 13
    29c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    29c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ca:	2d 97       	sbiw	r28, 0x0d	; 13
    29cc:	8e 2b       	or	r24, r30
    29ce:	9f 2b       	or	r25, r31
    29d0:	22 95       	swap	r18
    29d2:	21 70       	andi	r18, 0x01	; 1
    29d4:	2e 96       	adiw	r28, 0x0e	; 14
    29d6:	2f af       	std	Y+63, r18	; 0x3f
    29d8:	2e 97       	sbiw	r28, 0x0e	; 14
    29da:	2f 96       	adiw	r28, 0x0f	; 15
    29dc:	1f ae       	std	Y+63, r1	; 0x3f
    29de:	2f 97       	sbiw	r28, 0x0f	; 15
    29e0:	2f 96       	adiw	r28, 0x0f	; 15
    29e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    29e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    29e6:	2f 97       	sbiw	r28, 0x0f	; 15
    29e8:	22 0f       	add	r18, r18
    29ea:	33 1f       	adc	r19, r19
    29ec:	82 2b       	or	r24, r18
    29ee:	93 2b       	or	r25, r19
    29f0:	45 fb       	bst	r20, 5
    29f2:	44 27       	eor	r20, r20
    29f4:	40 f9       	bld	r20, 0
    29f6:	60 96       	adiw	r28, 0x10	; 16
    29f8:	4f af       	std	Y+63, r20	; 0x3f
    29fa:	60 97       	sbiw	r28, 0x10	; 16
    29fc:	61 96       	adiw	r28, 0x11	; 17
    29fe:	1f ae       	std	Y+63, r1	; 0x3f
    2a00:	61 97       	sbiw	r28, 0x11	; 17
    2a02:	61 96       	adiw	r28, 0x11	; 17
    2a04:	2e ad       	ldd	r18, Y+62	; 0x3e
    2a06:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a08:	61 97       	sbiw	r28, 0x11	; 17
    2a0a:	22 0f       	add	r18, r18
    2a0c:	33 1f       	adc	r19, r19
    2a0e:	22 0f       	add	r18, r18
    2a10:	33 1f       	adc	r19, r19
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	82 2b       	or	r24, r18
    2a18:	93 2b       	or	r25, r19
    2a1a:	58 9f       	mul	r21, r24
    2a1c:	f0 01       	movw	r30, r0
    2a1e:	59 9f       	mul	r21, r25
    2a20:	f0 0d       	add	r31, r0
    2a22:	11 24       	eor	r1, r1
    2a24:	e2 53       	subi	r30, 0x32	; 50
    2a26:	ff 4d       	sbci	r31, 0xDF	; 223
    2a28:	80 91 84 23 	lds	r24, 0x2384
    2a2c:	86 8b       	std	Z+22, r24	; 0x16
    2a2e:	d4 fc       	sbrc	r13, 4
    2a30:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <NRF24L01_L_Flush_TX>
    2a34:	ce 5a       	subi	r28, 0xAE	; 174
    2a36:	df 4f       	sbci	r29, 0xFF	; 255
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	ff 91       	pop	r31
    2a42:	ef 91       	pop	r30
    2a44:	bf 91       	pop	r27
    2a46:	af 91       	pop	r26
    2a48:	9f 91       	pop	r25
    2a4a:	8f 91       	pop	r24
    2a4c:	7f 91       	pop	r23
    2a4e:	6f 91       	pop	r22
    2a50:	5f 91       	pop	r21
    2a52:	4f 91       	pop	r20
    2a54:	3f 91       	pop	r19
    2a56:	2f 91       	pop	r18
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	9f 90       	pop	r9
    2a68:	8f 90       	pop	r8
    2a6a:	7f 90       	pop	r7
    2a6c:	6f 90       	pop	r6
    2a6e:	5f 90       	pop	r5
    2a70:	4f 90       	pop	r4
    2a72:	3f 90       	pop	r3
    2a74:	2f 90       	pop	r2
    2a76:	0f 90       	pop	r0
    2a78:	0b be       	out	0x3b, r0	; 59
    2a7a:	0f 90       	pop	r0
    2a7c:	0a be       	out	0x3a, r0	; 58
    2a7e:	0f 90       	pop	r0
    2a80:	09 be       	out	0x39, r0	; 57
    2a82:	0f 90       	pop	r0
    2a84:	08 be       	out	0x38, r0	; 56
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

00002a90 <__vector_77>:
    2a90:	1f 92       	push	r1
    2a92:	0f 92       	push	r0
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	0f 92       	push	r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	08 b6       	in	r0, 0x38	; 56
    2a9c:	0f 92       	push	r0
    2a9e:	18 be       	out	0x38, r1	; 56
    2aa0:	09 b6       	in	r0, 0x39	; 57
    2aa2:	0f 92       	push	r0
    2aa4:	19 be       	out	0x39, r1	; 57
    2aa6:	0a b6       	in	r0, 0x3a	; 58
    2aa8:	0f 92       	push	r0
    2aaa:	1a be       	out	0x3a, r1	; 58
    2aac:	0b b6       	in	r0, 0x3b	; 59
    2aae:	0f 92       	push	r0
    2ab0:	1b be       	out	0x3b, r1	; 59
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	df 92       	push	r13
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	2f 93       	push	r18
    2ac2:	3f 93       	push	r19
    2ac4:	4f 93       	push	r20
    2ac6:	5f 93       	push	r21
    2ac8:	6f 93       	push	r22
    2aca:	7f 93       	push	r23
    2acc:	8f 93       	push	r24
    2ace:	9f 93       	push	r25
    2ad0:	af 93       	push	r26
    2ad2:	bf 93       	push	r27
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	a8 95       	wdr
    2ade:	80 91 9a 23 	lds	r24, 0x239A
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	80 93 9a 23 	sts	0x239A, r24
    2ae8:	84 31       	cpi	r24, 0x14	; 20
    2aea:	b4 f0       	brlt	.+44     	; 0x2b18 <__vector_77+0x88>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 b6 20 	sts	0x20B6, r24
    2af2:	80 91 f3 23 	lds	r24, 0x23F3
    2af6:	90 91 f4 23 	lds	r25, 0x23F4
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	81 70       	andi	r24, 0x01	; 1
    2afe:	90 78       	andi	r25, 0x80	; 128
    2b00:	99 23       	and	r25, r25
    2b02:	24 f4       	brge	.+8      	; 0x2b0c <__vector_77+0x7c>
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	8e 6f       	ori	r24, 0xFE	; 254
    2b08:	9f 6f       	ori	r25, 0xFF	; 255
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	80 93 f3 23 	sts	0x23F3, r24
    2b10:	90 93 f4 23 	sts	0x23F4, r25
    2b14:	10 92 9a 23 	sts	0x239A, r1
    2b18:	80 91 b7 20 	lds	r24, 0x20B7
    2b1c:	90 91 b8 20 	lds	r25, 0x20B8
    2b20:	a0 91 b9 20 	lds	r26, 0x20B9
    2b24:	b0 91 ba 20 	lds	r27, 0x20BA
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	a1 1d       	adc	r26, r1
    2b2c:	b1 1d       	adc	r27, r1
    2b2e:	80 93 b7 20 	sts	0x20B7, r24
    2b32:	90 93 b8 20 	sts	0x20B8, r25
    2b36:	a0 93 b9 20 	sts	0x20B9, r26
    2b3a:	b0 93 ba 20 	sts	0x20BA, r27
    2b3e:	80 91 bf 20 	lds	r24, 0x20BF
    2b42:	90 91 c0 20 	lds	r25, 0x20C0
    2b46:	89 2b       	or	r24, r25
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <__vector_77+0xbc>
    2b4a:	40 c0       	rjmp	.+128    	; 0x2bcc <__vector_77+0x13c>
    2b4c:	80 91 e8 21 	lds	r24, 0x21E8
    2b50:	90 91 e9 21 	lds	r25, 0x21E9
    2b54:	a0 91 ea 21 	lds	r26, 0x21EA
    2b58:	b0 91 eb 21 	lds	r27, 0x21EB
    2b5c:	88 3b       	cpi	r24, 0xB8	; 184
    2b5e:	2b e0       	ldi	r18, 0x0B	; 11
    2b60:	92 07       	cpc	r25, r18
    2b62:	a1 05       	cpc	r26, r1
    2b64:	b1 05       	cpc	r27, r1
    2b66:	d0 f4       	brcc	.+52     	; 0x2b9c <__vector_77+0x10c>
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	a1 1d       	adc	r26, r1
    2b6c:	b1 1d       	adc	r27, r1
    2b6e:	80 93 e8 21 	sts	0x21E8, r24
    2b72:	90 93 e9 21 	sts	0x21E9, r25
    2b76:	a0 93 ea 21 	sts	0x21EA, r26
    2b7a:	b0 93 eb 21 	sts	0x21EB, r27
    2b7e:	a0 e2       	ldi	r26, 0x20	; 32
    2b80:	b6 e0       	ldi	r27, 0x06	; 6
    2b82:	14 96       	adiw	r26, 0x04	; 4
    2b84:	8c 91       	ld	r24, X
    2b86:	14 97       	sbiw	r26, 0x04	; 4
    2b88:	80 64       	ori	r24, 0x40	; 64
    2b8a:	14 96       	adiw	r26, 0x04	; 4
    2b8c:	8c 93       	st	X, r24
    2b8e:	8f ef       	ldi	r24, 0xFF	; 255
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	80 93 2a 08 	sts	0x082A, r24
    2b96:	90 93 2b 08 	sts	0x082B, r25
    2b9a:	18 c0       	rjmp	.+48     	; 0x2bcc <__vector_77+0x13c>
    2b9c:	10 92 2a 08 	sts	0x082A, r1
    2ba0:	10 92 2b 08 	sts	0x082B, r1
    2ba4:	a0 e2       	ldi	r26, 0x20	; 32
    2ba6:	b6 e0       	ldi	r27, 0x06	; 6
    2ba8:	14 96       	adiw	r26, 0x04	; 4
    2baa:	8c 91       	ld	r24, X
    2bac:	14 97       	sbiw	r26, 0x04	; 4
    2bae:	8f 7b       	andi	r24, 0xBF	; 191
    2bb0:	14 96       	adiw	r26, 0x04	; 4
    2bb2:	8c 93       	st	X, r24
    2bb4:	10 92 e8 21 	sts	0x21E8, r1
    2bb8:	10 92 e9 21 	sts	0x21E9, r1
    2bbc:	10 92 ea 21 	sts	0x21EA, r1
    2bc0:	10 92 eb 21 	sts	0x21EB, r1
    2bc4:	10 92 bf 20 	sts	0x20BF, r1
    2bc8:	10 92 c0 20 	sts	0x20C0, r1
    2bcc:	80 91 bd 20 	lds	r24, 0x20BD
    2bd0:	90 91 be 20 	lds	r25, 0x20BE
    2bd4:	89 2b       	or	r24, r25
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <__vector_77+0x14a>
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <__vector_77+0x1c8>
    2bda:	80 91 e8 21 	lds	r24, 0x21E8
    2bde:	90 91 e9 21 	lds	r25, 0x21E9
    2be2:	a0 91 ea 21 	lds	r26, 0x21EA
    2be6:	b0 91 eb 21 	lds	r27, 0x21EB
    2bea:	84 36       	cpi	r24, 0x64	; 100
    2bec:	91 05       	cpc	r25, r1
    2bee:	a1 05       	cpc	r26, r1
    2bf0:	b1 05       	cpc	r27, r1
    2bf2:	d0 f4       	brcc	.+52     	; 0x2c28 <__vector_77+0x198>
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	a1 1d       	adc	r26, r1
    2bf8:	b1 1d       	adc	r27, r1
    2bfa:	80 93 e8 21 	sts	0x21E8, r24
    2bfe:	90 93 e9 21 	sts	0x21E9, r25
    2c02:	a0 93 ea 21 	sts	0x21EA, r26
    2c06:	b0 93 eb 21 	sts	0x21EB, r27
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	80 93 28 08 	sts	0x0828, r24
    2c12:	90 93 29 08 	sts	0x0829, r25
    2c16:	a0 e2       	ldi	r26, 0x20	; 32
    2c18:	b6 e0       	ldi	r27, 0x06	; 6
    2c1a:	14 96       	adiw	r26, 0x04	; 4
    2c1c:	8c 91       	ld	r24, X
    2c1e:	14 97       	sbiw	r26, 0x04	; 4
    2c20:	80 64       	ori	r24, 0x40	; 64
    2c22:	14 96       	adiw	r26, 0x04	; 4
    2c24:	8c 93       	st	X, r24
    2c26:	18 c0       	rjmp	.+48     	; 0x2c58 <__vector_77+0x1c8>
    2c28:	10 92 28 08 	sts	0x0828, r1
    2c2c:	10 92 29 08 	sts	0x0829, r1
    2c30:	a0 e2       	ldi	r26, 0x20	; 32
    2c32:	b6 e0       	ldi	r27, 0x06	; 6
    2c34:	14 96       	adiw	r26, 0x04	; 4
    2c36:	8c 91       	ld	r24, X
    2c38:	14 97       	sbiw	r26, 0x04	; 4
    2c3a:	8f 7b       	andi	r24, 0xBF	; 191
    2c3c:	14 96       	adiw	r26, 0x04	; 4
    2c3e:	8c 93       	st	X, r24
    2c40:	10 92 e8 21 	sts	0x21E8, r1
    2c44:	10 92 e9 21 	sts	0x21E9, r1
    2c48:	10 92 ea 21 	sts	0x21EA, r1
    2c4c:	10 92 eb 21 	sts	0x21EB, r1
    2c50:	10 92 bd 20 	sts	0x20BD, r1
    2c54:	10 92 be 20 	sts	0x20BE, r1
    2c58:	80 91 c1 20 	lds	r24, 0x20C1
    2c5c:	90 91 c2 20 	lds	r25, 0x20C2
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	80 93 c1 20 	sts	0x20C1, r24
    2c66:	90 93 c2 20 	sts	0x20C2, r25
    2c6a:	80 91 5e 20 	lds	r24, 0x205E
    2c6e:	90 91 5f 20 	lds	r25, 0x205F
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	91 05       	cpc	r25, r1
    2c76:	81 f4       	brne	.+32     	; 0x2c98 <__vector_77+0x208>
    2c78:	10 92 c3 20 	sts	0x20C3, r1
    2c7c:	0e 94 98 02 	call	0x530	; 0x530 <Menu_Display>
    2c80:	0e 94 c4 02 	call	0x588	; 0x588 <Menu_Reset>
    2c84:	80 91 5e 20 	lds	r24, 0x205E
    2c88:	90 91 5f 20 	lds	r25, 0x205F
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	80 93 5e 20 	sts	0x205E, r24
    2c92:	90 93 5f 20 	sts	0x205F, r25
    2c96:	87 c0       	rjmp	.+270    	; 0x2da6 <__vector_77+0x316>
    2c98:	82 30       	cpi	r24, 0x02	; 2
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	08 f1       	brcs	.+66     	; 0x2ce0 <__vector_77+0x250>
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	80 93 5e 20 	sts	0x205E, r24
    2ca4:	90 93 5f 20 	sts	0x205F, r25
    2ca8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <menu_check_status>
    2cac:	80 91 5e 20 	lds	r24, 0x205E
    2cb0:	90 91 5f 20 	lds	r25, 0x205F
    2cb4:	88 3b       	cpi	r24, 0xB8	; 184
    2cb6:	2b e0       	ldi	r18, 0x0B	; 11
    2cb8:	92 07       	cpc	r25, r18
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <__vector_77+0x22e>
    2cbc:	74 c0       	rjmp	.+232    	; 0x2da6 <__vector_77+0x316>
    2cbe:	a0 e0       	ldi	r26, 0x00	; 0
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	80 93 2c 20 	sts	0x202C, r24
    2cc6:	90 93 2d 20 	sts	0x202D, r25
    2cca:	a0 93 2e 20 	sts	0x202E, r26
    2cce:	b0 93 2f 20 	sts	0x202F, r27
    2cd2:	88 ec       	ldi	r24, 0xC8	; 200
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	80 93 5e 22 	sts	0x225E, r24
    2cda:	90 93 5f 22 	sts	0x225F, r25
    2cde:	63 c0       	rjmp	.+198    	; 0x2da6 <__vector_77+0x316>
    2ce0:	a8 e0       	ldi	r26, 0x08	; 8
    2ce2:	b6 e0       	ldi	r27, 0x06	; 6
    2ce4:	dc 90       	ld	r13, X
    2ce6:	ec 90       	ld	r14, X
    2ce8:	8c 91       	ld	r24, X
    2cea:	fc 90       	ld	r15, X
    2cec:	88 1f       	adc	r24, r24
    2cee:	88 27       	eor	r24, r24
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	d6 fa       	bst	r13, 6
    2cfe:	00 27       	eor	r16, r16
    2d00:	00 f9       	bld	r16, 0
    2d02:	10 e0       	ldi	r17, 0x00	; 0
    2d04:	08 2b       	or	r16, r24
    2d06:	19 2b       	or	r17, r25
    2d08:	e4 fa       	bst	r14, 4
    2d0a:	ee 24       	eor	r14, r14
    2d0c:	e0 f8       	bld	r14, 0
    2d0e:	ce 2d       	mov	r28, r14
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	d8 2f       	mov	r29, r24
    2d14:	cc 0f       	add	r28, r28
    2d16:	dd 1f       	adc	r29, r29
    2d18:	0c 2b       	or	r16, r28
    2d1a:	1d 2b       	or	r17, r29
    2d1c:	f5 fa       	bst	r15, 5
    2d1e:	ee 27       	eor	r30, r30
    2d20:	e0 f9       	bld	r30, 0
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	cf 01       	movw	r24, r30
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	f8 01       	movw	r30, r16
    2d34:	e8 2b       	or	r30, r24
    2d36:	f9 2b       	or	r31, r25
    2d38:	ee 0f       	add	r30, r30
    2d3a:	ff 1f       	adc	r31, r31
    2d3c:	e8 5f       	subi	r30, 0xF8	; 248
    2d3e:	ff 4d       	sbci	r31, 0xDF	; 223
    2d40:	80 81       	ld	r24, Z
    2d42:	e0 e2       	ldi	r30, 0x20	; 32
    2d44:	f7 e0       	ldi	r31, 0x07	; 7
    2d46:	84 83       	std	Z+4, r24	; 0x04
    2d48:	cc 91       	ld	r28, X
    2d4a:	9c 91       	ld	r25, X
    2d4c:	ec 91       	ld	r30, X
    2d4e:	8c 91       	ld	r24, X
    2d50:	ee 1f       	adc	r30, r30
    2d52:	ee 27       	eor	r30, r30
    2d54:	ee 1f       	adc	r30, r30
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	ee 0f       	add	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	ee 0f       	add	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	c6 fb       	bst	r28, 6
    2d62:	66 27       	eor	r22, r22
    2d64:	60 f9       	bld	r22, 0
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	e6 2b       	or	r30, r22
    2d6a:	f7 2b       	or	r31, r23
    2d6c:	94 fb       	bst	r25, 4
    2d6e:	44 27       	eor	r20, r20
    2d70:	40 f9       	bld	r20, 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	44 0f       	add	r20, r20
    2d76:	55 1f       	adc	r21, r21
    2d78:	e4 2b       	or	r30, r20
    2d7a:	f5 2b       	or	r31, r21
    2d7c:	85 fb       	bst	r24, 5
    2d7e:	aa 24       	eor	r10, r10
    2d80:	a0 f8       	bld	r10, 0
    2d82:	b1 2c       	mov	r11, r1
    2d84:	95 01       	movw	r18, r10
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	e2 2b       	or	r30, r18
    2d94:	f3 2b       	or	r31, r19
    2d96:	ee 0f       	add	r30, r30
    2d98:	ff 1f       	adc	r31, r31
    2d9a:	e8 5f       	subi	r30, 0xF8	; 248
    2d9c:	ff 4d       	sbci	r31, 0xDF	; 223
    2d9e:	80 81       	ld	r24, Z
    2da0:	e0 e0       	ldi	r30, 0x00	; 0
    2da2:	f7 e0       	ldi	r31, 0x07	; 7
    2da4:	84 83       	std	Z+4, r24	; 0x04
    2da6:	ff 91       	pop	r31
    2da8:	ef 91       	pop	r30
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	bf 91       	pop	r27
    2db0:	af 91       	pop	r26
    2db2:	9f 91       	pop	r25
    2db4:	8f 91       	pop	r24
    2db6:	7f 91       	pop	r23
    2db8:	6f 91       	pop	r22
    2dba:	5f 91       	pop	r21
    2dbc:	4f 91       	pop	r20
    2dbe:	3f 91       	pop	r19
    2dc0:	2f 91       	pop	r18
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	df 90       	pop	r13
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0a be       	out	0x3a, r0	; 58
    2dd8:	0f 90       	pop	r0
    2dda:	09 be       	out	0x39, r0	; 57
    2ddc:	0f 90       	pop	r0
    2dde:	08 be       	out	0x38, r0	; 56
    2de0:	0f 90       	pop	r0
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	0f 90       	pop	r0
    2de6:	1f 90       	pop	r1
    2de8:	18 95       	reti

00002dea <__vector_104>:
    2dea:	1f 92       	push	r1
    2dec:	0f 92       	push	r0
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	0f 92       	push	r0
    2df2:	11 24       	eor	r1, r1
    2df4:	08 b6       	in	r0, 0x38	; 56
    2df6:	0f 92       	push	r0
    2df8:	18 be       	out	0x38, r1	; 56
    2dfa:	0f 90       	pop	r0
    2dfc:	08 be       	out	0x38, r0	; 56
    2dfe:	0f 90       	pop	r0
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	0f 90       	pop	r0
    2e04:	1f 90       	pop	r1
    2e06:	18 95       	reti

00002e08 <__vector_94>:
    2e08:	1f 92       	push	r1
    2e0a:	0f 92       	push	r0
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	0f 92       	push	r0
    2e10:	11 24       	eor	r1, r1
    2e12:	08 b6       	in	r0, 0x38	; 56
    2e14:	0f 92       	push	r0
    2e16:	18 be       	out	0x38, r1	; 56
    2e18:	2f 93       	push	r18
    2e1a:	3f 93       	push	r19
    2e1c:	8f 93       	push	r24
    2e1e:	9f 93       	push	r25
    2e20:	20 91 37 24 	lds	r18, 0x2437
    2e24:	30 91 38 24 	lds	r19, 0x2438
    2e28:	80 91 c8 07 	lds	r24, 0x07C8
    2e2c:	81 ff       	sbrs	r24, 1
    2e2e:	03 c0       	rjmp	.+6      	; 0x2e36 <__vector_94+0x2e>
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	9f ef       	ldi	r25, 0xFF	; 255
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <__vector_94+0x32>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	82 0f       	add	r24, r18
    2e3c:	93 1f       	adc	r25, r19
    2e3e:	80 93 37 24 	sts	0x2437, r24
    2e42:	90 93 38 24 	sts	0x2438, r25
    2e46:	9f 91       	pop	r25
    2e48:	8f 91       	pop	r24
    2e4a:	3f 91       	pop	r19
    2e4c:	2f 91       	pop	r18
    2e4e:	0f 90       	pop	r0
    2e50:	08 be       	out	0x38, r0	; 56
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <__vector_96>:
    2e5c:	1f 92       	push	r1
    2e5e:	0f 92       	push	r0
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	0f 92       	push	r0
    2e64:	11 24       	eor	r1, r1
    2e66:	08 b6       	in	r0, 0x38	; 56
    2e68:	0f 92       	push	r0
    2e6a:	18 be       	out	0x38, r1	; 56
    2e6c:	2f 93       	push	r18
    2e6e:	3f 93       	push	r19
    2e70:	8f 93       	push	r24
    2e72:	9f 93       	push	r25
    2e74:	20 91 a6 23 	lds	r18, 0x23A6
    2e78:	30 91 a7 23 	lds	r19, 0x23A7
    2e7c:	80 91 e8 06 	lds	r24, 0x06E8
    2e80:	84 ff       	sbrs	r24, 4
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <__vector_96+0x2e>
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	9f ef       	ldi	r25, 0xFF	; 255
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <__vector_96+0x32>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	80 93 a6 23 	sts	0x23A6, r24
    2e96:	90 93 a7 23 	sts	0x23A7, r25
    2e9a:	9f 91       	pop	r25
    2e9c:	8f 91       	pop	r24
    2e9e:	3f 91       	pop	r19
    2ea0:	2f 91       	pop	r18
    2ea2:	0f 90       	pop	r0
    2ea4:	08 be       	out	0x38, r0	; 56
    2ea6:	0f 90       	pop	r0
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	0f 90       	pop	r0
    2eac:	1f 90       	pop	r1
    2eae:	18 95       	reti

00002eb0 <__vector_2>:
    2eb0:	1f 92       	push	r1
    2eb2:	0f 92       	push	r0
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	0f 92       	push	r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	08 b6       	in	r0, 0x38	; 56
    2ebc:	0f 92       	push	r0
    2ebe:	18 be       	out	0x38, r1	; 56
    2ec0:	2f 93       	push	r18
    2ec2:	3f 93       	push	r19
    2ec4:	8f 93       	push	r24
    2ec6:	9f 93       	push	r25
    2ec8:	20 91 de 23 	lds	r18, 0x23DE
    2ecc:	30 91 df 23 	lds	r19, 0x23DF
    2ed0:	80 91 48 06 	lds	r24, 0x0648
    2ed4:	84 ff       	sbrs	r24, 4
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <__vector_2+0x2e>
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	9f ef       	ldi	r25, 0xFF	; 255
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <__vector_2+0x32>
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	82 0f       	add	r24, r18
    2ee4:	93 1f       	adc	r25, r19
    2ee6:	80 93 de 23 	sts	0x23DE, r24
    2eea:	90 93 df 23 	sts	0x23DF, r25
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	3f 91       	pop	r19
    2ef4:	2f 91       	pop	r18
    2ef6:	0f 90       	pop	r0
    2ef8:	08 be       	out	0x38, r0	; 56
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_95>:
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	08 b6       	in	r0, 0x38	; 56
    2f10:	0f 92       	push	r0
    2f12:	18 be       	out	0x38, r1	; 56
    2f14:	2f 93       	push	r18
    2f16:	3f 93       	push	r19
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	20 91 53 24 	lds	r18, 0x2453
    2f20:	30 91 54 24 	lds	r19, 0x2454
    2f24:	80 91 c8 07 	lds	r24, 0x07C8
    2f28:	82 ff       	sbrs	r24, 2
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <__vector_95+0x2e>
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f ef       	ldi	r25, 0xFF	; 255
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <__vector_95+0x32>
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	80 93 53 24 	sts	0x2453, r24
    2f3e:	90 93 54 24 	sts	0x2454, r25
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	3f 91       	pop	r19
    2f48:	2f 91       	pop	r18
    2f4a:	0f 90       	pop	r0
    2f4c:	08 be       	out	0x38, r0	; 56
    2f4e:	0f 90       	pop	r0
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	0f 90       	pop	r0
    2f54:	1f 90       	pop	r1
    2f56:	18 95       	reti

00002f58 <__vector_97>:
    2f58:	1f 92       	push	r1
    2f5a:	0f 92       	push	r0
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	0f 92       	push	r0
    2f60:	11 24       	eor	r1, r1
    2f62:	08 b6       	in	r0, 0x38	; 56
    2f64:	0f 92       	push	r0
    2f66:	18 be       	out	0x38, r1	; 56
    2f68:	09 b6       	in	r0, 0x39	; 57
    2f6a:	0f 92       	push	r0
    2f6c:	19 be       	out	0x39, r1	; 57
    2f6e:	0b b6       	in	r0, 0x3b	; 59
    2f70:	0f 92       	push	r0
    2f72:	1b be       	out	0x3b, r1	; 59
    2f74:	2f 93       	push	r18
    2f76:	3f 93       	push	r19
    2f78:	4f 93       	push	r20
    2f7a:	5f 93       	push	r21
    2f7c:	6f 93       	push	r22
    2f7e:	7f 93       	push	r23
    2f80:	8f 93       	push	r24
    2f82:	9f 93       	push	r25
    2f84:	af 93       	push	r26
    2f86:	bf 93       	push	r27
    2f88:	ef 93       	push	r30
    2f8a:	ff 93       	push	r31
    2f8c:	80 91 5e 20 	lds	r24, 0x205E
    2f90:	90 91 5f 20 	lds	r25, 0x205F
    2f94:	89 2b       	or	r24, r25
    2f96:	89 f4       	brne	.+34     	; 0x2fba <__vector_97+0x62>
    2f98:	80 91 e8 06 	lds	r24, 0x06E8
    2f9c:	61 e6       	ldi	r22, 0x61	; 97
    2f9e:	70 e2       	ldi	r23, 0x20	; 32
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	88 27       	eor	r24, r24
    2fa4:	88 1f       	adc	r24, r24
    2fa6:	0e 94 89 02 	call	0x512	; 0x512 <menu_check_sw>
    2faa:	80 91 a8 06 	lds	r24, 0x06A8
    2fae:	60 e6       	ldi	r22, 0x60	; 96
    2fb0:	70 e2       	ldi	r23, 0x20	; 32
    2fb2:	82 95       	swap	r24
    2fb4:	81 70       	andi	r24, 0x01	; 1
    2fb6:	0e 94 89 02 	call	0x512	; 0x512 <menu_check_sw>
    2fba:	80 e3       	ldi	r24, 0x30	; 48
    2fbc:	95 e7       	ldi	r25, 0x75	; 117
    2fbe:	80 93 5e 20 	sts	0x205E, r24
    2fc2:	90 93 5f 20 	sts	0x205F, r25
    2fc6:	8f ef       	ldi	r24, 0xFF	; 255
    2fc8:	80 93 c3 20 	sts	0x20C3, r24
    2fcc:	0e 94 98 02 	call	0x530	; 0x530 <Menu_Display>
    2fd0:	ff 91       	pop	r31
    2fd2:	ef 91       	pop	r30
    2fd4:	bf 91       	pop	r27
    2fd6:	af 91       	pop	r26
    2fd8:	9f 91       	pop	r25
    2fda:	8f 91       	pop	r24
    2fdc:	7f 91       	pop	r23
    2fde:	6f 91       	pop	r22
    2fe0:	5f 91       	pop	r21
    2fe2:	4f 91       	pop	r20
    2fe4:	3f 91       	pop	r19
    2fe6:	2f 91       	pop	r18
    2fe8:	0f 90       	pop	r0
    2fea:	0b be       	out	0x3b, r0	; 59
    2fec:	0f 90       	pop	r0
    2fee:	09 be       	out	0x39, r0	; 57
    2ff0:	0f 90       	pop	r0
    2ff2:	08 be       	out	0x38, r0	; 56
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <__vector_100>:
    2ffe:	1f 92       	push	r1
    3000:	0f 92       	push	r0
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	0f 92       	push	r0
    3006:	11 24       	eor	r1, r1
    3008:	08 b6       	in	r0, 0x38	; 56
    300a:	0f 92       	push	r0
    300c:	18 be       	out	0x38, r1	; 56
    300e:	0f 90       	pop	r0
    3010:	08 be       	out	0x38, r0	; 56
    3012:	0f 90       	pop	r0
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	0f 90       	pop	r0
    3018:	1f 90       	pop	r1
    301a:	18 95       	reti

0000301c <disp_ans>:
    301c:	ef 92       	push	r14
    301e:	ff 92       	push	r15
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	c8 5c       	subi	r28, 0xC8	; 200
    302e:	d1 09       	sbc	r29, r1
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
    303c:	80 91 9f 23 	lds	r24, 0x239F
    3040:	8f 93       	push	r24
    3042:	80 91 9e 23 	lds	r24, 0x239E
    3046:	8f 93       	push	r24
    3048:	8c e3       	ldi	r24, 0x3C	; 60
    304a:	90 e2       	ldi	r25, 0x20	; 32
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	0a e0       	ldi	r16, 0x0A	; 10
    3052:	14 e2       	ldi	r17, 0x24	; 36
    3054:	1f 93       	push	r17
    3056:	0f 93       	push	r16
    3058:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <sprintf>
    305c:	c8 01       	movw	r24, r16
    305e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDStringRam>
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
    306a:	0f 2e       	mov	r0, r31
    306c:	f2 ee       	ldi	r31, 0xE2	; 226
    306e:	ef 2e       	mov	r14, r31
    3070:	f3 e2       	ldi	r31, 0x23	; 35
    3072:	ff 2e       	mov	r15, r31
    3074:	f0 2d       	mov	r31, r0
    3076:	f7 01       	movw	r30, r14
    3078:	81 81       	ldd	r24, Z+1	; 0x01
    307a:	8f 93       	push	r24
    307c:	80 81       	ld	r24, Z
    307e:	8f 93       	push	r24
    3080:	86 e4       	ldi	r24, 0x46	; 70
    3082:	90 e2       	ldi	r25, 0x20	; 32
    3084:	9f 93       	push	r25
    3086:	8f 93       	push	r24
    3088:	1f 93       	push	r17
    308a:	0f 93       	push	r16
    308c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <sprintf>
    3090:	c8 01       	movw	r24, r16
    3092:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDStringRam>
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	89 e0       	ldi	r24, 0x09	; 9
    309a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
    309e:	80 91 04 22 	lds	r24, 0x2204
    30a2:	1f 92       	push	r1
    30a4:	8f 93       	push	r24
    30a6:	8f e4       	ldi	r24, 0x4F	; 79
    30a8:	90 e2       	ldi	r25, 0x20	; 32
    30aa:	9f 93       	push	r25
    30ac:	8f 93       	push	r24
    30ae:	1f 93       	push	r17
    30b0:	0f 93       	push	r16
    30b2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <sprintf>
    30b6:	c8 01       	movw	r24, r16
    30b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDStringRam>
    30bc:	f7 01       	movw	r30, r14
    30be:	81 81       	ldd	r24, Z+1	; 0x01
    30c0:	8f 93       	push	r24
    30c2:	80 81       	ld	r24, Z
    30c4:	8f 93       	push	r24
    30c6:	e4 ee       	ldi	r30, 0xE4	; 228
    30c8:	f3 e2       	ldi	r31, 0x23	; 35
    30ca:	81 81       	ldd	r24, Z+1	; 0x01
    30cc:	8f 93       	push	r24
    30ce:	80 81       	ld	r24, Z
    30d0:	8f 93       	push	r24
    30d2:	86 e5       	ldi	r24, 0x56	; 86
    30d4:	90 e2       	ldi	r25, 0x20	; 32
    30d6:	9f 93       	push	r25
    30d8:	8f 93       	push	r24
    30da:	ce 01       	movw	r24, r28
    30dc:	01 96       	adiw	r24, 0x01	; 1
    30de:	9f 93       	push	r25
    30e0:	8f 93       	push	r24
    30e2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <sprintf>
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	88 23       	and	r24, r24
    30ec:	b1 f0       	breq	.+44     	; 0x311a <disp_ans+0xfe>
    30ee:	8e 01       	movw	r16, r28
    30f0:	0f 5f       	subi	r16, 0xFF	; 255
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	81 50       	subi	r24, 0x01	; 1
    30f6:	68 94       	set
    30f8:	ee 24       	eor	r14, r14
    30fa:	e1 f8       	bld	r14, 1
    30fc:	f1 2c       	mov	r15, r1
    30fe:	ec 0e       	add	r14, r28
    3100:	fd 1e       	adc	r15, r29
    3102:	e8 0e       	add	r14, r24
    3104:	f1 1c       	adc	r15, r1
    3106:	f8 01       	movw	r30, r16
    3108:	61 91       	ld	r22, Z+
    310a:	8f 01       	movw	r16, r30
    310c:	80 ea       	ldi	r24, 0xA0	; 160
    310e:	9a e0       	ldi	r25, 0x0A	; 10
    3110:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    3114:	0e 15       	cp	r16, r14
    3116:	1f 05       	cpc	r17, r15
    3118:	b1 f7       	brne	.-20     	; 0x3106 <disp_ans+0xea>
    311a:	c8 53       	subi	r28, 0x38	; 56
    311c:	df 4f       	sbci	r29, 0xFF	; 255
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	ff 90       	pop	r15
    312c:	ef 90       	pop	r14
    312e:	08 95       	ret

00003130 <main>:
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	ce 55       	subi	r28, 0x5E	; 94
    313a:	d1 09       	sbc	r29, r1
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <En_RC32M>
    3144:	e2 ea       	ldi	r30, 0xA2	; 162
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	87 60       	ori	r24, 0x07	; 7
    314c:	80 83       	st	Z, r24
    314e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <PORT_init>
    3152:	0e 94 17 10 	call	0x202e	; 0x202e <TimerD0_init>
    3156:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <TimerC0_init>
    315a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <USARTF0_init>
    315e:	0e 94 91 10 	call	0x2122	; 0x2122 <USARTF1_init>
    3162:	0e 94 4a 10 	call	0x2094	; 0x2094 <USARTE0_init>
    3166:	02 d8       	rcall	.-4092   	; 0x216c <ADCA_init>
    3168:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDInit>
    316c:	78 94       	sei
    316e:	88 eb       	ldi	r24, 0xB8	; 184
    3170:	9b e0       	ldi	r25, 0x0B	; 11
    3172:	a0 e0       	ldi	r26, 0x00	; 0
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	80 93 34 20 	sts	0x2034, r24
    317a:	90 93 35 20 	sts	0x2035, r25
    317e:	a0 93 36 20 	sts	0x2036, r26
    3182:	b0 93 37 20 	sts	0x2037, r27
    3186:	24 ef       	ldi	r18, 0xF4	; 244
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	20 93 06 24 	sts	0x2406, r18
    318e:	30 93 07 24 	sts	0x2407, r19
    3192:	80 93 38 20 	sts	0x2038, r24
    3196:	90 93 39 20 	sts	0x2039, r25
    319a:	a0 93 3a 20 	sts	0x203A, r26
    319e:	b0 93 3b 20 	sts	0x203B, r27
    31a2:	84 e6       	ldi	r24, 0x64	; 100
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	80 93 16 22 	sts	0x2216, r24
    31aa:	90 93 17 22 	sts	0x2217, r25
    31ae:	88 ee       	ldi	r24, 0xE8	; 232
    31b0:	93 e0       	ldi	r25, 0x03	; 3
    31b2:	a0 e0       	ldi	r26, 0x00	; 0
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	80 93 30 20 	sts	0x2030, r24
    31ba:	90 93 31 20 	sts	0x2031, r25
    31be:	a0 93 32 20 	sts	0x2032, r26
    31c2:	b0 93 33 20 	sts	0x2033, r27
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	80 93 34 24 	sts	0x2434, r24
    31ce:	90 93 35 24 	sts	0x2435, r25
    31d2:	80 ed       	ldi	r24, 0xD0	; 208
    31d4:	97 e0       	ldi	r25, 0x07	; 7
    31d6:	a0 e0       	ldi	r26, 0x00	; 0
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	80 93 2c 20 	sts	0x202C, r24
    31de:	90 93 2d 20 	sts	0x202D, r25
    31e2:	a0 93 2e 20 	sts	0x202E, r26
    31e6:	b0 93 2f 20 	sts	0x202F, r27
    31ea:	86 e9       	ldi	r24, 0x96	; 150
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	80 93 5e 22 	sts	0x225E, r24
    31f2:	90 93 5f 22 	sts	0x225F, r25
    31f6:	e8 e0       	ldi	r30, 0x08	; 8
    31f8:	f6 e0       	ldi	r31, 0x06	; 6
    31fa:	90 81       	ld	r25, Z
    31fc:	30 81       	ld	r19, Z
    31fe:	80 81       	ld	r24, Z
    3200:	40 81       	ld	r20, Z
    3202:	e3 e0       	ldi	r30, 0x03	; 3
    3204:	f0 e2       	ldi	r31, 0x20	; 32
    3206:	88 1f       	adc	r24, r24
    3208:	88 27       	eor	r24, r24
    320a:	88 1f       	adc	r24, r24
    320c:	28 2f       	mov	r18, r24
    320e:	22 0f       	add	r18, r18
    3210:	22 0f       	add	r18, r18
    3212:	96 fb       	bst	r25, 6
    3214:	88 27       	eor	r24, r24
    3216:	80 f9       	bld	r24, 0
    3218:	28 2b       	or	r18, r24
    321a:	34 fb       	bst	r19, 4
    321c:	88 24       	eor	r8, r8
    321e:	80 f8       	bld	r8, 0
    3220:	91 2c       	mov	r9, r1
    3222:	c4 01       	movw	r24, r8
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	28 2b       	or	r18, r24
    322a:	45 fb       	bst	r20, 5
    322c:	00 27       	eor	r16, r16
    322e:	00 f9       	bld	r16, 0
    3230:	10 e0       	ldi	r17, 0x00	; 0
    3232:	c8 01       	movw	r24, r16
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	88 0f       	add	r24, r24
    323a:	99 1f       	adc	r25, r25
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	82 2b       	or	r24, r18
    3242:	90 81       	ld	r25, Z
    3244:	89 0f       	add	r24, r25
    3246:	80 83       	st	Z, r24
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	e0 e8       	ldi	r30, 0x80	; 128
    324c:	f6 e0       	ldi	r31, 0x06	; 6
    324e:	86 83       	std	Z+6, r24	; 0x06
    3250:	0e 94 31 10 	call	0x2062	; 0x2062 <SPI_Init>
    3254:	23 e0       	ldi	r18, 0x03	; 3
    3256:	2a 95       	dec	r18
    3258:	f1 f7       	brne	.-4      	; 0x3256 <main+0x126>
    325a:	00 00       	nop
    325c:	87 ea       	ldi	r24, 0xA7	; 167
    325e:	91 e6       	ldi	r25, 0x61	; 97
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <main+0x130>
    3264:	00 c0       	rjmp	.+0      	; 0x3266 <main+0x136>
    3266:	00 00       	nop
    3268:	0e 94 de 24 	call	0x49bc	; 0x49bc <NRF24L01_L_Clear_Interrupts>
    326c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <NRF24L01_L_Flush_TX>
    3270:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <NRF24L01_L_Flush_RX>
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	e0 e8       	ldi	r30, 0x80	; 128
    3278:	f6 e0       	ldi	r31, 0x06	; 6
    327a:	86 83       	std	Z+6, r24	; 0x06
    327c:	e8 e0       	ldi	r30, 0x08	; 8
    327e:	f6 e0       	ldi	r31, 0x06	; 6
    3280:	20 81       	ld	r18, Z
    3282:	30 81       	ld	r19, Z
    3284:	80 81       	ld	r24, Z
    3286:	40 81       	ld	r20, Z
    3288:	88 1f       	adc	r24, r24
    328a:	88 27       	eor	r24, r24
    328c:	88 1f       	adc	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	26 fb       	bst	r18, 6
    329a:	ee 24       	eor	r14, r14
    329c:	e0 f8       	bld	r14, 0
    329e:	f1 2c       	mov	r15, r1
    32a0:	e8 2a       	or	r14, r24
    32a2:	f9 2a       	or	r15, r25
    32a4:	34 fb       	bst	r19, 4
    32a6:	cc 24       	eor	r12, r12
    32a8:	c0 f8       	bld	r12, 0
    32aa:	d1 2c       	mov	r13, r1
    32ac:	c6 01       	movw	r24, r12
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	e8 2a       	or	r14, r24
    32b4:	f9 2a       	or	r15, r25
    32b6:	45 fb       	bst	r20, 5
    32b8:	aa 24       	eor	r10, r10
    32ba:	a0 f8       	bld	r10, 0
    32bc:	b1 2c       	mov	r11, r1
    32be:	c5 01       	movw	r24, r10
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	8e 29       	or	r24, r14
    32ce:	9f 29       	or	r25, r15
    32d0:	03 97       	sbiw	r24, 0x03	; 3
    32d2:	84 f4       	brge	.+32     	; 0x32f4 <main+0x1c4>
    32d4:	0f 2e       	mov	r0, r31
    32d6:	f6 e0       	ldi	r31, 0x06	; 6
    32d8:	cf 2e       	mov	r12, r31
    32da:	f0 2d       	mov	r31, r0
    32dc:	68 94       	set
    32de:	ee 24       	eor	r14, r14
    32e0:	e5 f8       	bld	r14, 5
    32e2:	05 e0       	ldi	r16, 0x05	; 5
    32e4:	23 e0       	ldi	r18, 0x03	; 3
    32e6:	30 e2       	ldi	r19, 0x20	; 32
    32e8:	48 e0       	ldi	r20, 0x08	; 8
    32ea:	62 e3       	ldi	r22, 0x32	; 50
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	0e 94 65 25 	call	0x4aca	; 0x4aca <NRF24L01_L_Init_milad>
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <main+0x1e2>
    32f4:	0f 2e       	mov	r0, r31
    32f6:	f6 e0       	ldi	r31, 0x06	; 6
    32f8:	cf 2e       	mov	r12, r31
    32fa:	f0 2d       	mov	r31, r0
    32fc:	68 94       	set
    32fe:	ee 24       	eor	r14, r14
    3300:	e5 f8       	bld	r14, 5
    3302:	05 e0       	ldi	r16, 0x05	; 5
    3304:	23 e0       	ldi	r18, 0x03	; 3
    3306:	30 e2       	ldi	r19, 0x20	; 32
    3308:	48 e0       	ldi	r20, 0x08	; 8
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	0e 94 65 25 	call	0x4aca	; 0x4aca <NRF24L01_L_Init_milad>
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	8c e3       	ldi	r24, 0x3C	; 60
    3316:	0e 94 b5 24 	call	0x496a	; 0x496a <NRF24L01_L_WriteReg>
    331a:	66 e0       	ldi	r22, 0x06	; 6
    331c:	8d e3       	ldi	r24, 0x3D	; 61
    331e:	0e 94 b5 24 	call	0x496a	; 0x496a <NRF24L01_L_WriteReg>
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	e0 e8       	ldi	r30, 0x80	; 128
    3326:	f6 e0       	ldi	r31, 0x06	; 6
    3328:	85 83       	std	Z+5, r24	; 0x05
    332a:	9b e2       	ldi	r25, 0x2B	; 43
    332c:	9a 95       	dec	r25
    332e:	f1 f7       	brne	.-4      	; 0x332c <main+0x1fc>
    3330:	00 00       	nop
    3332:	a8 95       	wdr
    3334:	80 91 b6 20 	lds	r24, 0x20B6
    3338:	88 23       	and	r24, r24
    333a:	11 f4       	brne	.+4      	; 0x3340 <main+0x210>
    333c:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__stack+0x6df>
    3340:	ac ea       	ldi	r26, 0xAC	; 172
    3342:	b3 e2       	ldi	r27, 0x23	; 35
    3344:	0d 91       	ld	r16, X+
    3346:	1c 91       	ld	r17, X
    3348:	e0 eb       	ldi	r30, 0xB0	; 176
    334a:	f3 e2       	ldi	r31, 0x23	; 35
    334c:	00 83       	st	Z, r16
    334e:	11 83       	std	Z+1, r17	; 0x01
    3350:	a8 ea       	ldi	r26, 0xA8	; 168
    3352:	b3 e2       	ldi	r27, 0x23	; 35
    3354:	8d 91       	ld	r24, X+
    3356:	9c 91       	ld	r25, X
    3358:	9c 01       	movw	r18, r24
    335a:	20 1b       	sub	r18, r16
    335c:	31 0b       	sbc	r19, r17
    335e:	21 53       	subi	r18, 0x31	; 49
    3360:	38 4f       	sbci	r19, 0xF8	; 248
    3362:	2f 39       	cpi	r18, 0x9F	; 159
    3364:	3f 40       	sbci	r19, 0x0F	; 15
    3366:	20 f4       	brcc	.+8      	; 0x3370 <main+0x240>
    3368:	ec ea       	ldi	r30, 0xAC	; 172
    336a:	f3 e2       	ldi	r31, 0x23	; 35
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	b8 01       	movw	r22, r16
    3372:	88 27       	eor	r24, r24
    3374:	77 fd       	sbrc	r23, 7
    3376:	80 95       	com	r24
    3378:	98 2f       	mov	r25, r24
    337a:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    337e:	6b 01       	movw	r12, r22
    3380:	7c 01       	movw	r14, r24
    3382:	ac ea       	ldi	r26, 0xAC	; 172
    3384:	b3 e2       	ldi	r27, 0x23	; 35
    3386:	8d 91       	ld	r24, X+
    3388:	9c 91       	ld	r25, X
    338a:	80 1b       	sub	r24, r16
    338c:	91 0b       	sbc	r25, r17
    338e:	bc 01       	movw	r22, r24
    3390:	88 27       	eor	r24, r24
    3392:	77 fd       	sbrc	r23, 7
    3394:	80 95       	com	r24
    3396:	98 2f       	mov	r25, r24
    3398:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    339c:	2e ea       	ldi	r18, 0xAE	; 174
    339e:	37 e4       	ldi	r19, 0x47	; 71
    33a0:	41 ee       	ldi	r20, 0xE1	; 225
    33a2:	5d e3       	ldi	r21, 0x3D	; 61
    33a4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	c7 01       	movw	r24, r14
    33ae:	b6 01       	movw	r22, r12
    33b0:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    33b4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    33b8:	ec ea       	ldi	r30, 0xAC	; 172
    33ba:	f3 e2       	ldi	r31, 0x23	; 35
    33bc:	60 83       	st	Z, r22
    33be:	71 83       	std	Z+1, r23	; 0x01
    33c0:	ad e3       	ldi	r26, 0x3D	; 61
    33c2:	b4 e2       	ldi	r27, 0x24	; 36
    33c4:	0d 91       	ld	r16, X+
    33c6:	1c 91       	ld	r17, X
    33c8:	e1 e4       	ldi	r30, 0x41	; 65
    33ca:	f4 e2       	ldi	r31, 0x24	; 36
    33cc:	00 83       	st	Z, r16
    33ce:	11 83       	std	Z+1, r17	; 0x01
    33d0:	a9 e3       	ldi	r26, 0x39	; 57
    33d2:	b4 e2       	ldi	r27, 0x24	; 36
    33d4:	8d 91       	ld	r24, X+
    33d6:	9c 91       	ld	r25, X
    33d8:	9c 01       	movw	r18, r24
    33da:	20 1b       	sub	r18, r16
    33dc:	31 0b       	sbc	r19, r17
    33de:	21 53       	subi	r18, 0x31	; 49
    33e0:	38 4f       	sbci	r19, 0xF8	; 248
    33e2:	2f 39       	cpi	r18, 0x9F	; 159
    33e4:	3f 40       	sbci	r19, 0x0F	; 15
    33e6:	20 f4       	brcc	.+8      	; 0x33f0 <main+0x2c0>
    33e8:	ed e3       	ldi	r30, 0x3D	; 61
    33ea:	f4 e2       	ldi	r31, 0x24	; 36
    33ec:	80 83       	st	Z, r24
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	b8 01       	movw	r22, r16
    33f2:	88 27       	eor	r24, r24
    33f4:	77 fd       	sbrc	r23, 7
    33f6:	80 95       	com	r24
    33f8:	98 2f       	mov	r25, r24
    33fa:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    33fe:	6b 01       	movw	r12, r22
    3400:	7c 01       	movw	r14, r24
    3402:	ad e3       	ldi	r26, 0x3D	; 61
    3404:	b4 e2       	ldi	r27, 0x24	; 36
    3406:	8d 91       	ld	r24, X+
    3408:	9c 91       	ld	r25, X
    340a:	80 1b       	sub	r24, r16
    340c:	91 0b       	sbc	r25, r17
    340e:	bc 01       	movw	r22, r24
    3410:	88 27       	eor	r24, r24
    3412:	77 fd       	sbrc	r23, 7
    3414:	80 95       	com	r24
    3416:	98 2f       	mov	r25, r24
    3418:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    341c:	2e ea       	ldi	r18, 0xAE	; 174
    341e:	37 e4       	ldi	r19, 0x47	; 71
    3420:	41 ee       	ldi	r20, 0xE1	; 225
    3422:	5d e3       	ldi	r21, 0x3D	; 61
    3424:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3428:	9b 01       	movw	r18, r22
    342a:	ac 01       	movw	r20, r24
    342c:	c7 01       	movw	r24, r14
    342e:	b6 01       	movw	r22, r12
    3430:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    3434:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3438:	ed e3       	ldi	r30, 0x3D	; 61
    343a:	f4 e2       	ldi	r31, 0x24	; 36
    343c:	60 83       	st	Z, r22
    343e:	71 83       	std	Z+1, r23	; 0x01
    3440:	a9 e5       	ldi	r26, 0x59	; 89
    3442:	b4 e2       	ldi	r27, 0x24	; 36
    3444:	0d 91       	ld	r16, X+
    3446:	1c 91       	ld	r17, X
    3448:	ed e5       	ldi	r30, 0x5D	; 93
    344a:	f4 e2       	ldi	r31, 0x24	; 36
    344c:	00 83       	st	Z, r16
    344e:	11 83       	std	Z+1, r17	; 0x01
    3450:	a5 e5       	ldi	r26, 0x55	; 85
    3452:	b4 e2       	ldi	r27, 0x24	; 36
    3454:	8d 91       	ld	r24, X+
    3456:	9c 91       	ld	r25, X
    3458:	9c 01       	movw	r18, r24
    345a:	20 1b       	sub	r18, r16
    345c:	31 0b       	sbc	r19, r17
    345e:	21 53       	subi	r18, 0x31	; 49
    3460:	38 4f       	sbci	r19, 0xF8	; 248
    3462:	2f 39       	cpi	r18, 0x9F	; 159
    3464:	3f 40       	sbci	r19, 0x0F	; 15
    3466:	20 f4       	brcc	.+8      	; 0x3470 <main+0x340>
    3468:	e9 e5       	ldi	r30, 0x59	; 89
    346a:	f4 e2       	ldi	r31, 0x24	; 36
    346c:	80 83       	st	Z, r24
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	b8 01       	movw	r22, r16
    3472:	88 27       	eor	r24, r24
    3474:	77 fd       	sbrc	r23, 7
    3476:	80 95       	com	r24
    3478:	98 2f       	mov	r25, r24
    347a:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    347e:	6b 01       	movw	r12, r22
    3480:	7c 01       	movw	r14, r24
    3482:	a9 e5       	ldi	r26, 0x59	; 89
    3484:	b4 e2       	ldi	r27, 0x24	; 36
    3486:	8d 91       	ld	r24, X+
    3488:	9c 91       	ld	r25, X
    348a:	80 1b       	sub	r24, r16
    348c:	91 0b       	sbc	r25, r17
    348e:	bc 01       	movw	r22, r24
    3490:	88 27       	eor	r24, r24
    3492:	77 fd       	sbrc	r23, 7
    3494:	80 95       	com	r24
    3496:	98 2f       	mov	r25, r24
    3498:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    349c:	2e ea       	ldi	r18, 0xAE	; 174
    349e:	37 e4       	ldi	r19, 0x47	; 71
    34a0:	41 ee       	ldi	r20, 0xE1	; 225
    34a2:	5d e3       	ldi	r21, 0x3D	; 61
    34a4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    34a8:	9b 01       	movw	r18, r22
    34aa:	ac 01       	movw	r20, r24
    34ac:	c7 01       	movw	r24, r14
    34ae:	b6 01       	movw	r22, r12
    34b0:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    34b4:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f4 e2       	ldi	r31, 0x24	; 36
    34bc:	60 83       	st	Z, r22
    34be:	71 83       	std	Z+1, r23	; 0x01
    34c0:	a4 ee       	ldi	r26, 0xE4	; 228
    34c2:	b3 e2       	ldi	r27, 0x23	; 35
    34c4:	0d 91       	ld	r16, X+
    34c6:	1c 91       	ld	r17, X
    34c8:	e8 ee       	ldi	r30, 0xE8	; 232
    34ca:	f3 e2       	ldi	r31, 0x23	; 35
    34cc:	00 83       	st	Z, r16
    34ce:	11 83       	std	Z+1, r17	; 0x01
    34d0:	a0 ee       	ldi	r26, 0xE0	; 224
    34d2:	b3 e2       	ldi	r27, 0x23	; 35
    34d4:	8d 91       	ld	r24, X+
    34d6:	9c 91       	ld	r25, X
    34d8:	9c 01       	movw	r18, r24
    34da:	20 1b       	sub	r18, r16
    34dc:	31 0b       	sbc	r19, r17
    34de:	21 53       	subi	r18, 0x31	; 49
    34e0:	38 4f       	sbci	r19, 0xF8	; 248
    34e2:	2f 39       	cpi	r18, 0x9F	; 159
    34e4:	3f 40       	sbci	r19, 0x0F	; 15
    34e6:	20 f4       	brcc	.+8      	; 0x34f0 <main+0x3c0>
    34e8:	e4 ee       	ldi	r30, 0xE4	; 228
    34ea:	f3 e2       	ldi	r31, 0x23	; 35
    34ec:	80 83       	st	Z, r24
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	b8 01       	movw	r22, r16
    34f2:	88 27       	eor	r24, r24
    34f4:	77 fd       	sbrc	r23, 7
    34f6:	80 95       	com	r24
    34f8:	98 2f       	mov	r25, r24
    34fa:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    34fe:	6b 01       	movw	r12, r22
    3500:	7c 01       	movw	r14, r24
    3502:	a4 ee       	ldi	r26, 0xE4	; 228
    3504:	b3 e2       	ldi	r27, 0x23	; 35
    3506:	8d 91       	ld	r24, X+
    3508:	9c 91       	ld	r25, X
    350a:	80 1b       	sub	r24, r16
    350c:	91 0b       	sbc	r25, r17
    350e:	bc 01       	movw	r22, r24
    3510:	88 27       	eor	r24, r24
    3512:	77 fd       	sbrc	r23, 7
    3514:	80 95       	com	r24
    3516:	98 2f       	mov	r25, r24
    3518:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    351c:	2e ea       	ldi	r18, 0xAE	; 174
    351e:	37 e4       	ldi	r19, 0x47	; 71
    3520:	41 ee       	ldi	r20, 0xE1	; 225
    3522:	5d e3       	ldi	r21, 0x3D	; 61
    3524:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3528:	9b 01       	movw	r18, r22
    352a:	ac 01       	movw	r20, r24
    352c:	c7 01       	movw	r24, r14
    352e:	b6 01       	movw	r22, r12
    3530:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    3534:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3538:	e4 ee       	ldi	r30, 0xE4	; 228
    353a:	f3 e2       	ldi	r31, 0x23	; 35
    353c:	60 83       	st	Z, r22
    353e:	71 83       	std	Z+1, r23	; 0x01
    3540:	aa ea       	ldi	r26, 0xAA	; 170
    3542:	b3 e2       	ldi	r27, 0x23	; 35
    3544:	0d 91       	ld	r16, X+
    3546:	1c 91       	ld	r17, X
    3548:	00 93 ae 23 	sts	0x23AE, r16
    354c:	10 93 af 23 	sts	0x23AF, r17
    3550:	0f 2e       	mov	r0, r31
    3552:	f6 ea       	ldi	r31, 0xA6	; 166
    3554:	af 2e       	mov	r10, r31
    3556:	f3 e2       	ldi	r31, 0x23	; 35
    3558:	bf 2e       	mov	r11, r31
    355a:	f0 2d       	mov	r31, r0
    355c:	f5 01       	movw	r30, r10
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	bc 01       	movw	r22, r24
    3564:	88 27       	eor	r24, r24
    3566:	77 fd       	sbrc	r23, 7
    3568:	80 95       	com	r24
    356a:	98 2f       	mov	r25, r24
    356c:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 ef       	ldi	r20, 0xF0	; 240
    3576:	50 e4       	ldi	r21, 0x40	; 64
    3578:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    357c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3580:	6b 01       	movw	r12, r22
    3582:	7c 01       	movw	r14, r24
    3584:	d5 01       	movw	r26, r10
    3586:	1d 92       	st	X+, r1
    3588:	1c 92       	st	X, r1
    358a:	b8 01       	movw	r22, r16
    358c:	88 27       	eor	r24, r24
    358e:	77 fd       	sbrc	r23, 7
    3590:	80 95       	com	r24
    3592:	98 2f       	mov	r25, r24
    3594:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3598:	2b 01       	movw	r4, r22
    359a:	3c 01       	movw	r6, r24
    359c:	c0 1a       	sub	r12, r16
    359e:	d1 0a       	sbc	r13, r17
    35a0:	b6 01       	movw	r22, r12
    35a2:	88 27       	eor	r24, r24
    35a4:	77 fd       	sbrc	r23, 7
    35a6:	80 95       	com	r24
    35a8:	98 2f       	mov	r25, r24
    35aa:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    35ae:	2e ea       	ldi	r18, 0xAE	; 174
    35b0:	37 e4       	ldi	r19, 0x47	; 71
    35b2:	41 ee       	ldi	r20, 0xE1	; 225
    35b4:	5d e3       	ldi	r21, 0x3D	; 61
    35b6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    35ba:	9b 01       	movw	r18, r22
    35bc:	ac 01       	movw	r20, r24
    35be:	c3 01       	movw	r24, r6
    35c0:	b2 01       	movw	r22, r4
    35c2:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    35c6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    35ca:	ea ea       	ldi	r30, 0xAA	; 170
    35cc:	f3 e2       	ldi	r31, 0x23	; 35
    35ce:	60 83       	st	Z, r22
    35d0:	71 83       	std	Z+1, r23	; 0x01
    35d2:	0b e3       	ldi	r16, 0x3B	; 59
    35d4:	14 e2       	ldi	r17, 0x24	; 36
    35d6:	d8 01       	movw	r26, r16
    35d8:	8d 90       	ld	r8, X+
    35da:	9c 90       	ld	r9, X
    35dc:	80 92 3f 24 	sts	0x243F, r8
    35e0:	90 92 40 24 	sts	0x2440, r9
    35e4:	0f 2e       	mov	r0, r31
    35e6:	f7 e3       	ldi	r31, 0x37	; 55
    35e8:	ef 2e       	mov	r14, r31
    35ea:	f4 e2       	ldi	r31, 0x24	; 36
    35ec:	ff 2e       	mov	r15, r31
    35ee:	f0 2d       	mov	r31, r0
    35f0:	f7 01       	movw	r30, r14
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	bc 01       	movw	r22, r24
    35f8:	88 27       	eor	r24, r24
    35fa:	77 fd       	sbrc	r23, 7
    35fc:	80 95       	com	r24
    35fe:	98 2f       	mov	r25, r24
    3600:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	40 ef       	ldi	r20, 0xF0	; 240
    360a:	50 e4       	ldi	r21, 0x40	; 64
    360c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3610:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3614:	2b 01       	movw	r4, r22
    3616:	3c 01       	movw	r6, r24
    3618:	d7 01       	movw	r26, r14
    361a:	1d 92       	st	X+, r1
    361c:	1c 92       	st	X, r1
    361e:	b4 01       	movw	r22, r8
    3620:	88 27       	eor	r24, r24
    3622:	77 fd       	sbrc	r23, 7
    3624:	80 95       	com	r24
    3626:	98 2f       	mov	r25, r24
    3628:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    362c:	6b 01       	movw	r12, r22
    362e:	7c 01       	movw	r14, r24
    3630:	48 18       	sub	r4, r8
    3632:	59 08       	sbc	r5, r9
    3634:	b2 01       	movw	r22, r4
    3636:	88 27       	eor	r24, r24
    3638:	77 fd       	sbrc	r23, 7
    363a:	80 95       	com	r24
    363c:	98 2f       	mov	r25, r24
    363e:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3642:	2e ea       	ldi	r18, 0xAE	; 174
    3644:	37 e4       	ldi	r19, 0x47	; 71
    3646:	41 ee       	ldi	r20, 0xE1	; 225
    3648:	5d e3       	ldi	r21, 0x3D	; 61
    364a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	c7 01       	movw	r24, r14
    3654:	b6 01       	movw	r22, r12
    3656:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    365a:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    365e:	f8 01       	movw	r30, r16
    3660:	60 83       	st	Z, r22
    3662:	71 83       	std	Z+1, r23	; 0x01
    3664:	07 e5       	ldi	r16, 0x57	; 87
    3666:	14 e2       	ldi	r17, 0x24	; 36
    3668:	d8 01       	movw	r26, r16
    366a:	8d 90       	ld	r8, X+
    366c:	9c 90       	ld	r9, X
    366e:	80 92 5b 24 	sts	0x245B, r8
    3672:	90 92 5c 24 	sts	0x245C, r9
    3676:	0f 2e       	mov	r0, r31
    3678:	f3 e5       	ldi	r31, 0x53	; 83
    367a:	ef 2e       	mov	r14, r31
    367c:	f4 e2       	ldi	r31, 0x24	; 36
    367e:	ff 2e       	mov	r15, r31
    3680:	f0 2d       	mov	r31, r0
    3682:	f7 01       	movw	r30, r14
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	bc 01       	movw	r22, r24
    368a:	88 27       	eor	r24, r24
    368c:	77 fd       	sbrc	r23, 7
    368e:	80 95       	com	r24
    3690:	98 2f       	mov	r25, r24
    3692:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 ef       	ldi	r20, 0xF0	; 240
    369c:	50 e4       	ldi	r21, 0x40	; 64
    369e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    36a2:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    36a6:	2b 01       	movw	r4, r22
    36a8:	3c 01       	movw	r6, r24
    36aa:	d7 01       	movw	r26, r14
    36ac:	1d 92       	st	X+, r1
    36ae:	1c 92       	st	X, r1
    36b0:	b4 01       	movw	r22, r8
    36b2:	88 27       	eor	r24, r24
    36b4:	77 fd       	sbrc	r23, 7
    36b6:	80 95       	com	r24
    36b8:	98 2f       	mov	r25, r24
    36ba:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    36be:	6b 01       	movw	r12, r22
    36c0:	7c 01       	movw	r14, r24
    36c2:	48 18       	sub	r4, r8
    36c4:	59 08       	sbc	r5, r9
    36c6:	b2 01       	movw	r22, r4
    36c8:	88 27       	eor	r24, r24
    36ca:	77 fd       	sbrc	r23, 7
    36cc:	80 95       	com	r24
    36ce:	98 2f       	mov	r25, r24
    36d0:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    36d4:	2e ea       	ldi	r18, 0xAE	; 174
    36d6:	37 e4       	ldi	r19, 0x47	; 71
    36d8:	41 ee       	ldi	r20, 0xE1	; 225
    36da:	5d e3       	ldi	r21, 0x3D	; 61
    36dc:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    36e0:	9b 01       	movw	r18, r22
    36e2:	ac 01       	movw	r20, r24
    36e4:	c7 01       	movw	r24, r14
    36e6:	b6 01       	movw	r22, r12
    36e8:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    36ec:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    36f0:	f8 01       	movw	r30, r16
    36f2:	60 83       	st	Z, r22
    36f4:	71 83       	std	Z+1, r23	; 0x01
    36f6:	02 ee       	ldi	r16, 0xE2	; 226
    36f8:	13 e2       	ldi	r17, 0x23	; 35
    36fa:	d8 01       	movw	r26, r16
    36fc:	8d 90       	ld	r8, X+
    36fe:	9c 90       	ld	r9, X
    3700:	80 92 e6 23 	sts	0x23E6, r8
    3704:	90 92 e7 23 	sts	0x23E7, r9
    3708:	0f 2e       	mov	r0, r31
    370a:	fe ed       	ldi	r31, 0xDE	; 222
    370c:	ef 2e       	mov	r14, r31
    370e:	f3 e2       	ldi	r31, 0x23	; 35
    3710:	ff 2e       	mov	r15, r31
    3712:	f0 2d       	mov	r31, r0
    3714:	f7 01       	movw	r30, r14
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	bc 01       	movw	r22, r24
    371c:	88 27       	eor	r24, r24
    371e:	77 fd       	sbrc	r23, 7
    3720:	80 95       	com	r24
    3722:	98 2f       	mov	r25, r24
    3724:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 ef       	ldi	r20, 0xF0	; 240
    372e:	50 e4       	ldi	r21, 0x40	; 64
    3730:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3734:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3738:	2b 01       	movw	r4, r22
    373a:	3c 01       	movw	r6, r24
    373c:	d7 01       	movw	r26, r14
    373e:	1d 92       	st	X+, r1
    3740:	1c 92       	st	X, r1
    3742:	b4 01       	movw	r22, r8
    3744:	88 27       	eor	r24, r24
    3746:	77 fd       	sbrc	r23, 7
    3748:	80 95       	com	r24
    374a:	98 2f       	mov	r25, r24
    374c:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3750:	6b 01       	movw	r12, r22
    3752:	7c 01       	movw	r14, r24
    3754:	48 18       	sub	r4, r8
    3756:	59 08       	sbc	r5, r9
    3758:	b2 01       	movw	r22, r4
    375a:	88 27       	eor	r24, r24
    375c:	77 fd       	sbrc	r23, 7
    375e:	80 95       	com	r24
    3760:	98 2f       	mov	r25, r24
    3762:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3766:	2e ea       	ldi	r18, 0xAE	; 174
    3768:	37 e4       	ldi	r19, 0x47	; 71
    376a:	41 ee       	ldi	r20, 0xE1	; 225
    376c:	5d e3       	ldi	r21, 0x3D	; 61
    376e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3772:	9b 01       	movw	r18, r22
    3774:	ac 01       	movw	r20, r24
    3776:	c7 01       	movw	r24, r14
    3778:	b6 01       	movw	r22, r12
    377a:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    377e:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3782:	f8 01       	movw	r30, r16
    3784:	60 83       	st	Z, r22
    3786:	71 83       	std	Z+1, r23	; 0x01
    3788:	49 dc       	rcall	.-1902   	; 0x301c <disp_ans>
    378a:	0f 2e       	mov	r0, r31
    378c:	f8 e0       	ldi	r31, 0x08	; 8
    378e:	8f 2e       	mov	r8, r31
    3790:	f6 e0       	ldi	r31, 0x06	; 6
    3792:	9f 2e       	mov	r9, r31
    3794:	f0 2d       	mov	r31, r0
    3796:	d4 01       	movw	r26, r8
    3798:	9c 91       	ld	r25, X
    379a:	8c 91       	ld	r24, X
    379c:	2c 91       	ld	r18, X
    379e:	4c 91       	ld	r20, X
    37a0:	22 1f       	adc	r18, r18
    37a2:	22 27       	eor	r18, r18
    37a4:	22 1f       	adc	r18, r18
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	22 0f       	add	r18, r18
    37aa:	33 1f       	adc	r19, r19
    37ac:	22 0f       	add	r18, r18
    37ae:	33 1f       	adc	r19, r19
    37b0:	96 fb       	bst	r25, 6
    37b2:	99 27       	eor	r25, r25
    37b4:	90 f9       	bld	r25, 0
    37b6:	99 87       	std	Y+9, r25	; 0x09
    37b8:	1a 86       	std	Y+10, r1	; 0x0a
    37ba:	e9 85       	ldd	r30, Y+9	; 0x09
    37bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    37be:	2e 2b       	or	r18, r30
    37c0:	3f 2b       	or	r19, r31
    37c2:	82 95       	swap	r24
    37c4:	81 70       	andi	r24, 0x01	; 1
    37c6:	8b 87       	std	Y+11, r24	; 0x0b
    37c8:	1c 86       	std	Y+12, r1	; 0x0c
    37ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    37cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	28 2b       	or	r18, r24
    37d4:	39 2b       	or	r19, r25
    37d6:	45 fb       	bst	r20, 5
    37d8:	44 27       	eor	r20, r20
    37da:	40 f9       	bld	r20, 0
    37dc:	4d 87       	std	Y+13, r20	; 0x0d
    37de:	1e 86       	std	Y+14, r1	; 0x0e
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	88 0f       	add	r24, r24
    37ea:	99 1f       	adc	r25, r25
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	28 2b       	or	r18, r24
    37f2:	39 2b       	or	r19, r25
    37f4:	17 e1       	ldi	r17, 0x17	; 23
    37f6:	12 9f       	mul	r17, r18
    37f8:	c0 01       	movw	r24, r0
    37fa:	13 9f       	mul	r17, r19
    37fc:	90 0d       	add	r25, r0
    37fe:	11 24       	eor	r1, r1
    3800:	fc 01       	movw	r30, r24
    3802:	e2 53       	subi	r30, 0x32	; 50
    3804:	ff 4d       	sbci	r31, 0xDF	; 223
    3806:	64 89       	ldd	r22, Z+20	; 0x14
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__floatunsisf>
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	48 ec       	ldi	r20, 0xC8	; 200
    3818:	52 e4       	ldi	r21, 0x42	; 66
    381a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__divsf3>
    381e:	69 83       	std	Y+1, r22	; 0x01
    3820:	7a 83       	std	Y+2, r23	; 0x02
    3822:	8b 83       	std	Y+3, r24	; 0x03
    3824:	9c 83       	std	Y+4, r25	; 0x04
    3826:	60 93 6b 24 	sts	0x246B, r22
    382a:	70 93 6c 24 	sts	0x246C, r23
    382e:	80 93 6d 24 	sts	0x246D, r24
    3832:	90 93 6e 24 	sts	0x246E, r25
    3836:	d4 01       	movw	r26, r8
    3838:	9c 91       	ld	r25, X
    383a:	8c 91       	ld	r24, X
    383c:	2c 91       	ld	r18, X
    383e:	4c 91       	ld	r20, X
    3840:	22 1f       	adc	r18, r18
    3842:	22 27       	eor	r18, r18
    3844:	22 1f       	adc	r18, r18
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	22 0f       	add	r18, r18
    384a:	33 1f       	adc	r19, r19
    384c:	22 0f       	add	r18, r18
    384e:	33 1f       	adc	r19, r19
    3850:	96 fb       	bst	r25, 6
    3852:	99 27       	eor	r25, r25
    3854:	90 f9       	bld	r25, 0
    3856:	9f 87       	std	Y+15, r25	; 0x0f
    3858:	18 8a       	std	Y+16, r1	; 0x10
    385a:	ef 85       	ldd	r30, Y+15	; 0x0f
    385c:	f8 89       	ldd	r31, Y+16	; 0x10
    385e:	2e 2b       	or	r18, r30
    3860:	3f 2b       	or	r19, r31
    3862:	82 95       	swap	r24
    3864:	81 70       	andi	r24, 0x01	; 1
    3866:	89 8b       	std	Y+17, r24	; 0x11
    3868:	1a 8a       	std	Y+18, r1	; 0x12
    386a:	89 89       	ldd	r24, Y+17	; 0x11
    386c:	9a 89       	ldd	r25, Y+18	; 0x12
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	28 2b       	or	r18, r24
    3874:	39 2b       	or	r19, r25
    3876:	45 fb       	bst	r20, 5
    3878:	44 27       	eor	r20, r20
    387a:	40 f9       	bld	r20, 0
    387c:	4b 8b       	std	Y+19, r20	; 0x13
    387e:	1c 8a       	std	Y+20, r1	; 0x14
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	88 0f       	add	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	28 2b       	or	r18, r24
    3892:	39 2b       	or	r19, r25
    3894:	12 9f       	mul	r17, r18
    3896:	c0 01       	movw	r24, r0
    3898:	13 9f       	mul	r17, r19
    389a:	90 0d       	add	r25, r0
    389c:	11 24       	eor	r1, r1
    389e:	fc 01       	movw	r30, r24
    38a0:	e2 53       	subi	r30, 0x32	; 50
    38a2:	ff 4d       	sbci	r31, 0xDF	; 223
    38a4:	65 89       	ldd	r22, Z+21	; 0x15
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__floatunsisf>
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	48 ec       	ldi	r20, 0xC8	; 200
    38b6:	52 e4       	ldi	r21, 0x42	; 66
    38b8:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__divsf3>
    38bc:	6b 01       	movw	r12, r22
    38be:	7c 01       	movw	r14, r24
    38c0:	60 93 f5 23 	sts	0x23F5, r22
    38c4:	70 93 f6 23 	sts	0x23F6, r23
    38c8:	80 93 f7 23 	sts	0x23F7, r24
    38cc:	90 93 f8 23 	sts	0x23F8, r25
    38d0:	d4 01       	movw	r26, r8
    38d2:	9c 91       	ld	r25, X
    38d4:	8c 91       	ld	r24, X
    38d6:	2c 91       	ld	r18, X
    38d8:	4c 91       	ld	r20, X
    38da:	22 1f       	adc	r18, r18
    38dc:	22 27       	eor	r18, r18
    38de:	22 1f       	adc	r18, r18
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	22 0f       	add	r18, r18
    38e4:	33 1f       	adc	r19, r19
    38e6:	22 0f       	add	r18, r18
    38e8:	33 1f       	adc	r19, r19
    38ea:	96 fb       	bst	r25, 6
    38ec:	99 27       	eor	r25, r25
    38ee:	90 f9       	bld	r25, 0
    38f0:	9d 8b       	std	Y+21, r25	; 0x15
    38f2:	1e 8a       	std	Y+22, r1	; 0x16
    38f4:	ed 89       	ldd	r30, Y+21	; 0x15
    38f6:	fe 89       	ldd	r31, Y+22	; 0x16
    38f8:	2e 2b       	or	r18, r30
    38fa:	3f 2b       	or	r19, r31
    38fc:	82 95       	swap	r24
    38fe:	81 70       	andi	r24, 0x01	; 1
    3900:	8f 8b       	std	Y+23, r24	; 0x17
    3902:	18 8e       	std	Y+24, r1	; 0x18
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	28 2b       	or	r18, r24
    390e:	39 2b       	or	r19, r25
    3910:	45 fb       	bst	r20, 5
    3912:	44 27       	eor	r20, r20
    3914:	40 f9       	bld	r20, 0
    3916:	49 8f       	std	Y+25, r20	; 0x19
    3918:	1a 8e       	std	Y+26, r1	; 0x1a
    391a:	89 8d       	ldd	r24, Y+25	; 0x19
    391c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	28 2b       	or	r18, r24
    392c:	39 2b       	or	r19, r25
    392e:	12 9f       	mul	r17, r18
    3930:	c0 01       	movw	r24, r0
    3932:	13 9f       	mul	r17, r19
    3934:	90 0d       	add	r25, r0
    3936:	11 24       	eor	r1, r1
    3938:	fc 01       	movw	r30, r24
    393a:	e2 53       	subi	r30, 0x32	; 50
    393c:	ff 4d       	sbci	r31, 0xDF	; 223
    393e:	66 89       	ldd	r22, Z+22	; 0x16
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__floatunsisf>
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	48 ec       	ldi	r20, 0xC8	; 200
    3950:	52 e4       	ldi	r21, 0x42	; 66
    3952:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__divsf3>
    3956:	6d 83       	std	Y+5, r22	; 0x05
    3958:	7e 83       	std	Y+6, r23	; 0x06
    395a:	8f 83       	std	Y+7, r24	; 0x07
    395c:	98 87       	std	Y+8, r25	; 0x08
    395e:	60 93 e4 21 	sts	0x21E4, r22
    3962:	70 93 e5 21 	sts	0x21E5, r23
    3966:	80 93 e6 21 	sts	0x21E6, r24
    396a:	90 93 e7 21 	sts	0x21E7, r25
    396e:	10 92 b6 20 	sts	0x20B6, r1
    3972:	d4 01       	movw	r26, r8
    3974:	6c 91       	ld	r22, X
    3976:	5c 91       	ld	r21, X
    3978:	7c 91       	ld	r23, X
    397a:	4c 91       	ld	r20, X
    397c:	9c 91       	ld	r25, X
    397e:	8c 91       	ld	r24, X
    3980:	2c 91       	ld	r18, X
    3982:	ec 91       	ld	r30, X
    3984:	22 1f       	adc	r18, r18
    3986:	22 27       	eor	r18, r18
    3988:	22 1f       	adc	r18, r18
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	22 0f       	add	r18, r18
    398e:	33 1f       	adc	r19, r19
    3990:	22 0f       	add	r18, r18
    3992:	33 1f       	adc	r19, r19
    3994:	96 fb       	bst	r25, 6
    3996:	99 27       	eor	r25, r25
    3998:	90 f9       	bld	r25, 0
    399a:	9b 8f       	std	Y+27, r25	; 0x1b
    399c:	1c 8e       	std	Y+28, r1	; 0x1c
    399e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    39a0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    39a2:	2a 2b       	or	r18, r26
    39a4:	3b 2b       	or	r19, r27
    39a6:	82 95       	swap	r24
    39a8:	81 70       	andi	r24, 0x01	; 1
    39aa:	8d 8f       	std	Y+29, r24	; 0x1d
    39ac:	1e 8e       	std	Y+30, r1	; 0x1e
    39ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	28 2b       	or	r18, r24
    39b8:	39 2b       	or	r19, r25
    39ba:	e5 fb       	bst	r30, 5
    39bc:	ee 27       	eor	r30, r30
    39be:	e0 f9       	bld	r30, 0
    39c0:	ef 8f       	std	Y+31, r30	; 0x1f
    39c2:	18 a2       	std	Y+32, r1	; 0x20
    39c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39c6:	98 a1       	ldd	r25, Y+32	; 0x20
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	28 2b       	or	r18, r24
    39d6:	39 2b       	or	r19, r25
    39d8:	12 9f       	mul	r17, r18
    39da:	c0 01       	movw	r24, r0
    39dc:	13 9f       	mul	r17, r19
    39de:	90 0d       	add	r25, r0
    39e0:	11 24       	eor	r1, r1
    39e2:	fc 01       	movw	r30, r24
    39e4:	e2 53       	subi	r30, 0x32	; 50
    39e6:	ff 4d       	sbci	r31, 0xDF	; 223
    39e8:	b1 81       	ldd	r27, Z+1	; 0x01
    39ea:	ba a3       	std	Y+34, r27	; 0x22
    39ec:	19 a2       	std	Y+33, r1	; 0x21
    39ee:	77 1f       	adc	r23, r23
    39f0:	77 27       	eor	r23, r23
    39f2:	77 1f       	adc	r23, r23
    39f4:	87 2f       	mov	r24, r23
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	66 fb       	bst	r22, 6
    3a02:	66 27       	eor	r22, r22
    3a04:	60 f9       	bld	r22, 0
    3a06:	6b a3       	std	Y+35, r22	; 0x23
    3a08:	1c a2       	std	Y+36, r1	; 0x24
    3a0a:	eb a1       	ldd	r30, Y+35	; 0x23
    3a0c:	fc a1       	ldd	r31, Y+36	; 0x24
    3a0e:	8e 2b       	or	r24, r30
    3a10:	9f 2b       	or	r25, r31
    3a12:	52 95       	swap	r21
    3a14:	51 70       	andi	r21, 0x01	; 1
    3a16:	5d a3       	std	Y+37, r21	; 0x25
    3a18:	1e a2       	std	Y+38, r1	; 0x26
    3a1a:	2d a1       	ldd	r18, Y+37	; 0x25
    3a1c:	3e a1       	ldd	r19, Y+38	; 0x26
    3a1e:	22 0f       	add	r18, r18
    3a20:	33 1f       	adc	r19, r19
    3a22:	82 2b       	or	r24, r18
    3a24:	93 2b       	or	r25, r19
    3a26:	45 fb       	bst	r20, 5
    3a28:	44 27       	eor	r20, r20
    3a2a:	40 f9       	bld	r20, 0
    3a2c:	4f a3       	std	Y+39, r20	; 0x27
    3a2e:	18 a6       	std	Y+40, r1	; 0x28
    3a30:	2f a1       	ldd	r18, Y+39	; 0x27
    3a32:	38 a5       	ldd	r19, Y+40	; 0x28
    3a34:	22 0f       	add	r18, r18
    3a36:	33 1f       	adc	r19, r19
    3a38:	22 0f       	add	r18, r18
    3a3a:	33 1f       	adc	r19, r19
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	82 2b       	or	r24, r18
    3a42:	93 2b       	or	r25, r19
    3a44:	18 9f       	mul	r17, r24
    3a46:	90 01       	movw	r18, r0
    3a48:	19 9f       	mul	r17, r25
    3a4a:	30 0d       	add	r19, r0
    3a4c:	11 24       	eor	r1, r1
    3a4e:	f9 01       	movw	r30, r18
    3a50:	e2 53       	subi	r30, 0x32	; 50
    3a52:	ff 4d       	sbci	r31, 0xDF	; 223
    3a54:	23 80       	ldd	r2, Z+3	; 0x03
    3a56:	34 80       	ldd	r3, Z+4	; 0x04
    3a58:	29 a1       	ldd	r18, Y+33	; 0x21
    3a5a:	3a a1       	ldd	r19, Y+34	; 0x22
    3a5c:	22 2a       	or	r2, r18
    3a5e:	33 2a       	or	r3, r19
    3a60:	ac ea       	ldi	r26, 0xAC	; 172
    3a62:	b3 e2       	ldi	r27, 0x23	; 35
    3a64:	8d 91       	ld	r24, X+
    3a66:	9c 91       	ld	r25, X
    3a68:	28 1a       	sub	r2, r24
    3a6a:	39 0a       	sbc	r3, r25
    3a6c:	f5 01       	movw	r30, r10
    3a6e:	84 85       	ldd	r24, Z+12	; 0x0c
    3a70:	95 85       	ldd	r25, Z+13	; 0x0d
    3a72:	91 01       	movw	r18, r2
    3a74:	28 1b       	sub	r18, r24
    3a76:	39 0b       	sbc	r19, r25
    3a78:	c9 01       	movw	r24, r18
    3a7a:	22 0f       	add	r18, r18
    3a7c:	33 1f       	adc	r19, r19
    3a7e:	8c 01       	movw	r16, r24
    3a80:	00 0f       	add	r16, r16
    3a82:	11 1f       	adc	r17, r17
    3a84:	00 0f       	add	r16, r16
    3a86:	11 1f       	adc	r17, r17
    3a88:	00 0f       	add	r16, r16
    3a8a:	11 1f       	adc	r17, r17
    3a8c:	02 0f       	add	r16, r18
    3a8e:	13 1f       	adc	r17, r19
    3a90:	c8 01       	movw	r24, r16
    3a92:	c1 96       	adiw	r24, 0x31	; 49
    3a94:	83 36       	cpi	r24, 0x63	; 99
    3a96:	91 05       	cpc	r25, r1
    3a98:	48 f0       	brcs	.+18     	; 0x3aac <main+0x97c>
    3a9a:	01 36       	cpi	r16, 0x61	; 97
    3a9c:	39 e0       	ldi	r19, 0x09	; 9
    3a9e:	13 07       	cpc	r17, r19
    3aa0:	44 f4       	brge	.+16     	; 0x3ab2 <main+0x982>
    3aa2:	00 3a       	cpi	r16, 0xA0	; 160
    3aa4:	46 ef       	ldi	r20, 0xF6	; 246
    3aa6:	14 07       	cpc	r17, r20
    3aa8:	3c f0       	brlt	.+14     	; 0x3ab8 <main+0x988>
    3aaa:	08 c0       	rjmp	.+16     	; 0x3abc <main+0x98c>
    3aac:	00 e0       	ldi	r16, 0x00	; 0
    3aae:	10 e0       	ldi	r17, 0x00	; 0
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <main+0x98c>
    3ab2:	00 e0       	ldi	r16, 0x00	; 0
    3ab4:	10 e0       	ldi	r17, 0x00	; 0
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <main+0x98c>
    3ab8:	00 e0       	ldi	r16, 0x00	; 0
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	b1 01       	movw	r22, r2
    3abe:	88 27       	eor	r24, r24
    3ac0:	77 fd       	sbrc	r23, 7
    3ac2:	80 95       	com	r24
    3ac4:	98 2f       	mov	r25, r24
    3ac6:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3aca:	4b 01       	movw	r8, r22
    3acc:	5c 01       	movw	r10, r24
    3ace:	9b 01       	movw	r18, r22
    3ad0:	ac 01       	movw	r20, r24
    3ad2:	69 81       	ldd	r22, Y+1	; 0x01
    3ad4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ada:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3ade:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3ae2:	2b 01       	movw	r4, r22
    3ae4:	3c 01       	movw	r6, r24
    3ae6:	a5 01       	movw	r20, r10
    3ae8:	94 01       	movw	r18, r8
    3aea:	c7 01       	movw	r24, r14
    3aec:	b6 01       	movw	r22, r12
    3aee:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3af2:	2a e0       	ldi	r18, 0x0A	; 10
    3af4:	37 ed       	ldi	r19, 0xD7	; 215
    3af6:	43 ea       	ldi	r20, 0xA3	; 163
    3af8:	5c e3       	ldi	r21, 0x3C	; 60
    3afa:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3afe:	20 91 b6 23 	lds	r18, 0x23B6
    3b02:	30 91 b7 23 	lds	r19, 0x23B7
    3b06:	40 91 b8 23 	lds	r20, 0x23B8
    3b0a:	50 91 b9 23 	lds	r21, 0x23B9
    3b0e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    3b12:	4b 01       	movw	r8, r22
    3b14:	5c 01       	movw	r10, r24
    3b16:	60 93 b6 23 	sts	0x23B6, r22
    3b1a:	70 93 b7 23 	sts	0x23B7, r23
    3b1e:	80 93 b8 23 	sts	0x23B8, r24
    3b22:	90 93 b9 23 	sts	0x23B9, r25
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 ea       	ldi	r20, 0xA0	; 160
    3b2c:	52 e4       	ldi	r21, 0x42	; 66
    3b2e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__gesf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	6c f4       	brge	.+26     	; 0x3b50 <main+0xa20>
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	a0 ea       	ldi	r26, 0xA0	; 160
    3b3c:	b2 e4       	ldi	r27, 0x42	; 66
    3b3e:	80 93 b6 23 	sts	0x23B6, r24
    3b42:	90 93 b7 23 	sts	0x23B7, r25
    3b46:	a0 93 b8 23 	sts	0x23B8, r26
    3b4a:	b0 93 b9 23 	sts	0x23B9, r27
    3b4e:	16 c0       	rjmp	.+44     	; 0x3b7c <main+0xa4c>
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 ea       	ldi	r20, 0xA0	; 160
    3b56:	52 ec       	ldi	r21, 0xC2	; 194
    3b58:	c5 01       	movw	r24, r10
    3b5a:	b4 01       	movw	r22, r8
    3b5c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__cmpsf2>
    3b60:	88 23       	and	r24, r24
    3b62:	64 f4       	brge	.+24     	; 0x3b7c <main+0xa4c>
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	a0 ea       	ldi	r26, 0xA0	; 160
    3b6a:	b2 ec       	ldi	r27, 0xC2	; 194
    3b6c:	80 93 b6 23 	sts	0x23B6, r24
    3b70:	90 93 b7 23 	sts	0x23B7, r25
    3b74:	a0 93 b8 23 	sts	0x23B8, r26
    3b78:	b0 93 b9 23 	sts	0x23B9, r27
    3b7c:	c2 01       	movw	r24, r4
    3b7e:	80 38       	cpi	r24, 0x80	; 128
    3b80:	91 05       	cpc	r25, r1
    3b82:	14 f0       	brlt	.+4      	; 0x3b88 <main+0xa58>
    3b84:	8f e7       	ldi	r24, 0x7F	; 127
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	81 38       	cpi	r24, 0x81	; 129
    3b8a:	5f ef       	ldi	r21, 0xFF	; 255
    3b8c:	95 07       	cpc	r25, r21
    3b8e:	14 f4       	brge	.+4      	; 0x3b94 <main+0xa64>
    3b90:	81 e8       	ldi	r24, 0x81	; 129
    3b92:	9f ef       	ldi	r25, 0xFF	; 255
    3b94:	bc 01       	movw	r22, r24
    3b96:	88 27       	eor	r24, r24
    3b98:	77 fd       	sbrc	r23, 7
    3b9a:	80 95       	com	r24
    3b9c:	98 2f       	mov	r25, r24
    3b9e:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3ba2:	20 91 b6 23 	lds	r18, 0x23B6
    3ba6:	30 91 b7 23 	lds	r19, 0x23B7
    3baa:	40 91 b8 23 	lds	r20, 0x23B8
    3bae:	50 91 b9 23 	lds	r21, 0x23B9
    3bb2:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__addsf3>
    3bb6:	4b 01       	movw	r8, r22
    3bb8:	5c 01       	movw	r10, r24
    3bba:	b8 01       	movw	r22, r16
    3bbc:	88 27       	eor	r24, r24
    3bbe:	77 fd       	sbrc	r23, 7
    3bc0:	80 95       	com	r24
    3bc2:	98 2f       	mov	r25, r24
    3bc4:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3bc8:	9b 01       	movw	r18, r22
    3bca:	ac 01       	movw	r20, r24
    3bcc:	6d 81       	ldd	r22, Y+5	; 0x05
    3bce:	7e 81       	ldd	r23, Y+6	; 0x06
    3bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd2:	98 85       	ldd	r25, Y+8	; 0x08
    3bd4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3bd8:	9b 01       	movw	r18, r22
    3bda:	ac 01       	movw	r20, r24
    3bdc:	c5 01       	movw	r24, r10
    3bde:	b4 01       	movw	r22, r8
    3be0:	f3 d7       	rcall	.+4070   	; 0x4bc8 <__addsf3>
    3be2:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <__fixsfsi>
    3be6:	cb 01       	movw	r24, r22
    3be8:	60 38       	cpi	r22, 0x80	; 128
    3bea:	71 05       	cpc	r23, r1
    3bec:	14 f0       	brlt	.+4      	; 0x3bf2 <main+0xac2>
    3bee:	8f e7       	ldi	r24, 0x7F	; 127
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	e6 ea       	ldi	r30, 0xA6	; 166
    3bf4:	f3 e2       	ldi	r31, 0x23	; 35
    3bf6:	24 86       	std	Z+12, r2	; 0x0c
    3bf8:	35 86       	std	Z+13, r3	; 0x0d
    3bfa:	06 87       	std	Z+14, r16	; 0x0e
    3bfc:	17 87       	std	Z+15, r17	; 0x0f
    3bfe:	81 38       	cpi	r24, 0x81	; 129
    3c00:	6f ef       	ldi	r22, 0xFF	; 255
    3c02:	96 07       	cpc	r25, r22
    3c04:	14 f4       	brge	.+4      	; 0x3c0a <main+0xada>
    3c06:	81 e8       	ldi	r24, 0x81	; 129
    3c08:	9f ef       	ldi	r25, 0xFF	; 255
    3c0a:	80 93 ba 23 	sts	0x23BA, r24
    3c0e:	e8 e0       	ldi	r30, 0x08	; 8
    3c10:	f6 e0       	ldi	r31, 0x06	; 6
    3c12:	60 81       	ld	r22, Z
    3c14:	50 81       	ld	r21, Z
    3c16:	70 81       	ld	r23, Z
    3c18:	40 81       	ld	r20, Z
    3c1a:	90 81       	ld	r25, Z
    3c1c:	80 81       	ld	r24, Z
    3c1e:	20 81       	ld	r18, Z
    3c20:	e0 81       	ld	r30, Z
    3c22:	22 1f       	adc	r18, r18
    3c24:	22 27       	eor	r18, r18
    3c26:	22 1f       	adc	r18, r18
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	22 0f       	add	r18, r18
    3c2c:	33 1f       	adc	r19, r19
    3c2e:	22 0f       	add	r18, r18
    3c30:	33 1f       	adc	r19, r19
    3c32:	96 fb       	bst	r25, 6
    3c34:	99 27       	eor	r25, r25
    3c36:	90 f9       	bld	r25, 0
    3c38:	99 a7       	std	Y+41, r25	; 0x29
    3c3a:	1a a6       	std	Y+42, r1	; 0x2a
    3c3c:	a9 a5       	ldd	r26, Y+41	; 0x29
    3c3e:	ba a5       	ldd	r27, Y+42	; 0x2a
    3c40:	2a 2b       	or	r18, r26
    3c42:	3b 2b       	or	r19, r27
    3c44:	82 95       	swap	r24
    3c46:	81 70       	andi	r24, 0x01	; 1
    3c48:	8b a7       	std	Y+43, r24	; 0x2b
    3c4a:	1c a6       	std	Y+44, r1	; 0x2c
    3c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	28 2b       	or	r18, r24
    3c56:	39 2b       	or	r19, r25
    3c58:	e5 fb       	bst	r30, 5
    3c5a:	ee 27       	eor	r30, r30
    3c5c:	e0 f9       	bld	r30, 0
    3c5e:	ed a7       	std	Y+45, r30	; 0x2d
    3c60:	1e a6       	std	Y+46, r1	; 0x2e
    3c62:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c64:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c66:	88 0f       	add	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	88 0f       	add	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	28 2b       	or	r18, r24
    3c74:	39 2b       	or	r19, r25
    3c76:	f7 e1       	ldi	r31, 0x17	; 23
    3c78:	f2 9f       	mul	r31, r18
    3c7a:	c0 01       	movw	r24, r0
    3c7c:	f3 9f       	mul	r31, r19
    3c7e:	90 0d       	add	r25, r0
    3c80:	11 24       	eor	r1, r1
    3c82:	dc 01       	movw	r26, r24
    3c84:	a2 53       	subi	r26, 0x32	; 50
    3c86:	bf 4d       	sbci	r27, 0xDF	; 223
    3c88:	15 96       	adiw	r26, 0x05	; 5
    3c8a:	ec 91       	ld	r30, X
    3c8c:	e8 ab       	std	Y+48, r30	; 0x30
    3c8e:	1f a6       	std	Y+47, r1	; 0x2f
    3c90:	77 1f       	adc	r23, r23
    3c92:	77 27       	eor	r23, r23
    3c94:	77 1f       	adc	r23, r23
    3c96:	87 2f       	mov	r24, r23
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	66 fb       	bst	r22, 6
    3ca4:	66 27       	eor	r22, r22
    3ca6:	60 f9       	bld	r22, 0
    3ca8:	69 ab       	std	Y+49, r22	; 0x31
    3caa:	1a aa       	std	Y+50, r1	; 0x32
    3cac:	29 a9       	ldd	r18, Y+49	; 0x31
    3cae:	3a a9       	ldd	r19, Y+50	; 0x32
    3cb0:	82 2b       	or	r24, r18
    3cb2:	93 2b       	or	r25, r19
    3cb4:	52 95       	swap	r21
    3cb6:	51 70       	andi	r21, 0x01	; 1
    3cb8:	5b ab       	std	Y+51, r21	; 0x33
    3cba:	1c aa       	std	Y+52, r1	; 0x34
    3cbc:	2b a9       	ldd	r18, Y+51	; 0x33
    3cbe:	3c a9       	ldd	r19, Y+52	; 0x34
    3cc0:	22 0f       	add	r18, r18
    3cc2:	33 1f       	adc	r19, r19
    3cc4:	82 2b       	or	r24, r18
    3cc6:	93 2b       	or	r25, r19
    3cc8:	45 fb       	bst	r20, 5
    3cca:	44 27       	eor	r20, r20
    3ccc:	40 f9       	bld	r20, 0
    3cce:	4d ab       	std	Y+53, r20	; 0x35
    3cd0:	1e aa       	std	Y+54, r1	; 0x36
    3cd2:	2d a9       	ldd	r18, Y+53	; 0x35
    3cd4:	3e a9       	ldd	r19, Y+54	; 0x36
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	22 0f       	add	r18, r18
    3cdc:	33 1f       	adc	r19, r19
    3cde:	22 0f       	add	r18, r18
    3ce0:	33 1f       	adc	r19, r19
    3ce2:	82 2b       	or	r24, r18
    3ce4:	93 2b       	or	r25, r19
    3ce6:	f8 9f       	mul	r31, r24
    3ce8:	90 01       	movw	r18, r0
    3cea:	f9 9f       	mul	r31, r25
    3cec:	30 0d       	add	r19, r0
    3cee:	11 24       	eor	r1, r1
    3cf0:	f9 01       	movw	r30, r18
    3cf2:	e2 53       	subi	r30, 0x32	; 50
    3cf4:	ff 4d       	sbci	r31, 0xDF	; 223
    3cf6:	27 80       	ldd	r2, Z+7	; 0x07
    3cf8:	30 84       	ldd	r3, Z+8	; 0x08
    3cfa:	4f a5       	ldd	r20, Y+47	; 0x2f
    3cfc:	58 a9       	ldd	r21, Y+48	; 0x30
    3cfe:	24 2a       	or	r2, r20
    3d00:	35 2a       	or	r3, r21
    3d02:	ad e3       	ldi	r26, 0x3D	; 61
    3d04:	b4 e2       	ldi	r27, 0x24	; 36
    3d06:	8d 91       	ld	r24, X+
    3d08:	9c 91       	ld	r25, X
    3d0a:	28 1a       	sub	r2, r24
    3d0c:	39 0a       	sbc	r3, r25
    3d0e:	80 91 43 24 	lds	r24, 0x2443
    3d12:	90 91 44 24 	lds	r25, 0x2444
    3d16:	f1 01       	movw	r30, r2
    3d18:	e8 1b       	sub	r30, r24
    3d1a:	f9 0b       	sbc	r31, r25
    3d1c:	9f 01       	movw	r18, r30
    3d1e:	22 0f       	add	r18, r18
    3d20:	33 1f       	adc	r19, r19
    3d22:	8f 01       	movw	r16, r30
    3d24:	00 0f       	add	r16, r16
    3d26:	11 1f       	adc	r17, r17
    3d28:	00 0f       	add	r16, r16
    3d2a:	11 1f       	adc	r17, r17
    3d2c:	00 0f       	add	r16, r16
    3d2e:	11 1f       	adc	r17, r17
    3d30:	02 0f       	add	r16, r18
    3d32:	13 1f       	adc	r17, r19
    3d34:	c8 01       	movw	r24, r16
    3d36:	c1 96       	adiw	r24, 0x31	; 49
    3d38:	83 36       	cpi	r24, 0x63	; 99
    3d3a:	91 05       	cpc	r25, r1
    3d3c:	48 f0       	brcs	.+18     	; 0x3d50 <main+0xc20>
    3d3e:	01 36       	cpi	r16, 0x61	; 97
    3d40:	f9 e0       	ldi	r31, 0x09	; 9
    3d42:	1f 07       	cpc	r17, r31
    3d44:	44 f4       	brge	.+16     	; 0x3d56 <main+0xc26>
    3d46:	00 3a       	cpi	r16, 0xA0	; 160
    3d48:	26 ef       	ldi	r18, 0xF6	; 246
    3d4a:	12 07       	cpc	r17, r18
    3d4c:	3c f0       	brlt	.+14     	; 0x3d5c <main+0xc2c>
    3d4e:	08 c0       	rjmp	.+16     	; 0x3d60 <main+0xc30>
    3d50:	00 e0       	ldi	r16, 0x00	; 0
    3d52:	10 e0       	ldi	r17, 0x00	; 0
    3d54:	05 c0       	rjmp	.+10     	; 0x3d60 <main+0xc30>
    3d56:	00 e0       	ldi	r16, 0x00	; 0
    3d58:	10 e0       	ldi	r17, 0x00	; 0
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <main+0xc30>
    3d5c:	00 e0       	ldi	r16, 0x00	; 0
    3d5e:	10 e0       	ldi	r17, 0x00	; 0
    3d60:	b1 01       	movw	r22, r2
    3d62:	88 27       	eor	r24, r24
    3d64:	77 fd       	sbrc	r23, 7
    3d66:	80 95       	com	r24
    3d68:	98 2f       	mov	r25, r24
    3d6a:	0e 94 e7 26 	call	0x4dce	; 0x4dce <__floatsisf>
    3d6e:	4b 01       	movw	r8, r22
    3d70:	5c 01       	movw	r10, r24
    3d72:	9b 01       	movw	r18, r22
    3d74:	ac 01       	movw	r20, r24
    3d76:	69 81       	ldd	r22, Y+1	; 0x01
    3d78:	7a 81       	ldd	r23, Y+2	; 0x02
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3d82:	f2 d7       	rcall	.+4068   	; 0x4d68 <__fixsfsi>
    3d84:	2b 01       	movw	r4, r22
    3d86:	3c 01       	movw	r6, r24
    3d88:	a5 01       	movw	r20, r10
    3d8a:	94 01       	movw	r18, r8
    3d8c:	c7 01       	movw	r24, r14
    3d8e:	b6 01       	movw	r22, r12
    3d90:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3d94:	2a e0       	ldi	r18, 0x0A	; 10
    3d96:	37 ed       	ldi	r19, 0xD7	; 215
    3d98:	43 ea       	ldi	r20, 0xA3	; 163
    3d9a:	5c e3       	ldi	r21, 0x3C	; 60
    3d9c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3da0:	20 91 47 24 	lds	r18, 0x2447
    3da4:	30 91 48 24 	lds	r19, 0x2448
    3da8:	40 91 49 24 	lds	r20, 0x2449
    3dac:	50 91 4a 24 	lds	r21, 0x244A
    3db0:	0b d7       	rcall	.+3606   	; 0x4bc8 <__addsf3>
    3db2:	4b 01       	movw	r8, r22
    3db4:	5c 01       	movw	r10, r24
    3db6:	60 93 47 24 	sts	0x2447, r22
    3dba:	70 93 48 24 	sts	0x2448, r23
    3dbe:	80 93 49 24 	sts	0x2449, r24
    3dc2:	90 93 4a 24 	sts	0x244A, r25
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 ea       	ldi	r20, 0xA0	; 160
    3dcc:	52 e4       	ldi	r21, 0x42	; 66
    3dce:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__gesf2>
    3dd2:	18 16       	cp	r1, r24
    3dd4:	6c f4       	brge	.+26     	; 0x3df0 <main+0xcc0>
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 ea       	ldi	r26, 0xA0	; 160
    3ddc:	b2 e4       	ldi	r27, 0x42	; 66
    3dde:	80 93 47 24 	sts	0x2447, r24
    3de2:	90 93 48 24 	sts	0x2448, r25
    3de6:	a0 93 49 24 	sts	0x2449, r26
    3dea:	b0 93 4a 24 	sts	0x244A, r27
    3dee:	15 c0       	rjmp	.+42     	; 0x3e1a <main+0xcea>
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 ea       	ldi	r20, 0xA0	; 160
    3df6:	52 ec       	ldi	r21, 0xC2	; 194
    3df8:	c5 01       	movw	r24, r10
    3dfa:	b4 01       	movw	r22, r8
    3dfc:	49 d7       	rcall	.+3730   	; 0x4c90 <__cmpsf2>
    3dfe:	88 23       	and	r24, r24
    3e00:	64 f4       	brge	.+24     	; 0x3e1a <main+0xcea>
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	a0 ea       	ldi	r26, 0xA0	; 160
    3e08:	b2 ec       	ldi	r27, 0xC2	; 194
    3e0a:	80 93 47 24 	sts	0x2447, r24
    3e0e:	90 93 48 24 	sts	0x2448, r25
    3e12:	a0 93 49 24 	sts	0x2449, r26
    3e16:	b0 93 4a 24 	sts	0x244A, r27
    3e1a:	c2 01       	movw	r24, r4
    3e1c:	80 38       	cpi	r24, 0x80	; 128
    3e1e:	91 05       	cpc	r25, r1
    3e20:	14 f0       	brlt	.+4      	; 0x3e26 <main+0xcf6>
    3e22:	8f e7       	ldi	r24, 0x7F	; 127
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	81 38       	cpi	r24, 0x81	; 129
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	93 07       	cpc	r25, r19
    3e2c:	14 f4       	brge	.+4      	; 0x3e32 <main+0xd02>
    3e2e:	81 e8       	ldi	r24, 0x81	; 129
    3e30:	9f ef       	ldi	r25, 0xFF	; 255
    3e32:	bc 01       	movw	r22, r24
    3e34:	88 27       	eor	r24, r24
    3e36:	77 fd       	sbrc	r23, 7
    3e38:	80 95       	com	r24
    3e3a:	98 2f       	mov	r25, r24
    3e3c:	c8 d7       	rcall	.+3984   	; 0x4dce <__floatsisf>
    3e3e:	20 91 47 24 	lds	r18, 0x2447
    3e42:	30 91 48 24 	lds	r19, 0x2448
    3e46:	40 91 49 24 	lds	r20, 0x2449
    3e4a:	50 91 4a 24 	lds	r21, 0x244A
    3e4e:	bc d6       	rcall	.+3448   	; 0x4bc8 <__addsf3>
    3e50:	4b 01       	movw	r8, r22
    3e52:	5c 01       	movw	r10, r24
    3e54:	b8 01       	movw	r22, r16
    3e56:	88 27       	eor	r24, r24
    3e58:	77 fd       	sbrc	r23, 7
    3e5a:	80 95       	com	r24
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	b7 d7       	rcall	.+3950   	; 0x4dce <__floatsisf>
    3e60:	9b 01       	movw	r18, r22
    3e62:	ac 01       	movw	r20, r24
    3e64:	6d 81       	ldd	r22, Y+5	; 0x05
    3e66:	7e 81       	ldd	r23, Y+6	; 0x06
    3e68:	8f 81       	ldd	r24, Y+7	; 0x07
    3e6a:	98 85       	ldd	r25, Y+8	; 0x08
    3e6c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsf3>
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	c5 01       	movw	r24, r10
    3e76:	b4 01       	movw	r22, r8
    3e78:	a7 d6       	rcall	.+3406   	; 0x4bc8 <__addsf3>
    3e7a:	76 d7       	rcall	.+3820   	; 0x4d68 <__fixsfsi>
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	60 38       	cpi	r22, 0x80	; 128
    3e80:	71 05       	cpc	r23, r1
    3e82:	14 f0       	brlt	.+4      	; 0x3e88 <main+0xd58>
    3e84:	8f e7       	ldi	r24, 0x7F	; 127
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	e7 e3       	ldi	r30, 0x37	; 55
    3e8a:	f4 e2       	ldi	r31, 0x24	; 36
    3e8c:	24 86       	std	Z+12, r2	; 0x0c
    3e8e:	35 86       	std	Z+13, r3	; 0x0d
    3e90:	06 87       	std	Z+14, r16	; 0x0e
    3e92:	17 87       	std	Z+15, r17	; 0x0f
    3e94:	81 38       	cpi	r24, 0x81	; 129
    3e96:	4f ef       	ldi	r20, 0xFF	; 255
    3e98:	94 07       	cpc	r25, r20
    3e9a:	14 f4       	brge	.+4      	; 0x3ea0 <main+0xd70>
    3e9c:	81 e8       	ldi	r24, 0x81	; 129
    3e9e:	9f ef       	ldi	r25, 0xFF	; 255
    3ea0:	80 93 4b 24 	sts	0x244B, r24
    3ea4:	e8 e0       	ldi	r30, 0x08	; 8
    3ea6:	f6 e0       	ldi	r31, 0x06	; 6
    3ea8:	60 81       	ld	r22, Z
    3eaa:	50 81       	ld	r21, Z
    3eac:	70 81       	ld	r23, Z
    3eae:	40 81       	ld	r20, Z
    3eb0:	90 81       	ld	r25, Z
    3eb2:	80 81       	ld	r24, Z
    3eb4:	20 81       	ld	r18, Z
    3eb6:	e0 81       	ld	r30, Z
    3eb8:	22 1f       	adc	r18, r18
    3eba:	22 27       	eor	r18, r18
    3ebc:	22 1f       	adc	r18, r18
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	22 0f       	add	r18, r18
    3ec2:	33 1f       	adc	r19, r19
    3ec4:	22 0f       	add	r18, r18
    3ec6:	33 1f       	adc	r19, r19
    3ec8:	96 fb       	bst	r25, 6
    3eca:	99 27       	eor	r25, r25
    3ecc:	90 f9       	bld	r25, 0
    3ece:	9f ab       	std	Y+55, r25	; 0x37
    3ed0:	18 ae       	std	Y+56, r1	; 0x38
    3ed2:	af a9       	ldd	r26, Y+55	; 0x37
    3ed4:	b8 ad       	ldd	r27, Y+56	; 0x38
    3ed6:	2a 2b       	or	r18, r26
    3ed8:	3b 2b       	or	r19, r27
    3eda:	82 95       	swap	r24
    3edc:	81 70       	andi	r24, 0x01	; 1
    3ede:	89 af       	std	Y+57, r24	; 0x39
    3ee0:	1a ae       	std	Y+58, r1	; 0x3a
    3ee2:	89 ad       	ldd	r24, Y+57	; 0x39
    3ee4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	28 2b       	or	r18, r24
    3eec:	39 2b       	or	r19, r25
    3eee:	e5 fb       	bst	r30, 5
    3ef0:	ee 27       	eor	r30, r30
    3ef2:	e0 f9       	bld	r30, 0
    3ef4:	eb af       	std	Y+59, r30	; 0x3b
    3ef6:	1c ae       	std	Y+60, r1	; 0x3c
    3ef8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3efa:	9c ad       	ldd	r25, Y+60	; 0x3c
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	88 0f       	add	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	28 2b       	or	r18, r24
    3f0a:	39 2b       	or	r19, r25
    3f0c:	f7 e1       	ldi	r31, 0x17	; 23
    3f0e:	f2 9f       	mul	r31, r18
    3f10:	c0 01       	movw	r24, r0
    3f12:	f3 9f       	mul	r31, r19
    3f14:	90 0d       	add	r25, r0
    3f16:	11 24       	eor	r1, r1
    3f18:	dc 01       	movw	r26, r24
    3f1a:	a2 53       	subi	r26, 0x32	; 50
    3f1c:	bf 4d       	sbci	r27, 0xDF	; 223
    3f1e:	19 96       	adiw	r26, 0x09	; 9
    3f20:	ec 91       	ld	r30, X
    3f22:	ee af       	std	Y+62, r30	; 0x3e
    3f24:	1d ae       	std	Y+61, r1	; 0x3d
    3f26:	77 1f       	adc	r23, r23
    3f28:	77 27       	eor	r23, r23
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	87 2f       	mov	r24, r23
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	66 fb       	bst	r22, 6
    3f3a:	66 27       	eor	r22, r22
    3f3c:	60 f9       	bld	r22, 0
    3f3e:	6f af       	std	Y+63, r22	; 0x3f
    3f40:	21 96       	adiw	r28, 0x01	; 1
    3f42:	1f ae       	std	Y+63, r1	; 0x3f
    3f44:	21 97       	sbiw	r28, 0x01	; 1
    3f46:	21 96       	adiw	r28, 0x01	; 1
    3f48:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f4c:	21 97       	sbiw	r28, 0x01	; 1
    3f4e:	82 2b       	or	r24, r18
    3f50:	93 2b       	or	r25, r19
    3f52:	52 95       	swap	r21
    3f54:	51 70       	andi	r21, 0x01	; 1
    3f56:	22 96       	adiw	r28, 0x02	; 2
    3f58:	5f af       	std	Y+63, r21	; 0x3f
    3f5a:	22 97       	sbiw	r28, 0x02	; 2
    3f5c:	23 96       	adiw	r28, 0x03	; 3
    3f5e:	1f ae       	std	Y+63, r1	; 0x3f
    3f60:	23 97       	sbiw	r28, 0x03	; 3
    3f62:	23 96       	adiw	r28, 0x03	; 3
    3f64:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f66:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f68:	23 97       	sbiw	r28, 0x03	; 3
    3f6a:	22 0f       	add	r18, r18
    3f6c:	33 1f       	adc	r19, r19
    3f6e:	82 2b       	or	r24, r18
    3f70:	93 2b       	or	r25, r19
    3f72:	45 fb       	bst	r20, 5
    3f74:	44 27       	eor	r20, r20
    3f76:	40 f9       	bld	r20, 0
    3f78:	24 96       	adiw	r28, 0x04	; 4
    3f7a:	4f af       	std	Y+63, r20	; 0x3f
    3f7c:	24 97       	sbiw	r28, 0x04	; 4
    3f7e:	25 96       	adiw	r28, 0x05	; 5
    3f80:	1f ae       	std	Y+63, r1	; 0x3f
    3f82:	25 97       	sbiw	r28, 0x05	; 5
    3f84:	25 96       	adiw	r28, 0x05	; 5
    3f86:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f88:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f8a:	25 97       	sbiw	r28, 0x05	; 5
    3f8c:	22 0f       	add	r18, r18
    3f8e:	33 1f       	adc	r19, r19
    3f90:	22 0f       	add	r18, r18
    3f92:	33 1f       	adc	r19, r19
    3f94:	22 0f       	add	r18, r18
    3f96:	33 1f       	adc	r19, r19
    3f98:	82 2b       	or	r24, r18
    3f9a:	93 2b       	or	r25, r19
    3f9c:	f8 9f       	mul	r31, r24
    3f9e:	90 01       	movw	r18, r0
    3fa0:	f9 9f       	mul	r31, r25
    3fa2:	30 0d       	add	r19, r0
    3fa4:	11 24       	eor	r1, r1
    3fa6:	f9 01       	movw	r30, r18
    3fa8:	e2 53       	subi	r30, 0x32	; 50
    3faa:	ff 4d       	sbci	r31, 0xDF	; 223
    3fac:	23 84       	ldd	r2, Z+11	; 0x0b
    3fae:	34 84       	ldd	r3, Z+12	; 0x0c
    3fb0:	4d ad       	ldd	r20, Y+61	; 0x3d
    3fb2:	5e ad       	ldd	r21, Y+62	; 0x3e
    3fb4:	24 2a       	or	r2, r20
    3fb6:	35 2a       	or	r3, r21
    3fb8:	a9 e5       	ldi	r26, 0x59	; 89
    3fba:	b4 e2       	ldi	r27, 0x24	; 36
    3fbc:	8d 91       	ld	r24, X+
    3fbe:	9c 91       	ld	r25, X
    3fc0:	28 1a       	sub	r2, r24
    3fc2:	39 0a       	sbc	r3, r25
    3fc4:	80 91 5f 24 	lds	r24, 0x245F
    3fc8:	90 91 60 24 	lds	r25, 0x2460
    3fcc:	f1 01       	movw	r30, r2
    3fce:	e8 1b       	sub	r30, r24
    3fd0:	f9 0b       	sbc	r31, r25
    3fd2:	9f 01       	movw	r18, r30
    3fd4:	22 0f       	add	r18, r18
    3fd6:	33 1f       	adc	r19, r19
    3fd8:	8f 01       	movw	r16, r30
    3fda:	00 0f       	add	r16, r16
    3fdc:	11 1f       	adc	r17, r17
    3fde:	00 0f       	add	r16, r16
    3fe0:	11 1f       	adc	r17, r17
    3fe2:	00 0f       	add	r16, r16
    3fe4:	11 1f       	adc	r17, r17
    3fe6:	02 0f       	add	r16, r18
    3fe8:	13 1f       	adc	r17, r19
    3fea:	c8 01       	movw	r24, r16
    3fec:	c1 96       	adiw	r24, 0x31	; 49
    3fee:	83 36       	cpi	r24, 0x63	; 99
    3ff0:	91 05       	cpc	r25, r1
    3ff2:	48 f0       	brcs	.+18     	; 0x4006 <__stack+0x7>
    3ff4:	01 36       	cpi	r16, 0x61	; 97
    3ff6:	f9 e0       	ldi	r31, 0x09	; 9
    3ff8:	1f 07       	cpc	r17, r31
    3ffa:	44 f4       	brge	.+16     	; 0x400c <__stack+0xd>
    3ffc:	00 3a       	cpi	r16, 0xA0	; 160
    3ffe:	26 ef       	ldi	r18, 0xF6	; 246
    4000:	12 07       	cpc	r17, r18
    4002:	3c f0       	brlt	.+14     	; 0x4012 <__stack+0x13>
    4004:	08 c0       	rjmp	.+16     	; 0x4016 <__stack+0x17>
    4006:	00 e0       	ldi	r16, 0x00	; 0
    4008:	10 e0       	ldi	r17, 0x00	; 0
    400a:	05 c0       	rjmp	.+10     	; 0x4016 <__stack+0x17>
    400c:	00 e0       	ldi	r16, 0x00	; 0
    400e:	10 e0       	ldi	r17, 0x00	; 0
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <__stack+0x17>
    4012:	00 e0       	ldi	r16, 0x00	; 0
    4014:	10 e0       	ldi	r17, 0x00	; 0
    4016:	b1 01       	movw	r22, r2
    4018:	88 27       	eor	r24, r24
    401a:	77 fd       	sbrc	r23, 7
    401c:	80 95       	com	r24
    401e:	98 2f       	mov	r25, r24
    4020:	d6 d6       	rcall	.+3500   	; 0x4dce <__floatsisf>
    4022:	4b 01       	movw	r8, r22
    4024:	5c 01       	movw	r10, r24
    4026:	9b 01       	movw	r18, r22
    4028:	ac 01       	movw	r20, r24
    402a:	69 81       	ldd	r22, Y+1	; 0x01
    402c:	7a 81       	ldd	r23, Y+2	; 0x02
    402e:	8b 81       	ldd	r24, Y+3	; 0x03
    4030:	9c 81       	ldd	r25, Y+4	; 0x04
    4032:	81 d7       	rcall	.+3842   	; 0x4f36 <__mulsf3>
    4034:	99 d6       	rcall	.+3378   	; 0x4d68 <__fixsfsi>
    4036:	2b 01       	movw	r4, r22
    4038:	3c 01       	movw	r6, r24
    403a:	a5 01       	movw	r20, r10
    403c:	94 01       	movw	r18, r8
    403e:	c7 01       	movw	r24, r14
    4040:	b6 01       	movw	r22, r12
    4042:	79 d7       	rcall	.+3826   	; 0x4f36 <__mulsf3>
    4044:	2a e0       	ldi	r18, 0x0A	; 10
    4046:	37 ed       	ldi	r19, 0xD7	; 215
    4048:	43 ea       	ldi	r20, 0xA3	; 163
    404a:	5c e3       	ldi	r21, 0x3C	; 60
    404c:	74 d7       	rcall	.+3816   	; 0x4f36 <__mulsf3>
    404e:	20 91 63 24 	lds	r18, 0x2463
    4052:	30 91 64 24 	lds	r19, 0x2464
    4056:	40 91 65 24 	lds	r20, 0x2465
    405a:	50 91 66 24 	lds	r21, 0x2466
    405e:	b4 d5       	rcall	.+2920   	; 0x4bc8 <__addsf3>
    4060:	4b 01       	movw	r8, r22
    4062:	5c 01       	movw	r10, r24
    4064:	60 93 63 24 	sts	0x2463, r22
    4068:	70 93 64 24 	sts	0x2464, r23
    406c:	80 93 65 24 	sts	0x2465, r24
    4070:	90 93 66 24 	sts	0x2466, r25
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 ea       	ldi	r20, 0xA0	; 160
    407a:	52 e4       	ldi	r21, 0x42	; 66
    407c:	58 d7       	rcall	.+3760   	; 0x4f2e <__gesf2>
    407e:	18 16       	cp	r1, r24
    4080:	6c f4       	brge	.+26     	; 0x409c <__stack+0x9d>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 ea       	ldi	r26, 0xA0	; 160
    4088:	b2 e4       	ldi	r27, 0x42	; 66
    408a:	80 93 63 24 	sts	0x2463, r24
    408e:	90 93 64 24 	sts	0x2464, r25
    4092:	a0 93 65 24 	sts	0x2465, r26
    4096:	b0 93 66 24 	sts	0x2466, r27
    409a:	15 c0       	rjmp	.+42     	; 0x40c6 <__stack+0xc7>
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 ea       	ldi	r20, 0xA0	; 160
    40a2:	52 ec       	ldi	r21, 0xC2	; 194
    40a4:	c5 01       	movw	r24, r10
    40a6:	b4 01       	movw	r22, r8
    40a8:	f3 d5       	rcall	.+3046   	; 0x4c90 <__cmpsf2>
    40aa:	88 23       	and	r24, r24
    40ac:	64 f4       	brge	.+24     	; 0x40c6 <__stack+0xc7>
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	a0 ea       	ldi	r26, 0xA0	; 160
    40b4:	b2 ec       	ldi	r27, 0xC2	; 194
    40b6:	80 93 63 24 	sts	0x2463, r24
    40ba:	90 93 64 24 	sts	0x2464, r25
    40be:	a0 93 65 24 	sts	0x2465, r26
    40c2:	b0 93 66 24 	sts	0x2466, r27
    40c6:	c2 01       	movw	r24, r4
    40c8:	80 38       	cpi	r24, 0x80	; 128
    40ca:	91 05       	cpc	r25, r1
    40cc:	14 f0       	brlt	.+4      	; 0x40d2 <__stack+0xd3>
    40ce:	8f e7       	ldi	r24, 0x7F	; 127
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	81 38       	cpi	r24, 0x81	; 129
    40d4:	3f ef       	ldi	r19, 0xFF	; 255
    40d6:	93 07       	cpc	r25, r19
    40d8:	14 f4       	brge	.+4      	; 0x40de <__stack+0xdf>
    40da:	81 e8       	ldi	r24, 0x81	; 129
    40dc:	9f ef       	ldi	r25, 0xFF	; 255
    40de:	bc 01       	movw	r22, r24
    40e0:	88 27       	eor	r24, r24
    40e2:	77 fd       	sbrc	r23, 7
    40e4:	80 95       	com	r24
    40e6:	98 2f       	mov	r25, r24
    40e8:	72 d6       	rcall	.+3300   	; 0x4dce <__floatsisf>
    40ea:	20 91 63 24 	lds	r18, 0x2463
    40ee:	30 91 64 24 	lds	r19, 0x2464
    40f2:	40 91 65 24 	lds	r20, 0x2465
    40f6:	50 91 66 24 	lds	r21, 0x2466
    40fa:	66 d5       	rcall	.+2764   	; 0x4bc8 <__addsf3>
    40fc:	4b 01       	movw	r8, r22
    40fe:	5c 01       	movw	r10, r24
    4100:	b8 01       	movw	r22, r16
    4102:	88 27       	eor	r24, r24
    4104:	77 fd       	sbrc	r23, 7
    4106:	80 95       	com	r24
    4108:	98 2f       	mov	r25, r24
    410a:	61 d6       	rcall	.+3266   	; 0x4dce <__floatsisf>
    410c:	9b 01       	movw	r18, r22
    410e:	ac 01       	movw	r20, r24
    4110:	6d 81       	ldd	r22, Y+5	; 0x05
    4112:	7e 81       	ldd	r23, Y+6	; 0x06
    4114:	8f 81       	ldd	r24, Y+7	; 0x07
    4116:	98 85       	ldd	r25, Y+8	; 0x08
    4118:	0e d7       	rcall	.+3612   	; 0x4f36 <__mulsf3>
    411a:	9b 01       	movw	r18, r22
    411c:	ac 01       	movw	r20, r24
    411e:	c5 01       	movw	r24, r10
    4120:	b4 01       	movw	r22, r8
    4122:	52 d5       	rcall	.+2724   	; 0x4bc8 <__addsf3>
    4124:	21 d6       	rcall	.+3138   	; 0x4d68 <__fixsfsi>
    4126:	cb 01       	movw	r24, r22
    4128:	60 38       	cpi	r22, 0x80	; 128
    412a:	71 05       	cpc	r23, r1
    412c:	14 f0       	brlt	.+4      	; 0x4132 <__stack+0x133>
    412e:	8f e7       	ldi	r24, 0x7F	; 127
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	e3 e5       	ldi	r30, 0x53	; 83
    4134:	f4 e2       	ldi	r31, 0x24	; 36
    4136:	24 86       	std	Z+12, r2	; 0x0c
    4138:	35 86       	std	Z+13, r3	; 0x0d
    413a:	06 87       	std	Z+14, r16	; 0x0e
    413c:	17 87       	std	Z+15, r17	; 0x0f
    413e:	81 38       	cpi	r24, 0x81	; 129
    4140:	4f ef       	ldi	r20, 0xFF	; 255
    4142:	94 07       	cpc	r25, r20
    4144:	14 f4       	brge	.+4      	; 0x414a <__stack+0x14b>
    4146:	81 e8       	ldi	r24, 0x81	; 129
    4148:	9f ef       	ldi	r25, 0xFF	; 255
    414a:	80 93 67 24 	sts	0x2467, r24
    414e:	e8 e0       	ldi	r30, 0x08	; 8
    4150:	f6 e0       	ldi	r31, 0x06	; 6
    4152:	60 81       	ld	r22, Z
    4154:	50 81       	ld	r21, Z
    4156:	70 81       	ld	r23, Z
    4158:	40 81       	ld	r20, Z
    415a:	90 81       	ld	r25, Z
    415c:	80 81       	ld	r24, Z
    415e:	20 81       	ld	r18, Z
    4160:	e0 81       	ld	r30, Z
    4162:	22 1f       	adc	r18, r18
    4164:	22 27       	eor	r18, r18
    4166:	22 1f       	adc	r18, r18
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	22 0f       	add	r18, r18
    416c:	33 1f       	adc	r19, r19
    416e:	22 0f       	add	r18, r18
    4170:	33 1f       	adc	r19, r19
    4172:	96 fb       	bst	r25, 6
    4174:	99 27       	eor	r25, r25
    4176:	90 f9       	bld	r25, 0
    4178:	26 96       	adiw	r28, 0x06	; 6
    417a:	9f af       	std	Y+63, r25	; 0x3f
    417c:	26 97       	sbiw	r28, 0x06	; 6
    417e:	27 96       	adiw	r28, 0x07	; 7
    4180:	1f ae       	std	Y+63, r1	; 0x3f
    4182:	27 97       	sbiw	r28, 0x07	; 7
    4184:	27 96       	adiw	r28, 0x07	; 7
    4186:	ae ad       	ldd	r26, Y+62	; 0x3e
    4188:	bf ad       	ldd	r27, Y+63	; 0x3f
    418a:	27 97       	sbiw	r28, 0x07	; 7
    418c:	2a 2b       	or	r18, r26
    418e:	3b 2b       	or	r19, r27
    4190:	82 95       	swap	r24
    4192:	81 70       	andi	r24, 0x01	; 1
    4194:	28 96       	adiw	r28, 0x08	; 8
    4196:	8f af       	std	Y+63, r24	; 0x3f
    4198:	28 97       	sbiw	r28, 0x08	; 8
    419a:	29 96       	adiw	r28, 0x09	; 9
    419c:	1f ae       	std	Y+63, r1	; 0x3f
    419e:	29 97       	sbiw	r28, 0x09	; 9
    41a0:	29 96       	adiw	r28, 0x09	; 9
    41a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    41a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    41a6:	29 97       	sbiw	r28, 0x09	; 9
    41a8:	88 0f       	add	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	28 2b       	or	r18, r24
    41ae:	39 2b       	or	r19, r25
    41b0:	e5 fb       	bst	r30, 5
    41b2:	ee 27       	eor	r30, r30
    41b4:	e0 f9       	bld	r30, 0
    41b6:	2a 96       	adiw	r28, 0x0a	; 10
    41b8:	ef af       	std	Y+63, r30	; 0x3f
    41ba:	2a 97       	sbiw	r28, 0x0a	; 10
    41bc:	2b 96       	adiw	r28, 0x0b	; 11
    41be:	1f ae       	std	Y+63, r1	; 0x3f
    41c0:	2b 97       	sbiw	r28, 0x0b	; 11
    41c2:	2b 96       	adiw	r28, 0x0b	; 11
    41c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    41c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    41c8:	2b 97       	sbiw	r28, 0x0b	; 11
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	88 0f       	add	r24, r24
    41d0:	99 1f       	adc	r25, r25
    41d2:	88 0f       	add	r24, r24
    41d4:	99 1f       	adc	r25, r25
    41d6:	28 2b       	or	r18, r24
    41d8:	39 2b       	or	r19, r25
    41da:	f7 e1       	ldi	r31, 0x17	; 23
    41dc:	f2 9f       	mul	r31, r18
    41de:	c0 01       	movw	r24, r0
    41e0:	f3 9f       	mul	r31, r19
    41e2:	90 0d       	add	r25, r0
    41e4:	11 24       	eor	r1, r1
    41e6:	dc 01       	movw	r26, r24
    41e8:	a2 53       	subi	r26, 0x32	; 50
    41ea:	bf 4d       	sbci	r27, 0xDF	; 223
    41ec:	1d 96       	adiw	r26, 0x0d	; 13
    41ee:	ec 91       	ld	r30, X
    41f0:	2d 96       	adiw	r28, 0x0d	; 13
    41f2:	ef af       	std	Y+63, r30	; 0x3f
    41f4:	2d 97       	sbiw	r28, 0x0d	; 13
    41f6:	2c 96       	adiw	r28, 0x0c	; 12
    41f8:	1f ae       	std	Y+63, r1	; 0x3f
    41fa:	2c 97       	sbiw	r28, 0x0c	; 12
    41fc:	77 1f       	adc	r23, r23
    41fe:	77 27       	eor	r23, r23
    4200:	77 1f       	adc	r23, r23
    4202:	87 2f       	mov	r24, r23
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	88 0f       	add	r24, r24
    420c:	99 1f       	adc	r25, r25
    420e:	66 fb       	bst	r22, 6
    4210:	66 27       	eor	r22, r22
    4212:	60 f9       	bld	r22, 0
    4214:	2e 96       	adiw	r28, 0x0e	; 14
    4216:	6f af       	std	Y+63, r22	; 0x3f
    4218:	2e 97       	sbiw	r28, 0x0e	; 14
    421a:	2f 96       	adiw	r28, 0x0f	; 15
    421c:	1f ae       	std	Y+63, r1	; 0x3f
    421e:	2f 97       	sbiw	r28, 0x0f	; 15
    4220:	2f 96       	adiw	r28, 0x0f	; 15
    4222:	2e ad       	ldd	r18, Y+62	; 0x3e
    4224:	3f ad       	ldd	r19, Y+63	; 0x3f
    4226:	2f 97       	sbiw	r28, 0x0f	; 15
    4228:	82 2b       	or	r24, r18
    422a:	93 2b       	or	r25, r19
    422c:	52 95       	swap	r21
    422e:	51 70       	andi	r21, 0x01	; 1
    4230:	60 96       	adiw	r28, 0x10	; 16
    4232:	5f af       	std	Y+63, r21	; 0x3f
    4234:	60 97       	sbiw	r28, 0x10	; 16
    4236:	61 96       	adiw	r28, 0x11	; 17
    4238:	1f ae       	std	Y+63, r1	; 0x3f
    423a:	61 97       	sbiw	r28, 0x11	; 17
    423c:	61 96       	adiw	r28, 0x11	; 17
    423e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4240:	3f ad       	ldd	r19, Y+63	; 0x3f
    4242:	61 97       	sbiw	r28, 0x11	; 17
    4244:	22 0f       	add	r18, r18
    4246:	33 1f       	adc	r19, r19
    4248:	82 2b       	or	r24, r18
    424a:	93 2b       	or	r25, r19
    424c:	45 fb       	bst	r20, 5
    424e:	44 27       	eor	r20, r20
    4250:	40 f9       	bld	r20, 0
    4252:	62 96       	adiw	r28, 0x12	; 18
    4254:	4f af       	std	Y+63, r20	; 0x3f
    4256:	62 97       	sbiw	r28, 0x12	; 18
    4258:	63 96       	adiw	r28, 0x13	; 19
    425a:	1f ae       	std	Y+63, r1	; 0x3f
    425c:	63 97       	sbiw	r28, 0x13	; 19
    425e:	63 96       	adiw	r28, 0x13	; 19
    4260:	2e ad       	ldd	r18, Y+62	; 0x3e
    4262:	3f ad       	ldd	r19, Y+63	; 0x3f
    4264:	63 97       	sbiw	r28, 0x13	; 19
    4266:	22 0f       	add	r18, r18
    4268:	33 1f       	adc	r19, r19
    426a:	22 0f       	add	r18, r18
    426c:	33 1f       	adc	r19, r19
    426e:	22 0f       	add	r18, r18
    4270:	33 1f       	adc	r19, r19
    4272:	82 2b       	or	r24, r18
    4274:	93 2b       	or	r25, r19
    4276:	f8 9f       	mul	r31, r24
    4278:	90 01       	movw	r18, r0
    427a:	f9 9f       	mul	r31, r25
    427c:	30 0d       	add	r19, r0
    427e:	11 24       	eor	r1, r1
    4280:	f9 01       	movw	r30, r18
    4282:	e2 53       	subi	r30, 0x32	; 50
    4284:	ff 4d       	sbci	r31, 0xDF	; 223
    4286:	27 84       	ldd	r2, Z+15	; 0x0f
    4288:	30 88       	ldd	r3, Z+16	; 0x10
    428a:	2d 96       	adiw	r28, 0x0d	; 13
    428c:	4e ad       	ldd	r20, Y+62	; 0x3e
    428e:	5f ad       	ldd	r21, Y+63	; 0x3f
    4290:	2d 97       	sbiw	r28, 0x0d	; 13
    4292:	24 2a       	or	r2, r20
    4294:	35 2a       	or	r3, r21
    4296:	a4 ee       	ldi	r26, 0xE4	; 228
    4298:	b3 e2       	ldi	r27, 0x23	; 35
    429a:	8d 91       	ld	r24, X+
    429c:	9c 91       	ld	r25, X
    429e:	28 1a       	sub	r2, r24
    42a0:	39 0a       	sbc	r3, r25
    42a2:	80 91 ea 23 	lds	r24, 0x23EA
    42a6:	90 91 eb 23 	lds	r25, 0x23EB
    42aa:	f1 01       	movw	r30, r2
    42ac:	e8 1b       	sub	r30, r24
    42ae:	f9 0b       	sbc	r31, r25
    42b0:	9f 01       	movw	r18, r30
    42b2:	22 0f       	add	r18, r18
    42b4:	33 1f       	adc	r19, r19
    42b6:	8f 01       	movw	r16, r30
    42b8:	00 0f       	add	r16, r16
    42ba:	11 1f       	adc	r17, r17
    42bc:	00 0f       	add	r16, r16
    42be:	11 1f       	adc	r17, r17
    42c0:	00 0f       	add	r16, r16
    42c2:	11 1f       	adc	r17, r17
    42c4:	02 0f       	add	r16, r18
    42c6:	13 1f       	adc	r17, r19
    42c8:	c8 01       	movw	r24, r16
    42ca:	c1 96       	adiw	r24, 0x31	; 49
    42cc:	83 36       	cpi	r24, 0x63	; 99
    42ce:	91 05       	cpc	r25, r1
    42d0:	48 f0       	brcs	.+18     	; 0x42e4 <__stack+0x2e5>
    42d2:	01 36       	cpi	r16, 0x61	; 97
    42d4:	f9 e0       	ldi	r31, 0x09	; 9
    42d6:	1f 07       	cpc	r17, r31
    42d8:	44 f4       	brge	.+16     	; 0x42ea <__stack+0x2eb>
    42da:	00 3a       	cpi	r16, 0xA0	; 160
    42dc:	26 ef       	ldi	r18, 0xF6	; 246
    42de:	12 07       	cpc	r17, r18
    42e0:	3c f0       	brlt	.+14     	; 0x42f0 <__stack+0x2f1>
    42e2:	08 c0       	rjmp	.+16     	; 0x42f4 <__stack+0x2f5>
    42e4:	00 e0       	ldi	r16, 0x00	; 0
    42e6:	10 e0       	ldi	r17, 0x00	; 0
    42e8:	05 c0       	rjmp	.+10     	; 0x42f4 <__stack+0x2f5>
    42ea:	00 e0       	ldi	r16, 0x00	; 0
    42ec:	10 e0       	ldi	r17, 0x00	; 0
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <__stack+0x2f5>
    42f0:	00 e0       	ldi	r16, 0x00	; 0
    42f2:	10 e0       	ldi	r17, 0x00	; 0
    42f4:	b1 01       	movw	r22, r2
    42f6:	88 27       	eor	r24, r24
    42f8:	77 fd       	sbrc	r23, 7
    42fa:	80 95       	com	r24
    42fc:	98 2f       	mov	r25, r24
    42fe:	67 d5       	rcall	.+2766   	; 0x4dce <__floatsisf>
    4300:	4b 01       	movw	r8, r22
    4302:	5c 01       	movw	r10, r24
    4304:	9b 01       	movw	r18, r22
    4306:	ac 01       	movw	r20, r24
    4308:	69 81       	ldd	r22, Y+1	; 0x01
    430a:	7a 81       	ldd	r23, Y+2	; 0x02
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	9c 81       	ldd	r25, Y+4	; 0x04
    4310:	12 d6       	rcall	.+3108   	; 0x4f36 <__mulsf3>
    4312:	2a d5       	rcall	.+2644   	; 0x4d68 <__fixsfsi>
    4314:	2b 01       	movw	r4, r22
    4316:	3c 01       	movw	r6, r24
    4318:	a5 01       	movw	r20, r10
    431a:	94 01       	movw	r18, r8
    431c:	c7 01       	movw	r24, r14
    431e:	b6 01       	movw	r22, r12
    4320:	0a d6       	rcall	.+3092   	; 0x4f36 <__mulsf3>
    4322:	2a e0       	ldi	r18, 0x0A	; 10
    4324:	37 ed       	ldi	r19, 0xD7	; 215
    4326:	43 ea       	ldi	r20, 0xA3	; 163
    4328:	5c e3       	ldi	r21, 0x3C	; 60
    432a:	05 d6       	rcall	.+3082   	; 0x4f36 <__mulsf3>
    432c:	20 91 ee 23 	lds	r18, 0x23EE
    4330:	30 91 ef 23 	lds	r19, 0x23EF
    4334:	40 91 f0 23 	lds	r20, 0x23F0
    4338:	50 91 f1 23 	lds	r21, 0x23F1
    433c:	45 d4       	rcall	.+2186   	; 0x4bc8 <__addsf3>
    433e:	6b 01       	movw	r12, r22
    4340:	7c 01       	movw	r14, r24
    4342:	60 93 ee 23 	sts	0x23EE, r22
    4346:	70 93 ef 23 	sts	0x23EF, r23
    434a:	80 93 f0 23 	sts	0x23F0, r24
    434e:	90 93 f1 23 	sts	0x23F1, r25
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 ea       	ldi	r20, 0xA0	; 160
    4358:	52 e4       	ldi	r21, 0x42	; 66
    435a:	e9 d5       	rcall	.+3026   	; 0x4f2e <__gesf2>
    435c:	18 16       	cp	r1, r24
    435e:	6c f4       	brge	.+26     	; 0x437a <__stack+0x37b>
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	a0 ea       	ldi	r26, 0xA0	; 160
    4366:	b2 e4       	ldi	r27, 0x42	; 66
    4368:	80 93 ee 23 	sts	0x23EE, r24
    436c:	90 93 ef 23 	sts	0x23EF, r25
    4370:	a0 93 f0 23 	sts	0x23F0, r26
    4374:	b0 93 f1 23 	sts	0x23F1, r27
    4378:	15 c0       	rjmp	.+42     	; 0x43a4 <__stack+0x3a5>
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 ea       	ldi	r20, 0xA0	; 160
    4380:	52 ec       	ldi	r21, 0xC2	; 194
    4382:	c7 01       	movw	r24, r14
    4384:	b6 01       	movw	r22, r12
    4386:	84 d4       	rcall	.+2312   	; 0x4c90 <__cmpsf2>
    4388:	88 23       	and	r24, r24
    438a:	64 f4       	brge	.+24     	; 0x43a4 <__stack+0x3a5>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	a0 ea       	ldi	r26, 0xA0	; 160
    4392:	b2 ec       	ldi	r27, 0xC2	; 194
    4394:	80 93 ee 23 	sts	0x23EE, r24
    4398:	90 93 ef 23 	sts	0x23EF, r25
    439c:	a0 93 f0 23 	sts	0x23F0, r26
    43a0:	b0 93 f1 23 	sts	0x23F1, r27
    43a4:	c2 01       	movw	r24, r4
    43a6:	80 38       	cpi	r24, 0x80	; 128
    43a8:	91 05       	cpc	r25, r1
    43aa:	14 f0       	brlt	.+4      	; 0x43b0 <__stack+0x3b1>
    43ac:	8f e7       	ldi	r24, 0x7F	; 127
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	81 38       	cpi	r24, 0x81	; 129
    43b2:	3f ef       	ldi	r19, 0xFF	; 255
    43b4:	93 07       	cpc	r25, r19
    43b6:	14 f4       	brge	.+4      	; 0x43bc <__stack+0x3bd>
    43b8:	81 e8       	ldi	r24, 0x81	; 129
    43ba:	9f ef       	ldi	r25, 0xFF	; 255
    43bc:	bc 01       	movw	r22, r24
    43be:	88 27       	eor	r24, r24
    43c0:	77 fd       	sbrc	r23, 7
    43c2:	80 95       	com	r24
    43c4:	98 2f       	mov	r25, r24
    43c6:	03 d5       	rcall	.+2566   	; 0x4dce <__floatsisf>
    43c8:	20 91 ee 23 	lds	r18, 0x23EE
    43cc:	30 91 ef 23 	lds	r19, 0x23EF
    43d0:	40 91 f0 23 	lds	r20, 0x23F0
    43d4:	50 91 f1 23 	lds	r21, 0x23F1
    43d8:	f7 d3       	rcall	.+2030   	; 0x4bc8 <__addsf3>
    43da:	6b 01       	movw	r12, r22
    43dc:	7c 01       	movw	r14, r24
    43de:	b8 01       	movw	r22, r16
    43e0:	88 27       	eor	r24, r24
    43e2:	77 fd       	sbrc	r23, 7
    43e4:	80 95       	com	r24
    43e6:	98 2f       	mov	r25, r24
    43e8:	f2 d4       	rcall	.+2532   	; 0x4dce <__floatsisf>
    43ea:	9b 01       	movw	r18, r22
    43ec:	ac 01       	movw	r20, r24
    43ee:	6d 81       	ldd	r22, Y+5	; 0x05
    43f0:	7e 81       	ldd	r23, Y+6	; 0x06
    43f2:	8f 81       	ldd	r24, Y+7	; 0x07
    43f4:	98 85       	ldd	r25, Y+8	; 0x08
    43f6:	9f d5       	rcall	.+2878   	; 0x4f36 <__mulsf3>
    43f8:	9b 01       	movw	r18, r22
    43fa:	ac 01       	movw	r20, r24
    43fc:	c7 01       	movw	r24, r14
    43fe:	b6 01       	movw	r22, r12
    4400:	e3 d3       	rcall	.+1990   	; 0x4bc8 <__addsf3>
    4402:	b2 d4       	rcall	.+2404   	; 0x4d68 <__fixsfsi>
    4404:	cb 01       	movw	r24, r22
    4406:	60 38       	cpi	r22, 0x80	; 128
    4408:	71 05       	cpc	r23, r1
    440a:	14 f0       	brlt	.+4      	; 0x4410 <__stack+0x411>
    440c:	8f e7       	ldi	r24, 0x7F	; 127
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	ee ed       	ldi	r30, 0xDE	; 222
    4412:	f3 e2       	ldi	r31, 0x23	; 35
    4414:	24 86       	std	Z+12, r2	; 0x0c
    4416:	35 86       	std	Z+13, r3	; 0x0d
    4418:	06 87       	std	Z+14, r16	; 0x0e
    441a:	17 87       	std	Z+15, r17	; 0x0f
    441c:	81 38       	cpi	r24, 0x81	; 129
    441e:	4f ef       	ldi	r20, 0xFF	; 255
    4420:	94 07       	cpc	r25, r20
    4422:	14 f4       	brge	.+4      	; 0x4428 <__stack+0x429>
    4424:	81 e8       	ldi	r24, 0x81	; 129
    4426:	9f ef       	ldi	r25, 0xFF	; 255
    4428:	80 93 f2 23 	sts	0x23F2, r24
    442c:	6a e2       	ldi	r22, 0x2A	; 42
    442e:	80 ea       	ldi	r24, 0xA0	; 160
    4430:	9b e0       	ldi	r25, 0x0B	; 11
    4432:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4436:	6e e7       	ldi	r22, 0x7E	; 126
    4438:	80 ea       	ldi	r24, 0xA0	; 160
    443a:	9b e0       	ldi	r25, 0x0B	; 11
    443c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4440:	62 e3       	ldi	r22, 0x32	; 50
    4442:	80 ea       	ldi	r24, 0xA0	; 160
    4444:	9b e0       	ldi	r25, 0x0B	; 11
    4446:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    444a:	62 e3       	ldi	r22, 0x32	; 50
    444c:	80 ea       	ldi	r24, 0xA0	; 160
    444e:	9b e0       	ldi	r25, 0x0B	; 11
    4450:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4454:	62 e3       	ldi	r22, 0x32	; 50
    4456:	80 ea       	ldi	r24, 0xA0	; 160
    4458:	9b e0       	ldi	r25, 0x0B	; 11
    445a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    445e:	62 e3       	ldi	r22, 0x32	; 50
    4460:	80 ea       	ldi	r24, 0xA0	; 160
    4462:	9b e0       	ldi	r25, 0x0B	; 11
    4464:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4468:	80 91 f3 23 	lds	r24, 0x23F3
    446c:	90 91 f4 23 	lds	r25, 0x23F4
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	19 f0       	breq	.+6      	; 0x447a <__stack+0x47b>
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	39 f0       	breq	.+14     	; 0x4486 <__stack+0x487>
    4478:	0b c0       	rjmp	.+22     	; 0x4490 <__stack+0x491>
    447a:	63 e2       	ldi	r22, 0x23	; 35
    447c:	80 ea       	ldi	r24, 0xA0	; 160
    447e:	9b e0       	ldi	r25, 0x0B	; 11
    4480:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4484:	05 c0       	rjmp	.+10     	; 0x4490 <__stack+0x491>
    4486:	64 e2       	ldi	r22, 0x24	; 36
    4488:	80 ea       	ldi	r24, 0xA0	; 160
    448a:	9b e0       	ldi	r25, 0x0B	; 11
    448c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <usart_putchar>
    4490:	e0 e6       	ldi	r30, 0x60	; 96
    4492:	f6 e0       	ldi	r31, 0x06	; 6
    4494:	88 e0       	ldi	r24, 0x08	; 8
    4496:	87 83       	std	Z+7, r24	; 0x07
    4498:	80 e2       	ldi	r24, 0x20	; 32
    449a:	87 83       	std	Z+7, r24	; 0x07
    449c:	2f b7       	in	r18, 0x3f	; 63
    449e:	f8 94       	cli
    44a0:	e0 e0       	ldi	r30, 0x00	; 0
    44a2:	f2 e0       	ldi	r31, 0x02	; 2
    44a4:	84 a1       	ldd	r24, Z+36	; 0x24
    44a6:	95 a1       	ldd	r25, Z+37	; 0x25
    44a8:	2f bf       	out	0x3f, r18	; 63
    44aa:	80 93 bb 20 	sts	0x20BB, r24
    44ae:	90 93 bc 20 	sts	0x20BC, r25
    44b2:	89 3d       	cpi	r24, 0xD9	; 217
    44b4:	94 40       	sbci	r25, 0x04	; 4
    44b6:	3c f4       	brge	.+14     	; 0x44c6 <__stack+0x4c7>
    44b8:	e0 e4       	ldi	r30, 0x40	; 64
    44ba:	f6 e0       	ldi	r31, 0x06	; 6
    44bc:	80 e4       	ldi	r24, 0x40	; 64
    44be:	85 83       	std	Z+5, r24	; 0x05
    44c0:	84 e0       	ldi	r24, 0x04	; 4
    44c2:	85 83       	std	Z+5, r24	; 0x05
    44c4:	06 c0       	rjmp	.+12     	; 0x44d2 <__stack+0x4d3>
    44c6:	e0 e4       	ldi	r30, 0x40	; 64
    44c8:	f6 e0       	ldi	r31, 0x06	; 6
    44ca:	80 e4       	ldi	r24, 0x40	; 64
    44cc:	86 83       	std	Z+6, r24	; 0x06
    44ce:	84 e0       	ldi	r24, 0x04	; 4
    44d0:	86 83       	std	Z+6, r24	; 0x06
    44d2:	e0 e0       	ldi	r30, 0x00	; 0
    44d4:	f6 e0       	ldi	r31, 0x06	; 6
    44d6:	80 85       	ldd	r24, Z+8	; 0x08
    44d8:	82 ff       	sbrs	r24, 2
    44da:	03 c0       	rjmp	.+6      	; 0x44e2 <__stack+0x4e3>
    44dc:	8f ef       	ldi	r24, 0xFF	; 255
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	02 c0       	rjmp	.+4      	; 0x44e6 <__stack+0x4e7>
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	e8 e0       	ldi	r30, 0x08	; 8
    44e8:	f6 e0       	ldi	r31, 0x06	; 6
    44ea:	30 81       	ld	r19, Z
    44ec:	20 81       	ld	r18, Z
    44ee:	40 81       	ld	r20, Z
    44f0:	60 81       	ld	r22, Z
    44f2:	44 1f       	adc	r20, r20
    44f4:	44 27       	eor	r20, r20
    44f6:	44 1f       	adc	r20, r20
    44f8:	50 e0       	ldi	r21, 0x00	; 0
    44fa:	44 0f       	add	r20, r20
    44fc:	55 1f       	adc	r21, r21
    44fe:	44 0f       	add	r20, r20
    4500:	55 1f       	adc	r21, r21
    4502:	36 fb       	bst	r19, 6
    4504:	33 27       	eor	r19, r19
    4506:	30 f9       	bld	r19, 0
    4508:	64 96       	adiw	r28, 0x14	; 20
    450a:	3f af       	std	Y+63, r19	; 0x3f
    450c:	64 97       	sbiw	r28, 0x14	; 20
    450e:	65 96       	adiw	r28, 0x15	; 21
    4510:	1f ae       	std	Y+63, r1	; 0x3f
    4512:	65 97       	sbiw	r28, 0x15	; 21
    4514:	65 96       	adiw	r28, 0x15	; 21
    4516:	ae ad       	ldd	r26, Y+62	; 0x3e
    4518:	bf ad       	ldd	r27, Y+63	; 0x3f
    451a:	65 97       	sbiw	r28, 0x15	; 21
    451c:	4a 2b       	or	r20, r26
    451e:	5b 2b       	or	r21, r27
    4520:	22 95       	swap	r18
    4522:	21 70       	andi	r18, 0x01	; 1
    4524:	66 96       	adiw	r28, 0x16	; 22
    4526:	2f af       	std	Y+63, r18	; 0x3f
    4528:	66 97       	sbiw	r28, 0x16	; 22
    452a:	67 96       	adiw	r28, 0x17	; 23
    452c:	1f ae       	std	Y+63, r1	; 0x3f
    452e:	67 97       	sbiw	r28, 0x17	; 23
    4530:	67 96       	adiw	r28, 0x17	; 23
    4532:	2e ad       	ldd	r18, Y+62	; 0x3e
    4534:	3f ad       	ldd	r19, Y+63	; 0x3f
    4536:	67 97       	sbiw	r28, 0x17	; 23
    4538:	22 0f       	add	r18, r18
    453a:	33 1f       	adc	r19, r19
    453c:	42 2b       	or	r20, r18
    453e:	53 2b       	or	r21, r19
    4540:	65 fb       	bst	r22, 5
    4542:	66 27       	eor	r22, r22
    4544:	60 f9       	bld	r22, 0
    4546:	68 96       	adiw	r28, 0x18	; 24
    4548:	6f af       	std	Y+63, r22	; 0x3f
    454a:	68 97       	sbiw	r28, 0x18	; 24
    454c:	69 96       	adiw	r28, 0x19	; 25
    454e:	1f ae       	std	Y+63, r1	; 0x3f
    4550:	69 97       	sbiw	r28, 0x19	; 25
    4552:	69 96       	adiw	r28, 0x19	; 25
    4554:	2e ad       	ldd	r18, Y+62	; 0x3e
    4556:	3f ad       	ldd	r19, Y+63	; 0x3f
    4558:	69 97       	sbiw	r28, 0x19	; 25
    455a:	22 0f       	add	r18, r18
    455c:	33 1f       	adc	r19, r19
    455e:	22 0f       	add	r18, r18
    4560:	33 1f       	adc	r19, r19
    4562:	22 0f       	add	r18, r18
    4564:	33 1f       	adc	r19, r19
    4566:	42 2b       	or	r20, r18
    4568:	53 2b       	or	r21, r19
    456a:	67 e1       	ldi	r22, 0x17	; 23
    456c:	64 9f       	mul	r22, r20
    456e:	90 01       	movw	r18, r0
    4570:	65 9f       	mul	r22, r21
    4572:	30 0d       	add	r19, r0
    4574:	11 24       	eor	r1, r1
    4576:	f9 01       	movw	r30, r18
    4578:	e2 53       	subi	r30, 0x32	; 50
    457a:	ff 4d       	sbci	r31, 0xDF	; 223
    457c:	21 89       	ldd	r18, Z+17	; 0x11
    457e:	82 2b       	or	r24, r18
    4580:	89 2b       	or	r24, r25
    4582:	59 f0       	breq	.+22     	; 0x459a <__stack+0x59b>
    4584:	e0 e6       	ldi	r30, 0x60	; 96
    4586:	f6 e0       	ldi	r31, 0x06	; 6
    4588:	80 85       	ldd	r24, Z+8	; 0x08
    458a:	88 23       	and	r24, r24
    458c:	34 f0       	brlt	.+12     	; 0x459a <__stack+0x59b>
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	80 93 bf 20 	sts	0x20BF, r24
    4596:	90 93 c0 20 	sts	0x20C0, r25
    459a:	e8 e0       	ldi	r30, 0x08	; 8
    459c:	f6 e0       	ldi	r31, 0x06	; 6
    459e:	90 81       	ld	r25, Z
    45a0:	80 81       	ld	r24, Z
    45a2:	20 81       	ld	r18, Z
    45a4:	40 81       	ld	r20, Z
    45a6:	22 1f       	adc	r18, r18
    45a8:	22 27       	eor	r18, r18
    45aa:	22 1f       	adc	r18, r18
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	22 0f       	add	r18, r18
    45b0:	33 1f       	adc	r19, r19
    45b2:	22 0f       	add	r18, r18
    45b4:	33 1f       	adc	r19, r19
    45b6:	96 fb       	bst	r25, 6
    45b8:	99 27       	eor	r25, r25
    45ba:	90 f9       	bld	r25, 0
    45bc:	6a 96       	adiw	r28, 0x1a	; 26
    45be:	9f af       	std	Y+63, r25	; 0x3f
    45c0:	6a 97       	sbiw	r28, 0x1a	; 26
    45c2:	6b 96       	adiw	r28, 0x1b	; 27
    45c4:	1f ae       	std	Y+63, r1	; 0x3f
    45c6:	6b 97       	sbiw	r28, 0x1b	; 27
    45c8:	6b 96       	adiw	r28, 0x1b	; 27
    45ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    45cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    45ce:	6b 97       	sbiw	r28, 0x1b	; 27
    45d0:	2e 2b       	or	r18, r30
    45d2:	3f 2b       	or	r19, r31
    45d4:	82 95       	swap	r24
    45d6:	81 70       	andi	r24, 0x01	; 1
    45d8:	6c 96       	adiw	r28, 0x1c	; 28
    45da:	8f af       	std	Y+63, r24	; 0x3f
    45dc:	6c 97       	sbiw	r28, 0x1c	; 28
    45de:	6d 96       	adiw	r28, 0x1d	; 29
    45e0:	1f ae       	std	Y+63, r1	; 0x3f
    45e2:	6d 97       	sbiw	r28, 0x1d	; 29
    45e4:	6d 96       	adiw	r28, 0x1d	; 29
    45e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45ea:	6d 97       	sbiw	r28, 0x1d	; 29
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	28 2b       	or	r18, r24
    45f2:	39 2b       	or	r19, r25
    45f4:	45 fb       	bst	r20, 5
    45f6:	44 27       	eor	r20, r20
    45f8:	40 f9       	bld	r20, 0
    45fa:	6e 96       	adiw	r28, 0x1e	; 30
    45fc:	4f af       	std	Y+63, r20	; 0x3f
    45fe:	6e 97       	sbiw	r28, 0x1e	; 30
    4600:	6f 96       	adiw	r28, 0x1f	; 31
    4602:	1f ae       	std	Y+63, r1	; 0x3f
    4604:	6f 97       	sbiw	r28, 0x1f	; 31
    4606:	6f 96       	adiw	r28, 0x1f	; 31
    4608:	8e ad       	ldd	r24, Y+62	; 0x3e
    460a:	9f ad       	ldd	r25, Y+63	; 0x3f
    460c:	6f 97       	sbiw	r28, 0x1f	; 31
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	88 0f       	add	r24, r24
    4614:	99 1f       	adc	r25, r25
    4616:	88 0f       	add	r24, r24
    4618:	99 1f       	adc	r25, r25
    461a:	28 2b       	or	r18, r24
    461c:	39 2b       	or	r19, r25
    461e:	47 e1       	ldi	r20, 0x17	; 23
    4620:	42 9f       	mul	r20, r18
    4622:	c0 01       	movw	r24, r0
    4624:	43 9f       	mul	r20, r19
    4626:	90 0d       	add	r25, r0
    4628:	11 24       	eor	r1, r1
    462a:	fc 01       	movw	r30, r24
    462c:	e2 53       	subi	r30, 0x32	; 50
    462e:	ff 4d       	sbci	r31, 0xDF	; 223
    4630:	82 89       	ldd	r24, Z+18	; 0x12
    4632:	88 23       	and	r24, r24
    4634:	59 f0       	breq	.+22     	; 0x464c <__stack+0x64d>
    4636:	e0 e6       	ldi	r30, 0x60	; 96
    4638:	f6 e0       	ldi	r31, 0x06	; 6
    463a:	80 85       	ldd	r24, Z+8	; 0x08
    463c:	88 23       	and	r24, r24
    463e:	34 f0       	brlt	.+12     	; 0x464c <__stack+0x64d>
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	80 93 bd 20 	sts	0x20BD, r24
    4648:	90 93 be 20 	sts	0x20BE, r25
    464c:	90 91 9e 23 	lds	r25, 0x239E
    4650:	80 91 9f 23 	lds	r24, 0x239F
    4654:	90 93 bc 23 	sts	0x23BC, r25
    4658:	80 93 bd 23 	sts	0x23BD, r24
    465c:	90 93 be 23 	sts	0x23BE, r25
    4660:	80 93 bf 23 	sts	0x23BF, r24
    4664:	90 93 c0 23 	sts	0x23C0, r25
    4668:	80 93 c1 23 	sts	0x23C1, r24
    466c:	90 93 c2 23 	sts	0x23C2, r25
    4670:	80 93 c3 23 	sts	0x23C3, r24
    4674:	aa ea       	ldi	r26, 0xAA	; 170
    4676:	b3 e2       	ldi	r27, 0x23	; 35
    4678:	9c 91       	ld	r25, X
    467a:	80 91 ab 23 	lds	r24, 0x23AB
    467e:	90 93 c4 23 	sts	0x23C4, r25
    4682:	80 93 c5 23 	sts	0x23C5, r24
    4686:	eb e3       	ldi	r30, 0x3B	; 59
    4688:	f4 e2       	ldi	r31, 0x24	; 36
    468a:	80 81       	ld	r24, Z
    468c:	91 81       	ldd	r25, Z+1	; 0x01
    468e:	80 93 c6 23 	sts	0x23C6, r24
    4692:	90 93 c7 23 	sts	0x23C7, r25
    4696:	e7 e5       	ldi	r30, 0x57	; 87
    4698:	f4 e2       	ldi	r31, 0x24	; 36
    469a:	80 81       	ld	r24, Z
    469c:	91 81       	ldd	r25, Z+1	; 0x01
    469e:	80 93 c8 23 	sts	0x23C8, r24
    46a2:	90 93 c9 23 	sts	0x23C9, r25
    46a6:	e2 ee       	ldi	r30, 0xE2	; 226
    46a8:	f3 e2       	ldi	r31, 0x23	; 35
    46aa:	80 81       	ld	r24, Z
    46ac:	91 81       	ldd	r25, Z+1	; 0x01
    46ae:	80 93 ca 23 	sts	0x23CA, r24
    46b2:	90 93 cb 23 	sts	0x23CB, r25
    46b6:	80 91 bb 20 	lds	r24, 0x20BB
    46ba:	90 91 bc 20 	lds	r25, 0x20BC
    46be:	95 95       	asr	r25
    46c0:	87 95       	ror	r24
    46c2:	95 95       	asr	r25
    46c4:	87 95       	ror	r24
    46c6:	95 95       	asr	r25
    46c8:	87 95       	ror	r24
    46ca:	95 95       	asr	r25
    46cc:	87 95       	ror	r24
    46ce:	80 93 cc 23 	sts	0x23CC, r24
    46d2:	60 e2       	ldi	r22, 0x20	; 32
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	8c eb       	ldi	r24, 0xBC	; 188
    46d8:	93 e2       	ldi	r25, 0x23	; 35
    46da:	32 d2       	rcall	.+1124   	; 0x4b40 <NRF24L01_L_Write_TX_Buf>
    46dc:	21 d1       	rcall	.+578    	; 0x4920 <NRF24L01_L_RF_TX>
    46de:	00 00       	nop
    46e0:	0c 94 99 19 	jmp	0x3332	; 0x3332 <main+0x202>

000046e4 <__vector_119>:
int buff_u_temp;
unsigned char reply2_tmp;


ISR(USARTF0_RXC_vect)        ///////////Driver M.2  &  M.3
{
    46e4:	1f 92       	push	r1
    46e6:	0f 92       	push	r0
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	0f 92       	push	r0
    46ec:	11 24       	eor	r1, r1
    46ee:	08 b6       	in	r0, 0x38	; 56
    46f0:	0f 92       	push	r0
    46f2:	18 be       	out	0x38, r1	; 56
    46f4:	0b b6       	in	r0, 0x3b	; 59
    46f6:	0f 92       	push	r0
    46f8:	1b be       	out	0x3b, r1	; 59
    46fa:	2f 93       	push	r18
    46fc:	8f 93       	push	r24
    46fe:	9f 93       	push	r25
    4700:	ef 93       	push	r30
    4702:	ff 93       	push	r31
	
	//char buff_reply [16];
	unsigned char data;
	data=USARTF0_DATA;
    4704:	20 91 a0 0b 	lds	r18, 0x0BA0
   
	

	switch(ask_cnt0)
    4708:	80 91 b4 20 	lds	r24, 0x20B4
    470c:	90 91 b5 20 	lds	r25, 0x20B5
    4710:	82 30       	cpi	r24, 0x02	; 2
    4712:	91 05       	cpc	r25, r1
    4714:	39 f1       	breq	.+78     	; 0x4764 <__vector_119+0x80>
    4716:	2c f4       	brge	.+10     	; 0x4722 <__vector_119+0x3e>
    4718:	00 97       	sbiw	r24, 0x00	; 0
    471a:	49 f0       	breq	.+18     	; 0x472e <__vector_119+0x4a>
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	a9 f0       	breq	.+42     	; 0x474a <__vector_119+0x66>
    4720:	62 c0       	rjmp	.+196    	; 0x47e6 <__vector_119+0x102>
    4722:	83 30       	cpi	r24, 0x03	; 3
    4724:	91 05       	cpc	r25, r1
    4726:	71 f1       	breq	.+92     	; 0x4784 <__vector_119+0xa0>
    4728:	04 97       	sbiw	r24, 0x04	; 4
    472a:	a9 f1       	breq	.+106    	; 0x4796 <__vector_119+0xb2>
    472c:	5c c0       	rjmp	.+184    	; 0x47e6 <__vector_119+0x102>
	{
		case 0:
		if (data== '*')
    472e:	2a 32       	cpi	r18, 0x2A	; 42
    4730:	09 f0       	breq	.+2      	; 0x4734 <__vector_119+0x50>
    4732:	59 c0       	rjmp	.+178    	; 0x47e6 <__vector_119+0x102>
		{
			LED_Green_PORT.OUTTGL = LED_Green_PIN_bm;
    4734:	84 e0       	ldi	r24, 0x04	; 4
    4736:	e0 e6       	ldi	r30, 0x60	; 96
    4738:	f6 e0       	ldi	r31, 0x06	; 6
    473a:	87 83       	std	Z+7, r24	; 0x07
			ask_cnt0++;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	80 93 b4 20 	sts	0x20B4, r24
    4744:	90 93 b5 20 	sts	0x20B5, r25
    4748:	4e c0       	rjmp	.+156    	; 0x47e6 <__vector_119+0x102>
		}
		break;

		case 1:
		buff_reply_tmp0=data&0x0ff;
    474a:	82 2f       	mov	r24, r18
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	80 93 6f 24 	sts	0x246F, r24
    4752:	90 93 70 24 	sts	0x2470, r25
		//tmp=data;
		ask_cnt0++;
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	80 93 b4 20 	sts	0x20B4, r24
    475e:	90 93 b5 20 	sts	0x20B5, r25
		break;
    4762:	41 c0       	rjmp	.+130    	; 0x47e6 <__vector_119+0x102>

		case 2:
		buff_reply_tmp0|=(data<<8)&0x0ff00;
    4764:	80 91 6f 24 	lds	r24, 0x246F
    4768:	90 91 70 24 	lds	r25, 0x2470
    476c:	92 2b       	or	r25, r18
    476e:	80 93 6f 24 	sts	0x246F, r24
    4772:	90 93 70 24 	sts	0x2470, r25
		//master=data;
		ask_cnt0++;
    4776:	83 e0       	ldi	r24, 0x03	; 3
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	80 93 b4 20 	sts	0x20B4, r24
    477e:	90 93 b5 20 	sts	0x20B5, r25
		break;
    4782:	31 c0       	rjmp	.+98     	; 0x47e6 <__vector_119+0x102>

		case 3:
		reply2_tmp = data;
    4784:	20 93 03 24 	sts	0x2403, r18
		ask_cnt0++;
    4788:	84 e0       	ldi	r24, 0x04	; 4
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	80 93 b4 20 	sts	0x20B4, r24
    4790:	90 93 b5 20 	sts	0x20B5, r25
		break;
    4794:	28 c0       	rjmp	.+80     	; 0x47e6 <__vector_119+0x102>
		//ask_cnt++;
		//break;


		case 4:
		if (data=='#')
    4796:	23 32       	cpi	r18, 0x23	; 35
    4798:	11 f5       	brne	.+68     	; 0x47de <__vector_119+0xfa>
		{
		
			
			switch(reply2_tmp)
    479a:	20 91 03 24 	lds	r18, 0x2403
    479e:	22 30       	cpi	r18, 0x02	; 2
    47a0:	19 f0       	breq	.+6      	; 0x47a8 <__vector_119+0xc4>
    47a2:	23 30       	cpi	r18, 0x03	; 3
    47a4:	51 f0       	breq	.+20     	; 0x47ba <__vector_119+0xd6>
    47a6:	11 c0       	rjmp	.+34     	; 0x47ca <__vector_119+0xe6>
			{
				case 2:
				M2.Hall=buff_reply_tmp0;
    47a8:	80 91 6f 24 	lds	r24, 0x246F
    47ac:	90 91 70 24 	lds	r25, 0x2470
    47b0:	80 93 55 24 	sts	0x2455, r24
    47b4:	90 93 56 24 	sts	0x2456, r25
				break;
    47b8:	08 c0       	rjmp	.+16     	; 0x47ca <__vector_119+0xe6>
				
				case 3:
				M3.Hall=buff_reply_tmp0;
    47ba:	80 91 6f 24 	lds	r24, 0x246F
    47be:	90 91 70 24 	lds	r25, 0x2470
    47c2:	80 93 e0 23 	sts	0x23E0, r24
    47c6:	90 93 e1 23 	sts	0x23E1, r25
				break; 
			}
			
			buff_reply=buff_reply_tmp0;
    47ca:	80 91 6f 24 	lds	r24, 0x246F
    47ce:	90 91 70 24 	lds	r25, 0x2470
    47d2:	80 93 9e 23 	sts	0x239E, r24
    47d6:	90 93 9f 23 	sts	0x239F, r25
			reply2 = reply2_tmp;
    47da:	20 93 04 22 	sts	0x2204, r18


			//flg_reply=0;
			ask_cnt0=0;
		}
		ask_cnt0=0;
    47de:	10 92 b4 20 	sts	0x20B4, r1
    47e2:	10 92 b5 20 	sts	0x20B5, r1
		break;
	}
}
    47e6:	ff 91       	pop	r31
    47e8:	ef 91       	pop	r30
    47ea:	9f 91       	pop	r25
    47ec:	8f 91       	pop	r24
    47ee:	2f 91       	pop	r18
    47f0:	0f 90       	pop	r0
    47f2:	0b be       	out	0x3b, r0	; 59
    47f4:	0f 90       	pop	r0
    47f6:	08 be       	out	0x38, r0	; 56
    47f8:	0f 90       	pop	r0
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	0f 90       	pop	r0
    47fe:	1f 90       	pop	r1
    4800:	18 95       	reti

00004802 <__vector_122>:

ISR(USARTF1_RXC_vect)   ///////////// Driver  M.0  &  M.1
{
    4802:	1f 92       	push	r1
    4804:	0f 92       	push	r0
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	0f 92       	push	r0
    480a:	11 24       	eor	r1, r1
    480c:	08 b6       	in	r0, 0x38	; 56
    480e:	0f 92       	push	r0
    4810:	18 be       	out	0x38, r1	; 56
    4812:	0b b6       	in	r0, 0x3b	; 59
    4814:	0f 92       	push	r0
    4816:	1b be       	out	0x3b, r1	; 59
    4818:	2f 93       	push	r18
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	ef 93       	push	r30
    4820:	ff 93       	push	r31
	
	
	unsigned char data;
	data=USARTF1_DATA;
    4822:	20 91 b0 0b 	lds	r18, 0x0BB0

	


	switch(ask_cnt1)
    4826:	80 91 b2 20 	lds	r24, 0x20B2
    482a:	90 91 b3 20 	lds	r25, 0x20B3
    482e:	82 30       	cpi	r24, 0x02	; 2
    4830:	91 05       	cpc	r25, r1
    4832:	39 f1       	breq	.+78     	; 0x4882 <__vector_122+0x80>
    4834:	2c f4       	brge	.+10     	; 0x4840 <__vector_122+0x3e>
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	49 f0       	breq	.+18     	; 0x484c <__vector_122+0x4a>
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	a9 f0       	breq	.+42     	; 0x4868 <__vector_122+0x66>
    483e:	62 c0       	rjmp	.+196    	; 0x4904 <__vector_122+0x102>
    4840:	83 30       	cpi	r24, 0x03	; 3
    4842:	91 05       	cpc	r25, r1
    4844:	71 f1       	breq	.+92     	; 0x48a2 <__vector_122+0xa0>
    4846:	04 97       	sbiw	r24, 0x04	; 4
    4848:	a9 f1       	breq	.+106    	; 0x48b4 <__vector_122+0xb2>
    484a:	5c c0       	rjmp	.+184    	; 0x4904 <__vector_122+0x102>
	{
		case 0:
		if (data== '*')
    484c:	2a 32       	cpi	r18, 0x2A	; 42
    484e:	09 f0       	breq	.+2      	; 0x4852 <__vector_122+0x50>
    4850:	59 c0       	rjmp	.+178    	; 0x4904 <__vector_122+0x102>
		{
			LED_Red_PORT.OUTTGL=LED_Red_PIN_bm;
    4852:	80 e2       	ldi	r24, 0x20	; 32
    4854:	e0 e6       	ldi	r30, 0x60	; 96
    4856:	f6 e0       	ldi	r31, 0x06	; 6
    4858:	87 83       	std	Z+7, r24	; 0x07
			ask_cnt1++;
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	80 93 b2 20 	sts	0x20B2, r24
    4862:	90 93 b3 20 	sts	0x20B3, r25
    4866:	4e c0       	rjmp	.+156    	; 0x4904 <__vector_122+0x102>
		}
		break;

		case 1:
		buff_reply_tmp1=data&0x0ff;
    4868:	82 2f       	mov	r24, r18
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	80 93 4c 24 	sts	0x244C, r24
    4870:	90 93 4d 24 	sts	0x244D, r25
		ask_cnt1++;
    4874:	82 e0       	ldi	r24, 0x02	; 2
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	80 93 b2 20 	sts	0x20B2, r24
    487c:	90 93 b3 20 	sts	0x20B3, r25
		break;
    4880:	41 c0       	rjmp	.+130    	; 0x4904 <__vector_122+0x102>

		case 2:
		buff_reply_tmp1|=(data<<8)&0x0ff00;
    4882:	80 91 4c 24 	lds	r24, 0x244C
    4886:	90 91 4d 24 	lds	r25, 0x244D
    488a:	92 2b       	or	r25, r18
    488c:	80 93 4c 24 	sts	0x244C, r24
    4890:	90 93 4d 24 	sts	0x244D, r25
		ask_cnt1++;
    4894:	83 e0       	ldi	r24, 0x03	; 3
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	80 93 b2 20 	sts	0x20B2, r24
    489c:	90 93 b3 20 	sts	0x20B3, r25
		break;
    48a0:	31 c0       	rjmp	.+98     	; 0x4904 <__vector_122+0x102>

		case 3:
		reply2_tmp = data;
    48a2:	20 93 03 24 	sts	0x2403, r18
		ask_cnt1++;
    48a6:	84 e0       	ldi	r24, 0x04	; 4
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	80 93 b2 20 	sts	0x20B2, r24
    48ae:	90 93 b3 20 	sts	0x20B3, r25
		break;
    48b2:	28 c0       	rjmp	.+80     	; 0x4904 <__vector_122+0x102>
		//ask_cnt++;
		//break;


		case 4:
		if (data=='#')
    48b4:	23 32       	cpi	r18, 0x23	; 35
    48b6:	11 f5       	brne	.+68     	; 0x48fc <__vector_122+0xfa>
		{

			switch(reply2_tmp)
    48b8:	20 91 03 24 	lds	r18, 0x2403
    48bc:	22 23       	and	r18, r18
    48be:	19 f0       	breq	.+6      	; 0x48c6 <__vector_122+0xc4>
    48c0:	21 30       	cpi	r18, 0x01	; 1
    48c2:	51 f0       	breq	.+20     	; 0x48d8 <__vector_122+0xd6>
    48c4:	11 c0       	rjmp	.+34     	; 0x48e8 <__vector_122+0xe6>
			{
				case 0:
				M0.Hall=buff_reply_tmp1;
    48c6:	80 91 4c 24 	lds	r24, 0x244C
    48ca:	90 91 4d 24 	lds	r25, 0x244D
    48ce:	80 93 a8 23 	sts	0x23A8, r24
    48d2:	90 93 a9 23 	sts	0x23A9, r25
				break;
    48d6:	08 c0       	rjmp	.+16     	; 0x48e8 <__vector_122+0xe6>
							
				case 1:
				M1.Hall=buff_reply_tmp1;
    48d8:	80 91 4c 24 	lds	r24, 0x244C
    48dc:	90 91 4d 24 	lds	r25, 0x244D
    48e0:	80 93 39 24 	sts	0x2439, r24
    48e4:	90 93 3a 24 	sts	0x243A, r25
				break;
			}
						
			//LED_Green_PORT.OUTTGL = LED_Green_PIN_bm;
			buff_reply=buff_reply_tmp1;
    48e8:	80 91 4c 24 	lds	r24, 0x244C
    48ec:	90 91 4d 24 	lds	r25, 0x244D
    48f0:	80 93 9e 23 	sts	0x239E, r24
    48f4:	90 93 9f 23 	sts	0x239F, r25
			reply2 = reply2_tmp;
    48f8:	20 93 04 22 	sts	0x2204, r18


			//flg_reply=0;
			ask_cnt1=0;
		}
		ask_cnt1=0;
    48fc:	10 92 b2 20 	sts	0x20B2, r1
    4900:	10 92 b3 20 	sts	0x20B3, r1
		break;
	}
	
}
    4904:	ff 91       	pop	r31
    4906:	ef 91       	pop	r30
    4908:	9f 91       	pop	r25
    490a:	8f 91       	pop	r24
    490c:	2f 91       	pop	r18
    490e:	0f 90       	pop	r0
    4910:	0b be       	out	0x3b, r0	; 59
    4912:	0f 90       	pop	r0
    4914:	08 be       	out	0x38, r0	; 56
    4916:	0f 90       	pop	r0
    4918:	0f be       	out	0x3f, r0	; 63
    491a:	0f 90       	pop	r0
    491c:	1f 90       	pop	r1
    491e:	18 95       	reti

00004920 <NRF24L01_L_RF_TX>:
		NRF24L01_L_RF_TX();
	while ((NRF24L01_L_Get_Status() & _TX_DS) != _TX_DS)
	{
		
	}		
	NRF24L01_L_Clear_Interrupts();
    4920:	e0 e8       	ldi	r30, 0x80	; 128
    4922:	f6 e0       	ldi	r31, 0x06	; 6
    4924:	82 e0       	ldi	r24, 0x02	; 2
    4926:	86 83       	std	Z+6, r24	; 0x06
    4928:	85 83       	std	Z+5, r24	; 0x05
    492a:	8a e6       	ldi	r24, 0x6A	; 106
    492c:	8a 95       	dec	r24
    492e:	f1 f7       	brne	.-4      	; 0x492c <NRF24L01_L_RF_TX+0xc>
    4930:	00 c0       	rjmp	.+0      	; 0x4932 <NRF24L01_L_RF_TX+0x12>
    4932:	82 e0       	ldi	r24, 0x02	; 2
    4934:	86 83       	std	Z+6, r24	; 0x06
    4936:	08 95       	ret

00004938 <SPI_L>:
    4938:	e0 ec       	ldi	r30, 0xC0	; 192
    493a:	fa e0       	ldi	r31, 0x0A	; 10
    493c:	83 83       	std	Z+3, r24	; 0x03
    493e:	82 81       	ldd	r24, Z+2	; 0x02
    4940:	88 23       	and	r24, r24
    4942:	ec f7       	brge	.-6      	; 0x493e <SPI_L+0x6>
    4944:	e0 ec       	ldi	r30, 0xC0	; 192
    4946:	fa e0       	ldi	r31, 0x0A	; 10
    4948:	83 81       	ldd	r24, Z+3	; 0x03
    494a:	08 95       	ret

0000494c <NRF24L01_L_ReadReg>:
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	c0 e8       	ldi	r28, 0x80	; 128
    4954:	d6 e0       	ldi	r29, 0x06	; 6
    4956:	10 e1       	ldi	r17, 0x10	; 16
    4958:	1e 83       	std	Y+6, r17	; 0x06
    495a:	ee df       	rcall	.-36     	; 0x4938 <SPI_L>
    495c:	8f ef       	ldi	r24, 0xFF	; 255
    495e:	ec df       	rcall	.-40     	; 0x4938 <SPI_L>
    4960:	1d 83       	std	Y+5, r17	; 0x05
    4962:	df 91       	pop	r29
    4964:	cf 91       	pop	r28
    4966:	1f 91       	pop	r17
    4968:	08 95       	ret

0000496a <NRF24L01_L_WriteReg>:
    496a:	ff 92       	push	r15
    496c:	0f 93       	push	r16
    496e:	1f 93       	push	r17
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	f6 2e       	mov	r15, r22
    4976:	c0 e8       	ldi	r28, 0x80	; 128
    4978:	d6 e0       	ldi	r29, 0x06	; 6
    497a:	10 e1       	ldi	r17, 0x10	; 16
    497c:	1e 83       	std	Y+6, r17	; 0x06
    497e:	dc df       	rcall	.-72     	; 0x4938 <SPI_L>
    4980:	08 2f       	mov	r16, r24
    4982:	8f 2d       	mov	r24, r15
    4984:	d9 df       	rcall	.-78     	; 0x4938 <SPI_L>
    4986:	1d 83       	std	Y+5, r17	; 0x05
    4988:	80 2f       	mov	r24, r16
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	1f 91       	pop	r17
    4990:	0f 91       	pop	r16
    4992:	ff 90       	pop	r15
    4994:	08 95       	ret

00004996 <NRF24L01_L_Set_CH>:
    4996:	68 2f       	mov	r22, r24
    4998:	6f 77       	andi	r22, 0x7F	; 127
    499a:	85 e2       	ldi	r24, 0x25	; 37
    499c:	e6 cf       	rjmp	.-52     	; 0x496a <NRF24L01_L_WriteReg>
    499e:	08 95       	ret

000049a0 <NRF24L01_L_Set_ShockBurst>:
    49a0:	cf 93       	push	r28
    49a2:	c8 2f       	mov	r28, r24
    49a4:	68 2f       	mov	r22, r24
    49a6:	84 e2       	ldi	r24, 0x24	; 36
    49a8:	e0 df       	rcall	.-64     	; 0x496a <NRF24L01_L_WriteReg>
    49aa:	6c 2f       	mov	r22, r28
    49ac:	81 e2       	ldi	r24, 0x21	; 33
    49ae:	dd df       	rcall	.-70     	; 0x496a <NRF24L01_L_WriteReg>
    49b0:	cf 91       	pop	r28
    49b2:	08 95       	ret

000049b4 <NRF24L01_L_Set_Address_Width>:
    49b4:	63 e0       	ldi	r22, 0x03	; 3
    49b6:	83 e2       	ldi	r24, 0x23	; 35
    49b8:	d8 cf       	rjmp	.-80     	; 0x496a <NRF24L01_L_WriteReg>
    49ba:	08 95       	ret

000049bc <NRF24L01_L_Clear_Interrupts>:
    49bc:	60 e7       	ldi	r22, 0x70	; 112
    49be:	87 e2       	ldi	r24, 0x27	; 39
    49c0:	d4 cf       	rjmp	.-88     	; 0x496a <NRF24L01_L_WriteReg>
    49c2:	08 95       	ret

000049c4 <NRF24L01_L_ReadRegBuf>:
    49c4:	df 92       	push	r13
    49c6:	ef 92       	push	r14
    49c8:	ff 92       	push	r15
    49ca:	0f 93       	push	r16
    49cc:	1f 93       	push	r17
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	7b 01       	movw	r14, r22
    49d4:	8a 01       	movw	r16, r20
    49d6:	90 e1       	ldi	r25, 0x10	; 16
    49d8:	e0 e8       	ldi	r30, 0x80	; 128
    49da:	f6 e0       	ldi	r31, 0x06	; 6
    49dc:	96 83       	std	Z+6, r25	; 0x06
    49de:	ac df       	rcall	.-168    	; 0x4938 <SPI_L>
    49e0:	d8 2e       	mov	r13, r24
    49e2:	10 16       	cp	r1, r16
    49e4:	11 06       	cpc	r1, r17
    49e6:	4c f4       	brge	.+18     	; 0x49fa <NRF24L01_L_ReadRegBuf+0x36>
    49e8:	e7 01       	movw	r28, r14
    49ea:	0e 0d       	add	r16, r14
    49ec:	1f 1d       	adc	r17, r15
    49ee:	8f ef       	ldi	r24, 0xFF	; 255
    49f0:	a3 df       	rcall	.-186    	; 0x4938 <SPI_L>
    49f2:	89 93       	st	Y+, r24
    49f4:	c0 17       	cp	r28, r16
    49f6:	d1 07       	cpc	r29, r17
    49f8:	d1 f7       	brne	.-12     	; 0x49ee <NRF24L01_L_ReadRegBuf+0x2a>
    49fa:	80 e1       	ldi	r24, 0x10	; 16
    49fc:	e0 e8       	ldi	r30, 0x80	; 128
    49fe:	f6 e0       	ldi	r31, 0x06	; 6
    4a00:	85 83       	std	Z+5, r24	; 0x05
    4a02:	8d 2d       	mov	r24, r13
    4a04:	df 91       	pop	r29
    4a06:	cf 91       	pop	r28
    4a08:	1f 91       	pop	r17
    4a0a:	0f 91       	pop	r16
    4a0c:	ff 90       	pop	r15
    4a0e:	ef 90       	pop	r14
    4a10:	df 90       	pop	r13
    4a12:	08 95       	ret

00004a14 <NRF24L01_L_Read_RX_Buf>:
    4a14:	ab 01       	movw	r20, r22
    4a16:	bc 01       	movw	r22, r24
    4a18:	81 e6       	ldi	r24, 0x61	; 97
    4a1a:	d4 cf       	rjmp	.-88     	; 0x49c4 <NRF24L01_L_ReadRegBuf>
    4a1c:	08 95       	ret

00004a1e <NRF24L01_L_WriteRegBuf>:
    4a1e:	df 92       	push	r13
    4a20:	ef 92       	push	r14
    4a22:	ff 92       	push	r15
    4a24:	0f 93       	push	r16
    4a26:	1f 93       	push	r17
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	7b 01       	movw	r14, r22
    4a2e:	8a 01       	movw	r16, r20
    4a30:	90 e1       	ldi	r25, 0x10	; 16
    4a32:	e0 e8       	ldi	r30, 0x80	; 128
    4a34:	f6 e0       	ldi	r31, 0x06	; 6
    4a36:	96 83       	std	Z+6, r25	; 0x06
    4a38:	7f df       	rcall	.-258    	; 0x4938 <SPI_L>
    4a3a:	d8 2e       	mov	r13, r24
    4a3c:	10 16       	cp	r1, r16
    4a3e:	11 06       	cpc	r1, r17
    4a40:	44 f4       	brge	.+16     	; 0x4a52 <NRF24L01_L_WriteRegBuf+0x34>
    4a42:	e7 01       	movw	r28, r14
    4a44:	0e 0d       	add	r16, r14
    4a46:	1f 1d       	adc	r17, r15
    4a48:	89 91       	ld	r24, Y+
    4a4a:	76 df       	rcall	.-276    	; 0x4938 <SPI_L>
    4a4c:	c0 17       	cp	r28, r16
    4a4e:	d1 07       	cpc	r29, r17
    4a50:	d9 f7       	brne	.-10     	; 0x4a48 <NRF24L01_L_WriteRegBuf+0x2a>
    4a52:	80 e1       	ldi	r24, 0x10	; 16
    4a54:	e0 e8       	ldi	r30, 0x80	; 128
    4a56:	f6 e0       	ldi	r31, 0x06	; 6
    4a58:	85 83       	std	Z+5, r24	; 0x05
    4a5a:	8d 2d       	mov	r24, r13
    4a5c:	df 91       	pop	r29
    4a5e:	cf 91       	pop	r28
    4a60:	1f 91       	pop	r17
    4a62:	0f 91       	pop	r16
    4a64:	ff 90       	pop	r15
    4a66:	ef 90       	pop	r14
    4a68:	df 90       	pop	r13
    4a6a:	08 95       	ret

00004a6c <NRF24L01_L_Set_RX_Pipe>:
    4a6c:	ef 92       	push	r14
    4a6e:	ff 92       	push	r15
    4a70:	0f 93       	push	r16
    4a72:	1f 93       	push	r17
    4a74:	cf 93       	push	r28
    4a76:	df 93       	push	r29
    4a78:	f8 2e       	mov	r15, r24
    4a7a:	eb 01       	movw	r28, r22
    4a7c:	8a 01       	movw	r16, r20
    4a7e:	e2 2e       	mov	r14, r18
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	64 df       	rcall	.-312    	; 0x494c <NRF24L01_L_ReadReg>
    4a84:	41 e0       	ldi	r20, 0x01	; 1
    4a86:	50 e0       	ldi	r21, 0x00	; 0
    4a88:	0f 2c       	mov	r0, r15
    4a8a:	02 c0       	rjmp	.+4      	; 0x4a90 <NRF24L01_L_Set_RX_Pipe+0x24>
    4a8c:	44 0f       	add	r20, r20
    4a8e:	55 1f       	adc	r21, r21
    4a90:	0a 94       	dec	r0
    4a92:	e2 f7       	brpl	.-8      	; 0x4a8c <NRF24L01_L_Set_RX_Pipe+0x20>
    4a94:	68 2f       	mov	r22, r24
    4a96:	64 2b       	or	r22, r20
    4a98:	82 e2       	ldi	r24, 0x22	; 34
    4a9a:	67 df       	rcall	.-306    	; 0x496a <NRF24L01_L_WriteReg>
    4a9c:	81 e1       	ldi	r24, 0x11	; 17
    4a9e:	8f 0d       	add	r24, r15
    4aa0:	6e 2d       	mov	r22, r14
    4aa2:	80 62       	ori	r24, 0x20	; 32
    4aa4:	62 df       	rcall	.-316    	; 0x496a <NRF24L01_L_WriteReg>
    4aa6:	8a e0       	ldi	r24, 0x0A	; 10
    4aa8:	8f 0d       	add	r24, r15
    4aaa:	a8 01       	movw	r20, r16
    4aac:	be 01       	movw	r22, r28
    4aae:	80 62       	ori	r24, 0x20	; 32
    4ab0:	b6 df       	rcall	.-148    	; 0x4a1e <NRF24L01_L_WriteRegBuf>
    4ab2:	df 91       	pop	r29
    4ab4:	cf 91       	pop	r28
    4ab6:	1f 91       	pop	r17
    4ab8:	0f 91       	pop	r16
    4aba:	ff 90       	pop	r15
    4abc:	ef 90       	pop	r14
    4abe:	08 95       	ret

00004ac0 <NRF24L01_L_Set_TX_Address>:
    4ac0:	ab 01       	movw	r20, r22
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	80 e3       	ldi	r24, 0x30	; 48
    4ac6:	ab cf       	rjmp	.-170    	; 0x4a1e <NRF24L01_L_WriteRegBuf>
    4ac8:	08 95       	ret

00004aca <NRF24L01_L_Init_milad>:
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	f8 2e       	mov	r15, r24
    4adc:	d6 2e       	mov	r13, r22
    4ade:	14 2f       	mov	r17, r20
    4ae0:	e9 01       	movw	r28, r18
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	5d df       	rcall	.-326    	; 0x49a0 <NRF24L01_L_Set_ShockBurst>
    4ae6:	61 e0       	ldi	r22, 0x01	; 1
    4ae8:	81 e2       	ldi	r24, 0x21	; 33
    4aea:	3f df       	rcall	.-386    	; 0x496a <NRF24L01_L_WriteReg>
    4aec:	6f e4       	ldi	r22, 0x4F	; 79
    4aee:	84 e2       	ldi	r24, 0x24	; 36
    4af0:	3c df       	rcall	.-392    	; 0x496a <NRF24L01_L_WriteReg>
    4af2:	11 60       	ori	r17, 0x01	; 1
    4af4:	61 2f       	mov	r22, r17
    4af6:	6c 29       	or	r22, r12
    4af8:	86 e2       	ldi	r24, 0x26	; 38
    4afa:	37 df       	rcall	.-402    	; 0x496a <NRF24L01_L_WriteReg>
    4afc:	80 2f       	mov	r24, r16
    4afe:	5a df       	rcall	.-332    	; 0x49b4 <NRF24L01_L_Set_Address_Width>
    4b00:	11 27       	eor	r17, r17
    4b02:	07 fd       	sbrc	r16, 7
    4b04:	10 95       	com	r17
    4b06:	2e 2d       	mov	r18, r14
    4b08:	a8 01       	movw	r20, r16
    4b0a:	be 01       	movw	r22, r28
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	ae df       	rcall	.-164    	; 0x4a6c <NRF24L01_L_Set_RX_Pipe>
    4b10:	8d 2d       	mov	r24, r13
    4b12:	41 df       	rcall	.-382    	; 0x4996 <NRF24L01_L_Set_CH>
    4b14:	b8 01       	movw	r22, r16
    4b16:	ce 01       	movw	r24, r28
    4b18:	d3 df       	rcall	.-90     	; 0x4ac0 <NRF24L01_L_Set_TX_Address>
    4b1a:	6f 2d       	mov	r22, r15
    4b1c:	6a 60       	ori	r22, 0x0A	; 10
    4b1e:	80 e2       	ldi	r24, 0x20	; 32
    4b20:	24 df       	rcall	.-440    	; 0x496a <NRF24L01_L_WriteReg>
    4b22:	8f ed       	ldi	r24, 0xDF	; 223
    4b24:	9e e2       	ldi	r25, 0x2E	; 46
    4b26:	01 97       	sbiw	r24, 0x01	; 1
    4b28:	f1 f7       	brne	.-4      	; 0x4b26 <NRF24L01_L_Init_milad+0x5c>
    4b2a:	00 c0       	rjmp	.+0      	; 0x4b2c <NRF24L01_L_Init_milad+0x62>
    4b2c:	00 00       	nop
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	ef 90       	pop	r14
    4b3a:	df 90       	pop	r13
    4b3c:	cf 90       	pop	r12
    4b3e:	08 95       	ret

00004b40 <NRF24L01_L_Write_TX_Buf>:
    4b40:	ab 01       	movw	r20, r22
    4b42:	bc 01       	movw	r22, r24
    4b44:	80 ea       	ldi	r24, 0xA0	; 160
    4b46:	6b cf       	rjmp	.-298    	; 0x4a1e <NRF24L01_L_WriteRegBuf>
    4b48:	08 95       	ret

00004b4a <NRF24L01_L_Flush_TX>:

/**
 Empty the transmit buffer

*/
void NRF24L01_L_Flush_TX(void) {
    4b4a:	1f 93       	push	r17
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
	NRF24L01_L_CS_LOW;
    4b50:	c0 e8       	ldi	r28, 0x80	; 128
    4b52:	d6 e0       	ldi	r29, 0x06	; 6
    4b54:	10 e1       	ldi	r17, 0x10	; 16
    4b56:	1e 83       	std	Y+6, r17	; 0x06
	SPI_L(FLUSH_TX);
    4b58:	81 ee       	ldi	r24, 0xE1	; 225
    4b5a:	ee de       	rcall	.-548    	; 0x4938 <SPI_L>
	NRF24L01_L_CS_HIGH;
    4b5c:	1d 83       	std	Y+5, r17	; 0x05
}
    4b5e:	df 91       	pop	r29
    4b60:	cf 91       	pop	r28
    4b62:	1f 91       	pop	r17
    4b64:	08 95       	ret

00004b66 <NRF24L01_L_Flush_RX>:

/**
 Empty the receive buffer
*/
void NRF24L01_L_Flush_RX(void) {
    4b66:	1f 93       	push	r17
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
	NRF24L01_L_CS_LOW;
    4b6c:	c0 e8       	ldi	r28, 0x80	; 128
    4b6e:	d6 e0       	ldi	r29, 0x06	; 6
    4b70:	10 e1       	ldi	r17, 0x10	; 16
    4b72:	1e 83       	std	Y+6, r17	; 0x06
	SPI_L(FLUSH_RX);
    4b74:	82 ee       	ldi	r24, 0xE2	; 226
    4b76:	e0 de       	rcall	.-576    	; 0x4938 <SPI_L>
	NRF24L01_L_CS_HIGH;
    4b78:	1d 83       	std	Y+5, r17	; 0x05
}
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	08 95       	ret

00004b82 <__udivmodsi4>:
    4b82:	a1 e2       	ldi	r26, 0x21	; 33
    4b84:	1a 2e       	mov	r1, r26
    4b86:	aa 1b       	sub	r26, r26
    4b88:	bb 1b       	sub	r27, r27
    4b8a:	fd 01       	movw	r30, r26
    4b8c:	0d c0       	rjmp	.+26     	; 0x4ba8 <__udivmodsi4_ep>

00004b8e <__udivmodsi4_loop>:
    4b8e:	aa 1f       	adc	r26, r26
    4b90:	bb 1f       	adc	r27, r27
    4b92:	ee 1f       	adc	r30, r30
    4b94:	ff 1f       	adc	r31, r31
    4b96:	a2 17       	cp	r26, r18
    4b98:	b3 07       	cpc	r27, r19
    4b9a:	e4 07       	cpc	r30, r20
    4b9c:	f5 07       	cpc	r31, r21
    4b9e:	20 f0       	brcs	.+8      	; 0x4ba8 <__udivmodsi4_ep>
    4ba0:	a2 1b       	sub	r26, r18
    4ba2:	b3 0b       	sbc	r27, r19
    4ba4:	e4 0b       	sbc	r30, r20
    4ba6:	f5 0b       	sbc	r31, r21

00004ba8 <__udivmodsi4_ep>:
    4ba8:	66 1f       	adc	r22, r22
    4baa:	77 1f       	adc	r23, r23
    4bac:	88 1f       	adc	r24, r24
    4bae:	99 1f       	adc	r25, r25
    4bb0:	1a 94       	dec	r1
    4bb2:	69 f7       	brne	.-38     	; 0x4b8e <__udivmodsi4_loop>
    4bb4:	60 95       	com	r22
    4bb6:	70 95       	com	r23
    4bb8:	80 95       	com	r24
    4bba:	90 95       	com	r25
    4bbc:	9b 01       	movw	r18, r22
    4bbe:	ac 01       	movw	r20, r24
    4bc0:	bd 01       	movw	r22, r26
    4bc2:	cf 01       	movw	r24, r30
    4bc4:	08 95       	ret

00004bc6 <__subsf3>:
    4bc6:	50 58       	subi	r21, 0x80	; 128

00004bc8 <__addsf3>:
    4bc8:	bb 27       	eor	r27, r27
    4bca:	aa 27       	eor	r26, r26
    4bcc:	0e d0       	rcall	.+28     	; 0x4bea <__addsf3x>
    4bce:	75 c1       	rjmp	.+746    	; 0x4eba <__fp_round>
    4bd0:	66 d1       	rcall	.+716    	; 0x4e9e <__fp_pscA>
    4bd2:	30 f0       	brcs	.+12     	; 0x4be0 <__addsf3+0x18>
    4bd4:	6b d1       	rcall	.+726    	; 0x4eac <__fp_pscB>
    4bd6:	20 f0       	brcs	.+8      	; 0x4be0 <__addsf3+0x18>
    4bd8:	31 f4       	brne	.+12     	; 0x4be6 <__addsf3+0x1e>
    4bda:	9f 3f       	cpi	r25, 0xFF	; 255
    4bdc:	11 f4       	brne	.+4      	; 0x4be2 <__addsf3+0x1a>
    4bde:	1e f4       	brtc	.+6      	; 0x4be6 <__addsf3+0x1e>
    4be0:	5b c1       	rjmp	.+694    	; 0x4e98 <__fp_nan>
    4be2:	0e f4       	brtc	.+2      	; 0x4be6 <__addsf3+0x1e>
    4be4:	e0 95       	com	r30
    4be6:	e7 fb       	bst	r30, 7
    4be8:	51 c1       	rjmp	.+674    	; 0x4e8c <__fp_inf>

00004bea <__addsf3x>:
    4bea:	e9 2f       	mov	r30, r25
    4bec:	77 d1       	rcall	.+750    	; 0x4edc <__fp_split3>
    4bee:	80 f3       	brcs	.-32     	; 0x4bd0 <__addsf3+0x8>
    4bf0:	ba 17       	cp	r27, r26
    4bf2:	62 07       	cpc	r22, r18
    4bf4:	73 07       	cpc	r23, r19
    4bf6:	84 07       	cpc	r24, r20
    4bf8:	95 07       	cpc	r25, r21
    4bfa:	18 f0       	brcs	.+6      	; 0x4c02 <__addsf3x+0x18>
    4bfc:	71 f4       	brne	.+28     	; 0x4c1a <__addsf3x+0x30>
    4bfe:	9e f5       	brtc	.+102    	; 0x4c66 <__addsf3x+0x7c>
    4c00:	8f c1       	rjmp	.+798    	; 0x4f20 <__fp_zero>
    4c02:	0e f4       	brtc	.+2      	; 0x4c06 <__addsf3x+0x1c>
    4c04:	e0 95       	com	r30
    4c06:	0b 2e       	mov	r0, r27
    4c08:	ba 2f       	mov	r27, r26
    4c0a:	a0 2d       	mov	r26, r0
    4c0c:	0b 01       	movw	r0, r22
    4c0e:	b9 01       	movw	r22, r18
    4c10:	90 01       	movw	r18, r0
    4c12:	0c 01       	movw	r0, r24
    4c14:	ca 01       	movw	r24, r20
    4c16:	a0 01       	movw	r20, r0
    4c18:	11 24       	eor	r1, r1
    4c1a:	ff 27       	eor	r31, r31
    4c1c:	59 1b       	sub	r21, r25
    4c1e:	99 f0       	breq	.+38     	; 0x4c46 <__addsf3x+0x5c>
    4c20:	59 3f       	cpi	r21, 0xF9	; 249
    4c22:	50 f4       	brcc	.+20     	; 0x4c38 <__addsf3x+0x4e>
    4c24:	50 3e       	cpi	r21, 0xE0	; 224
    4c26:	68 f1       	brcs	.+90     	; 0x4c82 <__addsf3x+0x98>
    4c28:	1a 16       	cp	r1, r26
    4c2a:	f0 40       	sbci	r31, 0x00	; 0
    4c2c:	a2 2f       	mov	r26, r18
    4c2e:	23 2f       	mov	r18, r19
    4c30:	34 2f       	mov	r19, r20
    4c32:	44 27       	eor	r20, r20
    4c34:	58 5f       	subi	r21, 0xF8	; 248
    4c36:	f3 cf       	rjmp	.-26     	; 0x4c1e <__addsf3x+0x34>
    4c38:	46 95       	lsr	r20
    4c3a:	37 95       	ror	r19
    4c3c:	27 95       	ror	r18
    4c3e:	a7 95       	ror	r26
    4c40:	f0 40       	sbci	r31, 0x00	; 0
    4c42:	53 95       	inc	r21
    4c44:	c9 f7       	brne	.-14     	; 0x4c38 <__addsf3x+0x4e>
    4c46:	7e f4       	brtc	.+30     	; 0x4c66 <__addsf3x+0x7c>
    4c48:	1f 16       	cp	r1, r31
    4c4a:	ba 0b       	sbc	r27, r26
    4c4c:	62 0b       	sbc	r22, r18
    4c4e:	73 0b       	sbc	r23, r19
    4c50:	84 0b       	sbc	r24, r20
    4c52:	ba f0       	brmi	.+46     	; 0x4c82 <__addsf3x+0x98>
    4c54:	91 50       	subi	r25, 0x01	; 1
    4c56:	a1 f0       	breq	.+40     	; 0x4c80 <__addsf3x+0x96>
    4c58:	ff 0f       	add	r31, r31
    4c5a:	bb 1f       	adc	r27, r27
    4c5c:	66 1f       	adc	r22, r22
    4c5e:	77 1f       	adc	r23, r23
    4c60:	88 1f       	adc	r24, r24
    4c62:	c2 f7       	brpl	.-16     	; 0x4c54 <__addsf3x+0x6a>
    4c64:	0e c0       	rjmp	.+28     	; 0x4c82 <__addsf3x+0x98>
    4c66:	ba 0f       	add	r27, r26
    4c68:	62 1f       	adc	r22, r18
    4c6a:	73 1f       	adc	r23, r19
    4c6c:	84 1f       	adc	r24, r20
    4c6e:	48 f4       	brcc	.+18     	; 0x4c82 <__addsf3x+0x98>
    4c70:	87 95       	ror	r24
    4c72:	77 95       	ror	r23
    4c74:	67 95       	ror	r22
    4c76:	b7 95       	ror	r27
    4c78:	f7 95       	ror	r31
    4c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    4c7c:	08 f0       	brcs	.+2      	; 0x4c80 <__addsf3x+0x96>
    4c7e:	b3 cf       	rjmp	.-154    	; 0x4be6 <__addsf3+0x1e>
    4c80:	93 95       	inc	r25
    4c82:	88 0f       	add	r24, r24
    4c84:	08 f0       	brcs	.+2      	; 0x4c88 <__addsf3x+0x9e>
    4c86:	99 27       	eor	r25, r25
    4c88:	ee 0f       	add	r30, r30
    4c8a:	97 95       	ror	r25
    4c8c:	87 95       	ror	r24
    4c8e:	08 95       	ret

00004c90 <__cmpsf2>:
    4c90:	d9 d0       	rcall	.+434    	; 0x4e44 <__fp_cmp>
    4c92:	08 f4       	brcc	.+2      	; 0x4c96 <__cmpsf2+0x6>
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	08 95       	ret

00004c98 <__divsf3>:
    4c98:	0c d0       	rcall	.+24     	; 0x4cb2 <__divsf3x>
    4c9a:	0f c1       	rjmp	.+542    	; 0x4eba <__fp_round>
    4c9c:	07 d1       	rcall	.+526    	; 0x4eac <__fp_pscB>
    4c9e:	40 f0       	brcs	.+16     	; 0x4cb0 <__divsf3+0x18>
    4ca0:	fe d0       	rcall	.+508    	; 0x4e9e <__fp_pscA>
    4ca2:	30 f0       	brcs	.+12     	; 0x4cb0 <__divsf3+0x18>
    4ca4:	21 f4       	brne	.+8      	; 0x4cae <__divsf3+0x16>
    4ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    4ca8:	19 f0       	breq	.+6      	; 0x4cb0 <__divsf3+0x18>
    4caa:	f0 c0       	rjmp	.+480    	; 0x4e8c <__fp_inf>
    4cac:	51 11       	cpse	r21, r1
    4cae:	39 c1       	rjmp	.+626    	; 0x4f22 <__fp_szero>
    4cb0:	f3 c0       	rjmp	.+486    	; 0x4e98 <__fp_nan>

00004cb2 <__divsf3x>:
    4cb2:	14 d1       	rcall	.+552    	; 0x4edc <__fp_split3>
    4cb4:	98 f3       	brcs	.-26     	; 0x4c9c <__divsf3+0x4>

00004cb6 <__divsf3_pse>:
    4cb6:	99 23       	and	r25, r25
    4cb8:	c9 f3       	breq	.-14     	; 0x4cac <__divsf3+0x14>
    4cba:	55 23       	and	r21, r21
    4cbc:	b1 f3       	breq	.-20     	; 0x4caa <__divsf3+0x12>
    4cbe:	95 1b       	sub	r25, r21
    4cc0:	55 0b       	sbc	r21, r21
    4cc2:	bb 27       	eor	r27, r27
    4cc4:	aa 27       	eor	r26, r26
    4cc6:	62 17       	cp	r22, r18
    4cc8:	73 07       	cpc	r23, r19
    4cca:	84 07       	cpc	r24, r20
    4ccc:	38 f0       	brcs	.+14     	; 0x4cdc <__divsf3_pse+0x26>
    4cce:	9f 5f       	subi	r25, 0xFF	; 255
    4cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cd2:	22 0f       	add	r18, r18
    4cd4:	33 1f       	adc	r19, r19
    4cd6:	44 1f       	adc	r20, r20
    4cd8:	aa 1f       	adc	r26, r26
    4cda:	a9 f3       	breq	.-22     	; 0x4cc6 <__divsf3_pse+0x10>
    4cdc:	33 d0       	rcall	.+102    	; 0x4d44 <__divsf3_pse+0x8e>
    4cde:	0e 2e       	mov	r0, r30
    4ce0:	3a f0       	brmi	.+14     	; 0x4cf0 <__divsf3_pse+0x3a>
    4ce2:	e0 e8       	ldi	r30, 0x80	; 128
    4ce4:	30 d0       	rcall	.+96     	; 0x4d46 <__divsf3_pse+0x90>
    4ce6:	91 50       	subi	r25, 0x01	; 1
    4ce8:	50 40       	sbci	r21, 0x00	; 0
    4cea:	e6 95       	lsr	r30
    4cec:	00 1c       	adc	r0, r0
    4cee:	ca f7       	brpl	.-14     	; 0x4ce2 <__divsf3_pse+0x2c>
    4cf0:	29 d0       	rcall	.+82     	; 0x4d44 <__divsf3_pse+0x8e>
    4cf2:	fe 2f       	mov	r31, r30
    4cf4:	27 d0       	rcall	.+78     	; 0x4d44 <__divsf3_pse+0x8e>
    4cf6:	66 0f       	add	r22, r22
    4cf8:	77 1f       	adc	r23, r23
    4cfa:	88 1f       	adc	r24, r24
    4cfc:	bb 1f       	adc	r27, r27
    4cfe:	26 17       	cp	r18, r22
    4d00:	37 07       	cpc	r19, r23
    4d02:	48 07       	cpc	r20, r24
    4d04:	ab 07       	cpc	r26, r27
    4d06:	b0 e8       	ldi	r27, 0x80	; 128
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <__divsf3_pse+0x56>
    4d0a:	bb 0b       	sbc	r27, r27
    4d0c:	80 2d       	mov	r24, r0
    4d0e:	bf 01       	movw	r22, r30
    4d10:	ff 27       	eor	r31, r31
    4d12:	93 58       	subi	r25, 0x83	; 131
    4d14:	5f 4f       	sbci	r21, 0xFF	; 255
    4d16:	2a f0       	brmi	.+10     	; 0x4d22 <__divsf3_pse+0x6c>
    4d18:	9e 3f       	cpi	r25, 0xFE	; 254
    4d1a:	51 05       	cpc	r21, r1
    4d1c:	68 f0       	brcs	.+26     	; 0x4d38 <__divsf3_pse+0x82>
    4d1e:	b6 c0       	rjmp	.+364    	; 0x4e8c <__fp_inf>
    4d20:	00 c1       	rjmp	.+512    	; 0x4f22 <__fp_szero>
    4d22:	5f 3f       	cpi	r21, 0xFF	; 255
    4d24:	ec f3       	brlt	.-6      	; 0x4d20 <__divsf3_pse+0x6a>
    4d26:	98 3e       	cpi	r25, 0xE8	; 232
    4d28:	dc f3       	brlt	.-10     	; 0x4d20 <__divsf3_pse+0x6a>
    4d2a:	86 95       	lsr	r24
    4d2c:	77 95       	ror	r23
    4d2e:	67 95       	ror	r22
    4d30:	b7 95       	ror	r27
    4d32:	f7 95       	ror	r31
    4d34:	9f 5f       	subi	r25, 0xFF	; 255
    4d36:	c9 f7       	brne	.-14     	; 0x4d2a <__divsf3_pse+0x74>
    4d38:	88 0f       	add	r24, r24
    4d3a:	91 1d       	adc	r25, r1
    4d3c:	96 95       	lsr	r25
    4d3e:	87 95       	ror	r24
    4d40:	97 f9       	bld	r25, 7
    4d42:	08 95       	ret
    4d44:	e1 e0       	ldi	r30, 0x01	; 1
    4d46:	66 0f       	add	r22, r22
    4d48:	77 1f       	adc	r23, r23
    4d4a:	88 1f       	adc	r24, r24
    4d4c:	bb 1f       	adc	r27, r27
    4d4e:	62 17       	cp	r22, r18
    4d50:	73 07       	cpc	r23, r19
    4d52:	84 07       	cpc	r24, r20
    4d54:	ba 07       	cpc	r27, r26
    4d56:	20 f0       	brcs	.+8      	; 0x4d60 <__divsf3_pse+0xaa>
    4d58:	62 1b       	sub	r22, r18
    4d5a:	73 0b       	sbc	r23, r19
    4d5c:	84 0b       	sbc	r24, r20
    4d5e:	ba 0b       	sbc	r27, r26
    4d60:	ee 1f       	adc	r30, r30
    4d62:	88 f7       	brcc	.-30     	; 0x4d46 <__divsf3_pse+0x90>
    4d64:	e0 95       	com	r30
    4d66:	08 95       	ret

00004d68 <__fixsfsi>:
    4d68:	04 d0       	rcall	.+8      	; 0x4d72 <__fixunssfsi>
    4d6a:	68 94       	set
    4d6c:	b1 11       	cpse	r27, r1
    4d6e:	d9 c0       	rjmp	.+434    	; 0x4f22 <__fp_szero>
    4d70:	08 95       	ret

00004d72 <__fixunssfsi>:
    4d72:	bc d0       	rcall	.+376    	; 0x4eec <__fp_splitA>
    4d74:	88 f0       	brcs	.+34     	; 0x4d98 <__fixunssfsi+0x26>
    4d76:	9f 57       	subi	r25, 0x7F	; 127
    4d78:	90 f0       	brcs	.+36     	; 0x4d9e <__fixunssfsi+0x2c>
    4d7a:	b9 2f       	mov	r27, r25
    4d7c:	99 27       	eor	r25, r25
    4d7e:	b7 51       	subi	r27, 0x17	; 23
    4d80:	a0 f0       	brcs	.+40     	; 0x4daa <__fixunssfsi+0x38>
    4d82:	d1 f0       	breq	.+52     	; 0x4db8 <__fixunssfsi+0x46>
    4d84:	66 0f       	add	r22, r22
    4d86:	77 1f       	adc	r23, r23
    4d88:	88 1f       	adc	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	1a f0       	brmi	.+6      	; 0x4d94 <__fixunssfsi+0x22>
    4d8e:	ba 95       	dec	r27
    4d90:	c9 f7       	brne	.-14     	; 0x4d84 <__fixunssfsi+0x12>
    4d92:	12 c0       	rjmp	.+36     	; 0x4db8 <__fixunssfsi+0x46>
    4d94:	b1 30       	cpi	r27, 0x01	; 1
    4d96:	81 f0       	breq	.+32     	; 0x4db8 <__fixunssfsi+0x46>
    4d98:	c3 d0       	rcall	.+390    	; 0x4f20 <__fp_zero>
    4d9a:	b1 e0       	ldi	r27, 0x01	; 1
    4d9c:	08 95       	ret
    4d9e:	c0 c0       	rjmp	.+384    	; 0x4f20 <__fp_zero>
    4da0:	67 2f       	mov	r22, r23
    4da2:	78 2f       	mov	r23, r24
    4da4:	88 27       	eor	r24, r24
    4da6:	b8 5f       	subi	r27, 0xF8	; 248
    4da8:	39 f0       	breq	.+14     	; 0x4db8 <__fixunssfsi+0x46>
    4daa:	b9 3f       	cpi	r27, 0xF9	; 249
    4dac:	cc f3       	brlt	.-14     	; 0x4da0 <__fixunssfsi+0x2e>
    4dae:	86 95       	lsr	r24
    4db0:	77 95       	ror	r23
    4db2:	67 95       	ror	r22
    4db4:	b3 95       	inc	r27
    4db6:	d9 f7       	brne	.-10     	; 0x4dae <__fixunssfsi+0x3c>
    4db8:	3e f4       	brtc	.+14     	; 0x4dc8 <__fixunssfsi+0x56>
    4dba:	90 95       	com	r25
    4dbc:	80 95       	com	r24
    4dbe:	70 95       	com	r23
    4dc0:	61 95       	neg	r22
    4dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc8:	08 95       	ret

00004dca <__floatunsisf>:
    4dca:	e8 94       	clt
    4dcc:	09 c0       	rjmp	.+18     	; 0x4de0 <__floatsisf+0x12>

00004dce <__floatsisf>:
    4dce:	97 fb       	bst	r25, 7
    4dd0:	3e f4       	brtc	.+14     	; 0x4de0 <__floatsisf+0x12>
    4dd2:	90 95       	com	r25
    4dd4:	80 95       	com	r24
    4dd6:	70 95       	com	r23
    4dd8:	61 95       	neg	r22
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255
    4ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    4dde:	9f 4f       	sbci	r25, 0xFF	; 255
    4de0:	99 23       	and	r25, r25
    4de2:	a9 f0       	breq	.+42     	; 0x4e0e <__floatsisf+0x40>
    4de4:	f9 2f       	mov	r31, r25
    4de6:	96 e9       	ldi	r25, 0x96	; 150
    4de8:	bb 27       	eor	r27, r27
    4dea:	93 95       	inc	r25
    4dec:	f6 95       	lsr	r31
    4dee:	87 95       	ror	r24
    4df0:	77 95       	ror	r23
    4df2:	67 95       	ror	r22
    4df4:	b7 95       	ror	r27
    4df6:	f1 11       	cpse	r31, r1
    4df8:	f8 cf       	rjmp	.-16     	; 0x4dea <__floatsisf+0x1c>
    4dfa:	fa f4       	brpl	.+62     	; 0x4e3a <__floatsisf+0x6c>
    4dfc:	bb 0f       	add	r27, r27
    4dfe:	11 f4       	brne	.+4      	; 0x4e04 <__floatsisf+0x36>
    4e00:	60 ff       	sbrs	r22, 0
    4e02:	1b c0       	rjmp	.+54     	; 0x4e3a <__floatsisf+0x6c>
    4e04:	6f 5f       	subi	r22, 0xFF	; 255
    4e06:	7f 4f       	sbci	r23, 0xFF	; 255
    4e08:	8f 4f       	sbci	r24, 0xFF	; 255
    4e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0c:	16 c0       	rjmp	.+44     	; 0x4e3a <__floatsisf+0x6c>
    4e0e:	88 23       	and	r24, r24
    4e10:	11 f0       	breq	.+4      	; 0x4e16 <__floatsisf+0x48>
    4e12:	96 e9       	ldi	r25, 0x96	; 150
    4e14:	11 c0       	rjmp	.+34     	; 0x4e38 <__floatsisf+0x6a>
    4e16:	77 23       	and	r23, r23
    4e18:	21 f0       	breq	.+8      	; 0x4e22 <__floatsisf+0x54>
    4e1a:	9e e8       	ldi	r25, 0x8E	; 142
    4e1c:	87 2f       	mov	r24, r23
    4e1e:	76 2f       	mov	r23, r22
    4e20:	05 c0       	rjmp	.+10     	; 0x4e2c <__floatsisf+0x5e>
    4e22:	66 23       	and	r22, r22
    4e24:	71 f0       	breq	.+28     	; 0x4e42 <__floatsisf+0x74>
    4e26:	96 e8       	ldi	r25, 0x86	; 134
    4e28:	86 2f       	mov	r24, r22
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	60 e0       	ldi	r22, 0x00	; 0
    4e2e:	2a f0       	brmi	.+10     	; 0x4e3a <__floatsisf+0x6c>
    4e30:	9a 95       	dec	r25
    4e32:	66 0f       	add	r22, r22
    4e34:	77 1f       	adc	r23, r23
    4e36:	88 1f       	adc	r24, r24
    4e38:	da f7       	brpl	.-10     	; 0x4e30 <__floatsisf+0x62>
    4e3a:	88 0f       	add	r24, r24
    4e3c:	96 95       	lsr	r25
    4e3e:	87 95       	ror	r24
    4e40:	97 f9       	bld	r25, 7
    4e42:	08 95       	ret

00004e44 <__fp_cmp>:
    4e44:	99 0f       	add	r25, r25
    4e46:	00 08       	sbc	r0, r0
    4e48:	55 0f       	add	r21, r21
    4e4a:	aa 0b       	sbc	r26, r26
    4e4c:	e0 e8       	ldi	r30, 0x80	; 128
    4e4e:	fe ef       	ldi	r31, 0xFE	; 254
    4e50:	16 16       	cp	r1, r22
    4e52:	17 06       	cpc	r1, r23
    4e54:	e8 07       	cpc	r30, r24
    4e56:	f9 07       	cpc	r31, r25
    4e58:	c0 f0       	brcs	.+48     	; 0x4e8a <__fp_cmp+0x46>
    4e5a:	12 16       	cp	r1, r18
    4e5c:	13 06       	cpc	r1, r19
    4e5e:	e4 07       	cpc	r30, r20
    4e60:	f5 07       	cpc	r31, r21
    4e62:	98 f0       	brcs	.+38     	; 0x4e8a <__fp_cmp+0x46>
    4e64:	62 1b       	sub	r22, r18
    4e66:	73 0b       	sbc	r23, r19
    4e68:	84 0b       	sbc	r24, r20
    4e6a:	95 0b       	sbc	r25, r21
    4e6c:	39 f4       	brne	.+14     	; 0x4e7c <__fp_cmp+0x38>
    4e6e:	0a 26       	eor	r0, r26
    4e70:	61 f0       	breq	.+24     	; 0x4e8a <__fp_cmp+0x46>
    4e72:	23 2b       	or	r18, r19
    4e74:	24 2b       	or	r18, r20
    4e76:	25 2b       	or	r18, r21
    4e78:	21 f4       	brne	.+8      	; 0x4e82 <__fp_cmp+0x3e>
    4e7a:	08 95       	ret
    4e7c:	0a 26       	eor	r0, r26
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <__fp_cmp+0x3e>
    4e80:	a1 40       	sbci	r26, 0x01	; 1
    4e82:	a6 95       	lsr	r26
    4e84:	8f ef       	ldi	r24, 0xFF	; 255
    4e86:	81 1d       	adc	r24, r1
    4e88:	81 1d       	adc	r24, r1
    4e8a:	08 95       	ret

00004e8c <__fp_inf>:
    4e8c:	97 f9       	bld	r25, 7
    4e8e:	9f 67       	ori	r25, 0x7F	; 127
    4e90:	80 e8       	ldi	r24, 0x80	; 128
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	60 e0       	ldi	r22, 0x00	; 0
    4e96:	08 95       	ret

00004e98 <__fp_nan>:
    4e98:	9f ef       	ldi	r25, 0xFF	; 255
    4e9a:	80 ec       	ldi	r24, 0xC0	; 192
    4e9c:	08 95       	ret

00004e9e <__fp_pscA>:
    4e9e:	00 24       	eor	r0, r0
    4ea0:	0a 94       	dec	r0
    4ea2:	16 16       	cp	r1, r22
    4ea4:	17 06       	cpc	r1, r23
    4ea6:	18 06       	cpc	r1, r24
    4ea8:	09 06       	cpc	r0, r25
    4eaa:	08 95       	ret

00004eac <__fp_pscB>:
    4eac:	00 24       	eor	r0, r0
    4eae:	0a 94       	dec	r0
    4eb0:	12 16       	cp	r1, r18
    4eb2:	13 06       	cpc	r1, r19
    4eb4:	14 06       	cpc	r1, r20
    4eb6:	05 06       	cpc	r0, r21
    4eb8:	08 95       	ret

00004eba <__fp_round>:
    4eba:	09 2e       	mov	r0, r25
    4ebc:	03 94       	inc	r0
    4ebe:	00 0c       	add	r0, r0
    4ec0:	11 f4       	brne	.+4      	; 0x4ec6 <__fp_round+0xc>
    4ec2:	88 23       	and	r24, r24
    4ec4:	52 f0       	brmi	.+20     	; 0x4eda <__fp_round+0x20>
    4ec6:	bb 0f       	add	r27, r27
    4ec8:	40 f4       	brcc	.+16     	; 0x4eda <__fp_round+0x20>
    4eca:	bf 2b       	or	r27, r31
    4ecc:	11 f4       	brne	.+4      	; 0x4ed2 <__fp_round+0x18>
    4ece:	60 ff       	sbrs	r22, 0
    4ed0:	04 c0       	rjmp	.+8      	; 0x4eda <__fp_round+0x20>
    4ed2:	6f 5f       	subi	r22, 0xFF	; 255
    4ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eda:	08 95       	ret

00004edc <__fp_split3>:
    4edc:	57 fd       	sbrc	r21, 7
    4ede:	90 58       	subi	r25, 0x80	; 128
    4ee0:	44 0f       	add	r20, r20
    4ee2:	55 1f       	adc	r21, r21
    4ee4:	59 f0       	breq	.+22     	; 0x4efc <__fp_splitA+0x10>
    4ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    4ee8:	71 f0       	breq	.+28     	; 0x4f06 <__fp_splitA+0x1a>
    4eea:	47 95       	ror	r20

00004eec <__fp_splitA>:
    4eec:	88 0f       	add	r24, r24
    4eee:	97 fb       	bst	r25, 7
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	61 f0       	breq	.+24     	; 0x4f0c <__fp_splitA+0x20>
    4ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ef6:	79 f0       	breq	.+30     	; 0x4f16 <__fp_splitA+0x2a>
    4ef8:	87 95       	ror	r24
    4efa:	08 95       	ret
    4efc:	12 16       	cp	r1, r18
    4efe:	13 06       	cpc	r1, r19
    4f00:	14 06       	cpc	r1, r20
    4f02:	55 1f       	adc	r21, r21
    4f04:	f2 cf       	rjmp	.-28     	; 0x4eea <__fp_split3+0xe>
    4f06:	46 95       	lsr	r20
    4f08:	f1 df       	rcall	.-30     	; 0x4eec <__fp_splitA>
    4f0a:	08 c0       	rjmp	.+16     	; 0x4f1c <__fp_splitA+0x30>
    4f0c:	16 16       	cp	r1, r22
    4f0e:	17 06       	cpc	r1, r23
    4f10:	18 06       	cpc	r1, r24
    4f12:	99 1f       	adc	r25, r25
    4f14:	f1 cf       	rjmp	.-30     	; 0x4ef8 <__fp_splitA+0xc>
    4f16:	86 95       	lsr	r24
    4f18:	71 05       	cpc	r23, r1
    4f1a:	61 05       	cpc	r22, r1
    4f1c:	08 94       	sec
    4f1e:	08 95       	ret

00004f20 <__fp_zero>:
    4f20:	e8 94       	clt

00004f22 <__fp_szero>:
    4f22:	bb 27       	eor	r27, r27
    4f24:	66 27       	eor	r22, r22
    4f26:	77 27       	eor	r23, r23
    4f28:	cb 01       	movw	r24, r22
    4f2a:	97 f9       	bld	r25, 7
    4f2c:	08 95       	ret

00004f2e <__gesf2>:
    4f2e:	8a df       	rcall	.-236    	; 0x4e44 <__fp_cmp>
    4f30:	08 f4       	brcc	.+2      	; 0x4f34 <__gesf2+0x6>
    4f32:	8f ef       	ldi	r24, 0xFF	; 255
    4f34:	08 95       	ret

00004f36 <__mulsf3>:
    4f36:	0b d0       	rcall	.+22     	; 0x4f4e <__mulsf3x>
    4f38:	c0 cf       	rjmp	.-128    	; 0x4eba <__fp_round>
    4f3a:	b1 df       	rcall	.-158    	; 0x4e9e <__fp_pscA>
    4f3c:	28 f0       	brcs	.+10     	; 0x4f48 <__mulsf3+0x12>
    4f3e:	b6 df       	rcall	.-148    	; 0x4eac <__fp_pscB>
    4f40:	18 f0       	brcs	.+6      	; 0x4f48 <__mulsf3+0x12>
    4f42:	95 23       	and	r25, r21
    4f44:	09 f0       	breq	.+2      	; 0x4f48 <__mulsf3+0x12>
    4f46:	a2 cf       	rjmp	.-188    	; 0x4e8c <__fp_inf>
    4f48:	a7 cf       	rjmp	.-178    	; 0x4e98 <__fp_nan>
    4f4a:	11 24       	eor	r1, r1
    4f4c:	ea cf       	rjmp	.-44     	; 0x4f22 <__fp_szero>

00004f4e <__mulsf3x>:
    4f4e:	c6 df       	rcall	.-116    	; 0x4edc <__fp_split3>
    4f50:	a0 f3       	brcs	.-24     	; 0x4f3a <__mulsf3+0x4>

00004f52 <__mulsf3_pse>:
    4f52:	95 9f       	mul	r25, r21
    4f54:	d1 f3       	breq	.-12     	; 0x4f4a <__mulsf3+0x14>
    4f56:	95 0f       	add	r25, r21
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	55 1f       	adc	r21, r21
    4f5c:	62 9f       	mul	r22, r18
    4f5e:	f0 01       	movw	r30, r0
    4f60:	72 9f       	mul	r23, r18
    4f62:	bb 27       	eor	r27, r27
    4f64:	f0 0d       	add	r31, r0
    4f66:	b1 1d       	adc	r27, r1
    4f68:	63 9f       	mul	r22, r19
    4f6a:	aa 27       	eor	r26, r26
    4f6c:	f0 0d       	add	r31, r0
    4f6e:	b1 1d       	adc	r27, r1
    4f70:	aa 1f       	adc	r26, r26
    4f72:	64 9f       	mul	r22, r20
    4f74:	66 27       	eor	r22, r22
    4f76:	b0 0d       	add	r27, r0
    4f78:	a1 1d       	adc	r26, r1
    4f7a:	66 1f       	adc	r22, r22
    4f7c:	82 9f       	mul	r24, r18
    4f7e:	22 27       	eor	r18, r18
    4f80:	b0 0d       	add	r27, r0
    4f82:	a1 1d       	adc	r26, r1
    4f84:	62 1f       	adc	r22, r18
    4f86:	73 9f       	mul	r23, r19
    4f88:	b0 0d       	add	r27, r0
    4f8a:	a1 1d       	adc	r26, r1
    4f8c:	62 1f       	adc	r22, r18
    4f8e:	83 9f       	mul	r24, r19
    4f90:	a0 0d       	add	r26, r0
    4f92:	61 1d       	adc	r22, r1
    4f94:	22 1f       	adc	r18, r18
    4f96:	74 9f       	mul	r23, r20
    4f98:	33 27       	eor	r19, r19
    4f9a:	a0 0d       	add	r26, r0
    4f9c:	61 1d       	adc	r22, r1
    4f9e:	23 1f       	adc	r18, r19
    4fa0:	84 9f       	mul	r24, r20
    4fa2:	60 0d       	add	r22, r0
    4fa4:	21 1d       	adc	r18, r1
    4fa6:	82 2f       	mov	r24, r18
    4fa8:	76 2f       	mov	r23, r22
    4faa:	6a 2f       	mov	r22, r26
    4fac:	11 24       	eor	r1, r1
    4fae:	9f 57       	subi	r25, 0x7F	; 127
    4fb0:	50 40       	sbci	r21, 0x00	; 0
    4fb2:	8a f0       	brmi	.+34     	; 0x4fd6 <__mulsf3_pse+0x84>
    4fb4:	e1 f0       	breq	.+56     	; 0x4fee <__mulsf3_pse+0x9c>
    4fb6:	88 23       	and	r24, r24
    4fb8:	4a f0       	brmi	.+18     	; 0x4fcc <__mulsf3_pse+0x7a>
    4fba:	ee 0f       	add	r30, r30
    4fbc:	ff 1f       	adc	r31, r31
    4fbe:	bb 1f       	adc	r27, r27
    4fc0:	66 1f       	adc	r22, r22
    4fc2:	77 1f       	adc	r23, r23
    4fc4:	88 1f       	adc	r24, r24
    4fc6:	91 50       	subi	r25, 0x01	; 1
    4fc8:	50 40       	sbci	r21, 0x00	; 0
    4fca:	a9 f7       	brne	.-22     	; 0x4fb6 <__mulsf3_pse+0x64>
    4fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    4fce:	51 05       	cpc	r21, r1
    4fd0:	70 f0       	brcs	.+28     	; 0x4fee <__mulsf3_pse+0x9c>
    4fd2:	5c cf       	rjmp	.-328    	; 0x4e8c <__fp_inf>
    4fd4:	a6 cf       	rjmp	.-180    	; 0x4f22 <__fp_szero>
    4fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    4fd8:	ec f3       	brlt	.-6      	; 0x4fd4 <__mulsf3_pse+0x82>
    4fda:	98 3e       	cpi	r25, 0xE8	; 232
    4fdc:	dc f3       	brlt	.-10     	; 0x4fd4 <__mulsf3_pse+0x82>
    4fde:	86 95       	lsr	r24
    4fe0:	77 95       	ror	r23
    4fe2:	67 95       	ror	r22
    4fe4:	b7 95       	ror	r27
    4fe6:	f7 95       	ror	r31
    4fe8:	e7 95       	ror	r30
    4fea:	9f 5f       	subi	r25, 0xFF	; 255
    4fec:	c1 f7       	brne	.-16     	; 0x4fde <__mulsf3_pse+0x8c>
    4fee:	fe 2b       	or	r31, r30
    4ff0:	88 0f       	add	r24, r24
    4ff2:	91 1d       	adc	r25, r1
    4ff4:	96 95       	lsr	r25
    4ff6:	87 95       	ror	r24
    4ff8:	97 f9       	bld	r25, 7
    4ffa:	08 95       	ret

00004ffc <sprintf>:
    4ffc:	0f 93       	push	r16
    4ffe:	1f 93       	push	r17
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	2e 97       	sbiw	r28, 0x0e	; 14
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	de bf       	out	0x3e, r29	; 62
    500e:	0e 89       	ldd	r16, Y+22	; 0x16
    5010:	1f 89       	ldd	r17, Y+23	; 0x17
    5012:	86 e0       	ldi	r24, 0x06	; 6
    5014:	8c 83       	std	Y+4, r24	; 0x04
    5016:	09 83       	std	Y+1, r16	; 0x01
    5018:	1a 83       	std	Y+2, r17	; 0x02
    501a:	8f ef       	ldi	r24, 0xFF	; 255
    501c:	9f e7       	ldi	r25, 0x7F	; 127
    501e:	8d 83       	std	Y+5, r24	; 0x05
    5020:	9e 83       	std	Y+6, r25	; 0x06
    5022:	ae 01       	movw	r20, r28
    5024:	46 5e       	subi	r20, 0xE6	; 230
    5026:	5f 4f       	sbci	r21, 0xFF	; 255
    5028:	68 8d       	ldd	r22, Y+24	; 0x18
    502a:	79 8d       	ldd	r23, Y+25	; 0x19
    502c:	ce 01       	movw	r24, r28
    502e:	01 96       	adiw	r24, 0x01	; 1
    5030:	0d d0       	rcall	.+26     	; 0x504c <vfprintf>
    5032:	ef 81       	ldd	r30, Y+7	; 0x07
    5034:	f8 85       	ldd	r31, Y+8	; 0x08
    5036:	e0 0f       	add	r30, r16
    5038:	f1 1f       	adc	r31, r17
    503a:	10 82       	st	Z, r1
    503c:	2e 96       	adiw	r28, 0x0e	; 14
    503e:	cd bf       	out	0x3d, r28	; 61
    5040:	de bf       	out	0x3e, r29	; 62
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	08 95       	ret

0000504c <vfprintf>:
    504c:	2f 92       	push	r2
    504e:	3f 92       	push	r3
    5050:	4f 92       	push	r4
    5052:	5f 92       	push	r5
    5054:	6f 92       	push	r6
    5056:	7f 92       	push	r7
    5058:	8f 92       	push	r8
    505a:	9f 92       	push	r9
    505c:	af 92       	push	r10
    505e:	bf 92       	push	r11
    5060:	cf 92       	push	r12
    5062:	df 92       	push	r13
    5064:	ef 92       	push	r14
    5066:	ff 92       	push	r15
    5068:	0f 93       	push	r16
    506a:	1f 93       	push	r17
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	2c 97       	sbiw	r28, 0x0c	; 12
    5076:	cd bf       	out	0x3d, r28	; 61
    5078:	de bf       	out	0x3e, r29	; 62
    507a:	7c 01       	movw	r14, r24
    507c:	6b 01       	movw	r12, r22
    507e:	8a 01       	movw	r16, r20
    5080:	fc 01       	movw	r30, r24
    5082:	16 82       	std	Z+6, r1	; 0x06
    5084:	17 82       	std	Z+7, r1	; 0x07
    5086:	83 81       	ldd	r24, Z+3	; 0x03
    5088:	81 ff       	sbrs	r24, 1
    508a:	b0 c1       	rjmp	.+864    	; 0x53ec <vfprintf+0x3a0>
    508c:	ce 01       	movw	r24, r28
    508e:	01 96       	adiw	r24, 0x01	; 1
    5090:	4c 01       	movw	r8, r24
    5092:	f7 01       	movw	r30, r14
    5094:	93 81       	ldd	r25, Z+3	; 0x03
    5096:	f6 01       	movw	r30, r12
    5098:	93 fd       	sbrc	r25, 3
    509a:	85 91       	lpm	r24, Z+
    509c:	93 ff       	sbrs	r25, 3
    509e:	81 91       	ld	r24, Z+
    50a0:	6f 01       	movw	r12, r30
    50a2:	88 23       	and	r24, r24
    50a4:	09 f4       	brne	.+2      	; 0x50a8 <vfprintf+0x5c>
    50a6:	9e c1       	rjmp	.+828    	; 0x53e4 <vfprintf+0x398>
    50a8:	85 32       	cpi	r24, 0x25	; 37
    50aa:	39 f4       	brne	.+14     	; 0x50ba <vfprintf+0x6e>
    50ac:	93 fd       	sbrc	r25, 3
    50ae:	85 91       	lpm	r24, Z+
    50b0:	93 ff       	sbrs	r25, 3
    50b2:	81 91       	ld	r24, Z+
    50b4:	6f 01       	movw	r12, r30
    50b6:	85 32       	cpi	r24, 0x25	; 37
    50b8:	21 f4       	brne	.+8      	; 0x50c2 <vfprintf+0x76>
    50ba:	b7 01       	movw	r22, r14
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	c4 d1       	rcall	.+904    	; 0x5448 <fputc>
    50c0:	e8 cf       	rjmp	.-48     	; 0x5092 <vfprintf+0x46>
    50c2:	51 2c       	mov	r5, r1
    50c4:	31 2c       	mov	r3, r1
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	20 32       	cpi	r18, 0x20	; 32
    50ca:	a0 f4       	brcc	.+40     	; 0x50f4 <vfprintf+0xa8>
    50cc:	8b 32       	cpi	r24, 0x2B	; 43
    50ce:	69 f0       	breq	.+26     	; 0x50ea <vfprintf+0x9e>
    50d0:	30 f4       	brcc	.+12     	; 0x50de <vfprintf+0x92>
    50d2:	80 32       	cpi	r24, 0x20	; 32
    50d4:	59 f0       	breq	.+22     	; 0x50ec <vfprintf+0xa0>
    50d6:	83 32       	cpi	r24, 0x23	; 35
    50d8:	69 f4       	brne	.+26     	; 0x50f4 <vfprintf+0xa8>
    50da:	20 61       	ori	r18, 0x10	; 16
    50dc:	2c c0       	rjmp	.+88     	; 0x5136 <vfprintf+0xea>
    50de:	8d 32       	cpi	r24, 0x2D	; 45
    50e0:	39 f0       	breq	.+14     	; 0x50f0 <vfprintf+0xa4>
    50e2:	80 33       	cpi	r24, 0x30	; 48
    50e4:	39 f4       	brne	.+14     	; 0x50f4 <vfprintf+0xa8>
    50e6:	21 60       	ori	r18, 0x01	; 1
    50e8:	26 c0       	rjmp	.+76     	; 0x5136 <vfprintf+0xea>
    50ea:	22 60       	ori	r18, 0x02	; 2
    50ec:	24 60       	ori	r18, 0x04	; 4
    50ee:	23 c0       	rjmp	.+70     	; 0x5136 <vfprintf+0xea>
    50f0:	28 60       	ori	r18, 0x08	; 8
    50f2:	21 c0       	rjmp	.+66     	; 0x5136 <vfprintf+0xea>
    50f4:	27 fd       	sbrc	r18, 7
    50f6:	27 c0       	rjmp	.+78     	; 0x5146 <vfprintf+0xfa>
    50f8:	30 ed       	ldi	r19, 0xD0	; 208
    50fa:	38 0f       	add	r19, r24
    50fc:	3a 30       	cpi	r19, 0x0A	; 10
    50fe:	78 f4       	brcc	.+30     	; 0x511e <vfprintf+0xd2>
    5100:	26 ff       	sbrs	r18, 6
    5102:	06 c0       	rjmp	.+12     	; 0x5110 <vfprintf+0xc4>
    5104:	fa e0       	ldi	r31, 0x0A	; 10
    5106:	5f 9e       	mul	r5, r31
    5108:	30 0d       	add	r19, r0
    510a:	11 24       	eor	r1, r1
    510c:	53 2e       	mov	r5, r19
    510e:	13 c0       	rjmp	.+38     	; 0x5136 <vfprintf+0xea>
    5110:	8a e0       	ldi	r24, 0x0A	; 10
    5112:	38 9e       	mul	r3, r24
    5114:	30 0d       	add	r19, r0
    5116:	11 24       	eor	r1, r1
    5118:	33 2e       	mov	r3, r19
    511a:	20 62       	ori	r18, 0x20	; 32
    511c:	0c c0       	rjmp	.+24     	; 0x5136 <vfprintf+0xea>
    511e:	8e 32       	cpi	r24, 0x2E	; 46
    5120:	21 f4       	brne	.+8      	; 0x512a <vfprintf+0xde>
    5122:	26 fd       	sbrc	r18, 6
    5124:	5f c1       	rjmp	.+702    	; 0x53e4 <vfprintf+0x398>
    5126:	20 64       	ori	r18, 0x40	; 64
    5128:	06 c0       	rjmp	.+12     	; 0x5136 <vfprintf+0xea>
    512a:	8c 36       	cpi	r24, 0x6C	; 108
    512c:	11 f4       	brne	.+4      	; 0x5132 <vfprintf+0xe6>
    512e:	20 68       	ori	r18, 0x80	; 128
    5130:	02 c0       	rjmp	.+4      	; 0x5136 <vfprintf+0xea>
    5132:	88 36       	cpi	r24, 0x68	; 104
    5134:	41 f4       	brne	.+16     	; 0x5146 <vfprintf+0xfa>
    5136:	f6 01       	movw	r30, r12
    5138:	93 fd       	sbrc	r25, 3
    513a:	85 91       	lpm	r24, Z+
    513c:	93 ff       	sbrs	r25, 3
    513e:	81 91       	ld	r24, Z+
    5140:	6f 01       	movw	r12, r30
    5142:	81 11       	cpse	r24, r1
    5144:	c1 cf       	rjmp	.-126    	; 0x50c8 <vfprintf+0x7c>
    5146:	98 2f       	mov	r25, r24
    5148:	9f 7d       	andi	r25, 0xDF	; 223
    514a:	95 54       	subi	r25, 0x45	; 69
    514c:	93 30       	cpi	r25, 0x03	; 3
    514e:	28 f4       	brcc	.+10     	; 0x515a <vfprintf+0x10e>
    5150:	0c 5f       	subi	r16, 0xFC	; 252
    5152:	1f 4f       	sbci	r17, 0xFF	; 255
    5154:	ff e3       	ldi	r31, 0x3F	; 63
    5156:	f9 83       	std	Y+1, r31	; 0x01
    5158:	0d c0       	rjmp	.+26     	; 0x5174 <vfprintf+0x128>
    515a:	83 36       	cpi	r24, 0x63	; 99
    515c:	31 f0       	breq	.+12     	; 0x516a <vfprintf+0x11e>
    515e:	83 37       	cpi	r24, 0x73	; 115
    5160:	71 f0       	breq	.+28     	; 0x517e <vfprintf+0x132>
    5162:	83 35       	cpi	r24, 0x53	; 83
    5164:	09 f0       	breq	.+2      	; 0x5168 <vfprintf+0x11c>
    5166:	57 c0       	rjmp	.+174    	; 0x5216 <vfprintf+0x1ca>
    5168:	21 c0       	rjmp	.+66     	; 0x51ac <vfprintf+0x160>
    516a:	f8 01       	movw	r30, r16
    516c:	80 81       	ld	r24, Z
    516e:	89 83       	std	Y+1, r24	; 0x01
    5170:	0e 5f       	subi	r16, 0xFE	; 254
    5172:	1f 4f       	sbci	r17, 0xFF	; 255
    5174:	44 24       	eor	r4, r4
    5176:	43 94       	inc	r4
    5178:	51 2c       	mov	r5, r1
    517a:	54 01       	movw	r10, r8
    517c:	14 c0       	rjmp	.+40     	; 0x51a6 <vfprintf+0x15a>
    517e:	38 01       	movw	r6, r16
    5180:	f2 e0       	ldi	r31, 0x02	; 2
    5182:	6f 0e       	add	r6, r31
    5184:	71 1c       	adc	r7, r1
    5186:	f8 01       	movw	r30, r16
    5188:	a0 80       	ld	r10, Z
    518a:	b1 80       	ldd	r11, Z+1	; 0x01
    518c:	26 ff       	sbrs	r18, 6
    518e:	03 c0       	rjmp	.+6      	; 0x5196 <vfprintf+0x14a>
    5190:	65 2d       	mov	r22, r5
    5192:	70 e0       	ldi	r23, 0x00	; 0
    5194:	02 c0       	rjmp	.+4      	; 0x519a <vfprintf+0x14e>
    5196:	6f ef       	ldi	r22, 0xFF	; 255
    5198:	7f ef       	ldi	r23, 0xFF	; 255
    519a:	c5 01       	movw	r24, r10
    519c:	2c 87       	std	Y+12, r18	; 0x0c
    519e:	49 d1       	rcall	.+658    	; 0x5432 <strnlen>
    51a0:	2c 01       	movw	r4, r24
    51a2:	83 01       	movw	r16, r6
    51a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    51a6:	2f 77       	andi	r18, 0x7F	; 127
    51a8:	22 2e       	mov	r2, r18
    51aa:	16 c0       	rjmp	.+44     	; 0x51d8 <vfprintf+0x18c>
    51ac:	38 01       	movw	r6, r16
    51ae:	f2 e0       	ldi	r31, 0x02	; 2
    51b0:	6f 0e       	add	r6, r31
    51b2:	71 1c       	adc	r7, r1
    51b4:	f8 01       	movw	r30, r16
    51b6:	a0 80       	ld	r10, Z
    51b8:	b1 80       	ldd	r11, Z+1	; 0x01
    51ba:	26 ff       	sbrs	r18, 6
    51bc:	03 c0       	rjmp	.+6      	; 0x51c4 <vfprintf+0x178>
    51be:	65 2d       	mov	r22, r5
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <vfprintf+0x17c>
    51c4:	6f ef       	ldi	r22, 0xFF	; 255
    51c6:	7f ef       	ldi	r23, 0xFF	; 255
    51c8:	c5 01       	movw	r24, r10
    51ca:	2c 87       	std	Y+12, r18	; 0x0c
    51cc:	27 d1       	rcall	.+590    	; 0x541c <strnlen_P>
    51ce:	2c 01       	movw	r4, r24
    51d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    51d2:	20 68       	ori	r18, 0x80	; 128
    51d4:	22 2e       	mov	r2, r18
    51d6:	83 01       	movw	r16, r6
    51d8:	23 fc       	sbrc	r2, 3
    51da:	19 c0       	rjmp	.+50     	; 0x520e <vfprintf+0x1c2>
    51dc:	83 2d       	mov	r24, r3
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	48 16       	cp	r4, r24
    51e2:	59 06       	cpc	r5, r25
    51e4:	a0 f4       	brcc	.+40     	; 0x520e <vfprintf+0x1c2>
    51e6:	b7 01       	movw	r22, r14
    51e8:	80 e2       	ldi	r24, 0x20	; 32
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	2d d1       	rcall	.+602    	; 0x5448 <fputc>
    51ee:	3a 94       	dec	r3
    51f0:	f5 cf       	rjmp	.-22     	; 0x51dc <vfprintf+0x190>
    51f2:	f5 01       	movw	r30, r10
    51f4:	27 fc       	sbrc	r2, 7
    51f6:	85 91       	lpm	r24, Z+
    51f8:	27 fe       	sbrs	r2, 7
    51fa:	81 91       	ld	r24, Z+
    51fc:	5f 01       	movw	r10, r30
    51fe:	b7 01       	movw	r22, r14
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	22 d1       	rcall	.+580    	; 0x5448 <fputc>
    5204:	31 10       	cpse	r3, r1
    5206:	3a 94       	dec	r3
    5208:	f1 e0       	ldi	r31, 0x01	; 1
    520a:	4f 1a       	sub	r4, r31
    520c:	51 08       	sbc	r5, r1
    520e:	41 14       	cp	r4, r1
    5210:	51 04       	cpc	r5, r1
    5212:	79 f7       	brne	.-34     	; 0x51f2 <vfprintf+0x1a6>
    5214:	de c0       	rjmp	.+444    	; 0x53d2 <vfprintf+0x386>
    5216:	84 36       	cpi	r24, 0x64	; 100
    5218:	11 f0       	breq	.+4      	; 0x521e <vfprintf+0x1d2>
    521a:	89 36       	cpi	r24, 0x69	; 105
    521c:	31 f5       	brne	.+76     	; 0x526a <vfprintf+0x21e>
    521e:	f8 01       	movw	r30, r16
    5220:	27 ff       	sbrs	r18, 7
    5222:	07 c0       	rjmp	.+14     	; 0x5232 <vfprintf+0x1e6>
    5224:	60 81       	ld	r22, Z
    5226:	71 81       	ldd	r23, Z+1	; 0x01
    5228:	82 81       	ldd	r24, Z+2	; 0x02
    522a:	93 81       	ldd	r25, Z+3	; 0x03
    522c:	0c 5f       	subi	r16, 0xFC	; 252
    522e:	1f 4f       	sbci	r17, 0xFF	; 255
    5230:	08 c0       	rjmp	.+16     	; 0x5242 <vfprintf+0x1f6>
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	88 27       	eor	r24, r24
    5238:	77 fd       	sbrc	r23, 7
    523a:	80 95       	com	r24
    523c:	98 2f       	mov	r25, r24
    523e:	0e 5f       	subi	r16, 0xFE	; 254
    5240:	1f 4f       	sbci	r17, 0xFF	; 255
    5242:	2f 76       	andi	r18, 0x6F	; 111
    5244:	b2 2e       	mov	r11, r18
    5246:	97 ff       	sbrs	r25, 7
    5248:	09 c0       	rjmp	.+18     	; 0x525c <vfprintf+0x210>
    524a:	90 95       	com	r25
    524c:	80 95       	com	r24
    524e:	70 95       	com	r23
    5250:	61 95       	neg	r22
    5252:	7f 4f       	sbci	r23, 0xFF	; 255
    5254:	8f 4f       	sbci	r24, 0xFF	; 255
    5256:	9f 4f       	sbci	r25, 0xFF	; 255
    5258:	20 68       	ori	r18, 0x80	; 128
    525a:	b2 2e       	mov	r11, r18
    525c:	2a e0       	ldi	r18, 0x0A	; 10
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	a4 01       	movw	r20, r8
    5262:	24 d1       	rcall	.+584    	; 0x54ac <__ultoa_invert>
    5264:	a8 2e       	mov	r10, r24
    5266:	a8 18       	sub	r10, r8
    5268:	43 c0       	rjmp	.+134    	; 0x52f0 <vfprintf+0x2a4>
    526a:	85 37       	cpi	r24, 0x75	; 117
    526c:	29 f4       	brne	.+10     	; 0x5278 <vfprintf+0x22c>
    526e:	2f 7e       	andi	r18, 0xEF	; 239
    5270:	b2 2e       	mov	r11, r18
    5272:	2a e0       	ldi	r18, 0x0A	; 10
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	25 c0       	rjmp	.+74     	; 0x52c2 <vfprintf+0x276>
    5278:	f2 2f       	mov	r31, r18
    527a:	f9 7f       	andi	r31, 0xF9	; 249
    527c:	bf 2e       	mov	r11, r31
    527e:	8f 36       	cpi	r24, 0x6F	; 111
    5280:	c1 f0       	breq	.+48     	; 0x52b2 <vfprintf+0x266>
    5282:	18 f4       	brcc	.+6      	; 0x528a <vfprintf+0x23e>
    5284:	88 35       	cpi	r24, 0x58	; 88
    5286:	79 f0       	breq	.+30     	; 0x52a6 <vfprintf+0x25a>
    5288:	ad c0       	rjmp	.+346    	; 0x53e4 <vfprintf+0x398>
    528a:	80 37       	cpi	r24, 0x70	; 112
    528c:	19 f0       	breq	.+6      	; 0x5294 <vfprintf+0x248>
    528e:	88 37       	cpi	r24, 0x78	; 120
    5290:	21 f0       	breq	.+8      	; 0x529a <vfprintf+0x24e>
    5292:	a8 c0       	rjmp	.+336    	; 0x53e4 <vfprintf+0x398>
    5294:	2f 2f       	mov	r18, r31
    5296:	20 61       	ori	r18, 0x10	; 16
    5298:	b2 2e       	mov	r11, r18
    529a:	b4 fe       	sbrs	r11, 4
    529c:	0d c0       	rjmp	.+26     	; 0x52b8 <vfprintf+0x26c>
    529e:	8b 2d       	mov	r24, r11
    52a0:	84 60       	ori	r24, 0x04	; 4
    52a2:	b8 2e       	mov	r11, r24
    52a4:	09 c0       	rjmp	.+18     	; 0x52b8 <vfprintf+0x26c>
    52a6:	24 ff       	sbrs	r18, 4
    52a8:	0a c0       	rjmp	.+20     	; 0x52be <vfprintf+0x272>
    52aa:	9f 2f       	mov	r25, r31
    52ac:	96 60       	ori	r25, 0x06	; 6
    52ae:	b9 2e       	mov	r11, r25
    52b0:	06 c0       	rjmp	.+12     	; 0x52be <vfprintf+0x272>
    52b2:	28 e0       	ldi	r18, 0x08	; 8
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	05 c0       	rjmp	.+10     	; 0x52c2 <vfprintf+0x276>
    52b8:	20 e1       	ldi	r18, 0x10	; 16
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <vfprintf+0x276>
    52be:	20 e1       	ldi	r18, 0x10	; 16
    52c0:	32 e0       	ldi	r19, 0x02	; 2
    52c2:	f8 01       	movw	r30, r16
    52c4:	b7 fe       	sbrs	r11, 7
    52c6:	07 c0       	rjmp	.+14     	; 0x52d6 <vfprintf+0x28a>
    52c8:	60 81       	ld	r22, Z
    52ca:	71 81       	ldd	r23, Z+1	; 0x01
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	0c 5f       	subi	r16, 0xFC	; 252
    52d2:	1f 4f       	sbci	r17, 0xFF	; 255
    52d4:	06 c0       	rjmp	.+12     	; 0x52e2 <vfprintf+0x296>
    52d6:	60 81       	ld	r22, Z
    52d8:	71 81       	ldd	r23, Z+1	; 0x01
    52da:	80 e0       	ldi	r24, 0x00	; 0
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	0e 5f       	subi	r16, 0xFE	; 254
    52e0:	1f 4f       	sbci	r17, 0xFF	; 255
    52e2:	a4 01       	movw	r20, r8
    52e4:	e3 d0       	rcall	.+454    	; 0x54ac <__ultoa_invert>
    52e6:	a8 2e       	mov	r10, r24
    52e8:	a8 18       	sub	r10, r8
    52ea:	fb 2d       	mov	r31, r11
    52ec:	ff 77       	andi	r31, 0x7F	; 127
    52ee:	bf 2e       	mov	r11, r31
    52f0:	b6 fe       	sbrs	r11, 6
    52f2:	0b c0       	rjmp	.+22     	; 0x530a <vfprintf+0x2be>
    52f4:	2b 2d       	mov	r18, r11
    52f6:	2e 7f       	andi	r18, 0xFE	; 254
    52f8:	a5 14       	cp	r10, r5
    52fa:	50 f4       	brcc	.+20     	; 0x5310 <vfprintf+0x2c4>
    52fc:	b4 fe       	sbrs	r11, 4
    52fe:	0a c0       	rjmp	.+20     	; 0x5314 <vfprintf+0x2c8>
    5300:	b2 fc       	sbrc	r11, 2
    5302:	08 c0       	rjmp	.+16     	; 0x5314 <vfprintf+0x2c8>
    5304:	2b 2d       	mov	r18, r11
    5306:	2e 7e       	andi	r18, 0xEE	; 238
    5308:	05 c0       	rjmp	.+10     	; 0x5314 <vfprintf+0x2c8>
    530a:	7a 2c       	mov	r7, r10
    530c:	2b 2d       	mov	r18, r11
    530e:	03 c0       	rjmp	.+6      	; 0x5316 <vfprintf+0x2ca>
    5310:	7a 2c       	mov	r7, r10
    5312:	01 c0       	rjmp	.+2      	; 0x5316 <vfprintf+0x2ca>
    5314:	75 2c       	mov	r7, r5
    5316:	24 ff       	sbrs	r18, 4
    5318:	0d c0       	rjmp	.+26     	; 0x5334 <vfprintf+0x2e8>
    531a:	fe 01       	movw	r30, r28
    531c:	ea 0d       	add	r30, r10
    531e:	f1 1d       	adc	r31, r1
    5320:	80 81       	ld	r24, Z
    5322:	80 33       	cpi	r24, 0x30	; 48
    5324:	11 f4       	brne	.+4      	; 0x532a <vfprintf+0x2de>
    5326:	29 7e       	andi	r18, 0xE9	; 233
    5328:	09 c0       	rjmp	.+18     	; 0x533c <vfprintf+0x2f0>
    532a:	22 ff       	sbrs	r18, 2
    532c:	06 c0       	rjmp	.+12     	; 0x533a <vfprintf+0x2ee>
    532e:	73 94       	inc	r7
    5330:	73 94       	inc	r7
    5332:	04 c0       	rjmp	.+8      	; 0x533c <vfprintf+0x2f0>
    5334:	82 2f       	mov	r24, r18
    5336:	86 78       	andi	r24, 0x86	; 134
    5338:	09 f0       	breq	.+2      	; 0x533c <vfprintf+0x2f0>
    533a:	73 94       	inc	r7
    533c:	23 fd       	sbrc	r18, 3
    533e:	12 c0       	rjmp	.+36     	; 0x5364 <vfprintf+0x318>
    5340:	20 ff       	sbrs	r18, 0
    5342:	06 c0       	rjmp	.+12     	; 0x5350 <vfprintf+0x304>
    5344:	5a 2c       	mov	r5, r10
    5346:	73 14       	cp	r7, r3
    5348:	18 f4       	brcc	.+6      	; 0x5350 <vfprintf+0x304>
    534a:	53 0c       	add	r5, r3
    534c:	57 18       	sub	r5, r7
    534e:	73 2c       	mov	r7, r3
    5350:	73 14       	cp	r7, r3
    5352:	60 f4       	brcc	.+24     	; 0x536c <vfprintf+0x320>
    5354:	b7 01       	movw	r22, r14
    5356:	80 e2       	ldi	r24, 0x20	; 32
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	2c 87       	std	Y+12, r18	; 0x0c
    535c:	75 d0       	rcall	.+234    	; 0x5448 <fputc>
    535e:	73 94       	inc	r7
    5360:	2c 85       	ldd	r18, Y+12	; 0x0c
    5362:	f6 cf       	rjmp	.-20     	; 0x5350 <vfprintf+0x304>
    5364:	73 14       	cp	r7, r3
    5366:	10 f4       	brcc	.+4      	; 0x536c <vfprintf+0x320>
    5368:	37 18       	sub	r3, r7
    536a:	01 c0       	rjmp	.+2      	; 0x536e <vfprintf+0x322>
    536c:	31 2c       	mov	r3, r1
    536e:	24 ff       	sbrs	r18, 4
    5370:	11 c0       	rjmp	.+34     	; 0x5394 <vfprintf+0x348>
    5372:	b7 01       	movw	r22, r14
    5374:	80 e3       	ldi	r24, 0x30	; 48
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	2c 87       	std	Y+12, r18	; 0x0c
    537a:	66 d0       	rcall	.+204    	; 0x5448 <fputc>
    537c:	2c 85       	ldd	r18, Y+12	; 0x0c
    537e:	22 ff       	sbrs	r18, 2
    5380:	16 c0       	rjmp	.+44     	; 0x53ae <vfprintf+0x362>
    5382:	21 ff       	sbrs	r18, 1
    5384:	03 c0       	rjmp	.+6      	; 0x538c <vfprintf+0x340>
    5386:	88 e5       	ldi	r24, 0x58	; 88
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <vfprintf+0x344>
    538c:	88 e7       	ldi	r24, 0x78	; 120
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	b7 01       	movw	r22, r14
    5392:	0c c0       	rjmp	.+24     	; 0x53ac <vfprintf+0x360>
    5394:	82 2f       	mov	r24, r18
    5396:	86 78       	andi	r24, 0x86	; 134
    5398:	51 f0       	breq	.+20     	; 0x53ae <vfprintf+0x362>
    539a:	21 fd       	sbrc	r18, 1
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <vfprintf+0x356>
    539e:	80 e2       	ldi	r24, 0x20	; 32
    53a0:	01 c0       	rjmp	.+2      	; 0x53a4 <vfprintf+0x358>
    53a2:	8b e2       	ldi	r24, 0x2B	; 43
    53a4:	27 fd       	sbrc	r18, 7
    53a6:	8d e2       	ldi	r24, 0x2D	; 45
    53a8:	b7 01       	movw	r22, r14
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	4d d0       	rcall	.+154    	; 0x5448 <fputc>
    53ae:	a5 14       	cp	r10, r5
    53b0:	30 f4       	brcc	.+12     	; 0x53be <vfprintf+0x372>
    53b2:	b7 01       	movw	r22, r14
    53b4:	80 e3       	ldi	r24, 0x30	; 48
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	47 d0       	rcall	.+142    	; 0x5448 <fputc>
    53ba:	5a 94       	dec	r5
    53bc:	f8 cf       	rjmp	.-16     	; 0x53ae <vfprintf+0x362>
    53be:	aa 94       	dec	r10
    53c0:	f4 01       	movw	r30, r8
    53c2:	ea 0d       	add	r30, r10
    53c4:	f1 1d       	adc	r31, r1
    53c6:	80 81       	ld	r24, Z
    53c8:	b7 01       	movw	r22, r14
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	3d d0       	rcall	.+122    	; 0x5448 <fputc>
    53ce:	a1 10       	cpse	r10, r1
    53d0:	f6 cf       	rjmp	.-20     	; 0x53be <vfprintf+0x372>
    53d2:	33 20       	and	r3, r3
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <vfprintf+0x38c>
    53d6:	5d ce       	rjmp	.-838    	; 0x5092 <vfprintf+0x46>
    53d8:	b7 01       	movw	r22, r14
    53da:	80 e2       	ldi	r24, 0x20	; 32
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	34 d0       	rcall	.+104    	; 0x5448 <fputc>
    53e0:	3a 94       	dec	r3
    53e2:	f7 cf       	rjmp	.-18     	; 0x53d2 <vfprintf+0x386>
    53e4:	f7 01       	movw	r30, r14
    53e6:	86 81       	ldd	r24, Z+6	; 0x06
    53e8:	97 81       	ldd	r25, Z+7	; 0x07
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <vfprintf+0x3a4>
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f ef       	ldi	r25, 0xFF	; 255
    53f0:	2c 96       	adiw	r28, 0x0c	; 12
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	ff 90       	pop	r15
    5400:	ef 90       	pop	r14
    5402:	df 90       	pop	r13
    5404:	cf 90       	pop	r12
    5406:	bf 90       	pop	r11
    5408:	af 90       	pop	r10
    540a:	9f 90       	pop	r9
    540c:	8f 90       	pop	r8
    540e:	7f 90       	pop	r7
    5410:	6f 90       	pop	r6
    5412:	5f 90       	pop	r5
    5414:	4f 90       	pop	r4
    5416:	3f 90       	pop	r3
    5418:	2f 90       	pop	r2
    541a:	08 95       	ret

0000541c <strnlen_P>:
    541c:	fc 01       	movw	r30, r24
    541e:	05 90       	lpm	r0, Z+
    5420:	61 50       	subi	r22, 0x01	; 1
    5422:	70 40       	sbci	r23, 0x00	; 0
    5424:	01 10       	cpse	r0, r1
    5426:	d8 f7       	brcc	.-10     	; 0x541e <strnlen_P+0x2>
    5428:	80 95       	com	r24
    542a:	90 95       	com	r25
    542c:	8e 0f       	add	r24, r30
    542e:	9f 1f       	adc	r25, r31
    5430:	08 95       	ret

00005432 <strnlen>:
    5432:	fc 01       	movw	r30, r24
    5434:	61 50       	subi	r22, 0x01	; 1
    5436:	70 40       	sbci	r23, 0x00	; 0
    5438:	01 90       	ld	r0, Z+
    543a:	01 10       	cpse	r0, r1
    543c:	d8 f7       	brcc	.-10     	; 0x5434 <strnlen+0x2>
    543e:	80 95       	com	r24
    5440:	90 95       	com	r25
    5442:	8e 0f       	add	r24, r30
    5444:	9f 1f       	adc	r25, r31
    5446:	08 95       	ret

00005448 <fputc>:
    5448:	0f 93       	push	r16
    544a:	1f 93       	push	r17
    544c:	cf 93       	push	r28
    544e:	df 93       	push	r29
    5450:	18 2f       	mov	r17, r24
    5452:	09 2f       	mov	r16, r25
    5454:	eb 01       	movw	r28, r22
    5456:	8b 81       	ldd	r24, Y+3	; 0x03
    5458:	81 fd       	sbrc	r24, 1
    545a:	03 c0       	rjmp	.+6      	; 0x5462 <fputc+0x1a>
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    545e:	9f ef       	ldi	r25, 0xFF	; 255
    5460:	20 c0       	rjmp	.+64     	; 0x54a2 <fputc+0x5a>
    5462:	82 ff       	sbrs	r24, 2
    5464:	10 c0       	rjmp	.+32     	; 0x5486 <fputc+0x3e>
    5466:	4e 81       	ldd	r20, Y+6	; 0x06
    5468:	5f 81       	ldd	r21, Y+7	; 0x07
    546a:	2c 81       	ldd	r18, Y+4	; 0x04
    546c:	3d 81       	ldd	r19, Y+5	; 0x05
    546e:	42 17       	cp	r20, r18
    5470:	53 07       	cpc	r21, r19
    5472:	7c f4       	brge	.+30     	; 0x5492 <fputc+0x4a>
    5474:	e8 81       	ld	r30, Y
    5476:	f9 81       	ldd	r31, Y+1	; 0x01
    5478:	9f 01       	movw	r18, r30
    547a:	2f 5f       	subi	r18, 0xFF	; 255
    547c:	3f 4f       	sbci	r19, 0xFF	; 255
    547e:	28 83       	st	Y, r18
    5480:	39 83       	std	Y+1, r19	; 0x01
    5482:	10 83       	st	Z, r17
    5484:	06 c0       	rjmp	.+12     	; 0x5492 <fputc+0x4a>
    5486:	e8 85       	ldd	r30, Y+8	; 0x08
    5488:	f9 85       	ldd	r31, Y+9	; 0x09
    548a:	81 2f       	mov	r24, r17
    548c:	19 95       	eicall
    548e:	89 2b       	or	r24, r25
    5490:	29 f7       	brne	.-54     	; 0x545c <fputc+0x14>
    5492:	2e 81       	ldd	r18, Y+6	; 0x06
    5494:	3f 81       	ldd	r19, Y+7	; 0x07
    5496:	2f 5f       	subi	r18, 0xFF	; 255
    5498:	3f 4f       	sbci	r19, 0xFF	; 255
    549a:	2e 83       	std	Y+6, r18	; 0x06
    549c:	3f 83       	std	Y+7, r19	; 0x07
    549e:	81 2f       	mov	r24, r17
    54a0:	90 2f       	mov	r25, r16
    54a2:	df 91       	pop	r29
    54a4:	cf 91       	pop	r28
    54a6:	1f 91       	pop	r17
    54a8:	0f 91       	pop	r16
    54aa:	08 95       	ret

000054ac <__ultoa_invert>:
    54ac:	fa 01       	movw	r30, r20
    54ae:	aa 27       	eor	r26, r26
    54b0:	28 30       	cpi	r18, 0x08	; 8
    54b2:	51 f1       	breq	.+84     	; 0x5508 <__ultoa_invert+0x5c>
    54b4:	20 31       	cpi	r18, 0x10	; 16
    54b6:	81 f1       	breq	.+96     	; 0x5518 <__ultoa_invert+0x6c>
    54b8:	e8 94       	clt
    54ba:	6f 93       	push	r22
    54bc:	6e 7f       	andi	r22, 0xFE	; 254
    54be:	6e 5f       	subi	r22, 0xFE	; 254
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	8f 4f       	sbci	r24, 0xFF	; 255
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	af 4f       	sbci	r26, 0xFF	; 255
    54c8:	b1 e0       	ldi	r27, 0x01	; 1
    54ca:	3e d0       	rcall	.+124    	; 0x5548 <__ultoa_invert+0x9c>
    54cc:	b4 e0       	ldi	r27, 0x04	; 4
    54ce:	3c d0       	rcall	.+120    	; 0x5548 <__ultoa_invert+0x9c>
    54d0:	67 0f       	add	r22, r23
    54d2:	78 1f       	adc	r23, r24
    54d4:	89 1f       	adc	r24, r25
    54d6:	9a 1f       	adc	r25, r26
    54d8:	a1 1d       	adc	r26, r1
    54da:	68 0f       	add	r22, r24
    54dc:	79 1f       	adc	r23, r25
    54de:	8a 1f       	adc	r24, r26
    54e0:	91 1d       	adc	r25, r1
    54e2:	a1 1d       	adc	r26, r1
    54e4:	6a 0f       	add	r22, r26
    54e6:	71 1d       	adc	r23, r1
    54e8:	81 1d       	adc	r24, r1
    54ea:	91 1d       	adc	r25, r1
    54ec:	a1 1d       	adc	r26, r1
    54ee:	20 d0       	rcall	.+64     	; 0x5530 <__ultoa_invert+0x84>
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <__ultoa_invert+0x48>
    54f2:	68 94       	set
    54f4:	3f 91       	pop	r19
    54f6:	2a e0       	ldi	r18, 0x0A	; 10
    54f8:	26 9f       	mul	r18, r22
    54fa:	11 24       	eor	r1, r1
    54fc:	30 19       	sub	r19, r0
    54fe:	30 5d       	subi	r19, 0xD0	; 208
    5500:	31 93       	st	Z+, r19
    5502:	de f6       	brtc	.-74     	; 0x54ba <__ultoa_invert+0xe>
    5504:	cf 01       	movw	r24, r30
    5506:	08 95       	ret
    5508:	46 2f       	mov	r20, r22
    550a:	47 70       	andi	r20, 0x07	; 7
    550c:	40 5d       	subi	r20, 0xD0	; 208
    550e:	41 93       	st	Z+, r20
    5510:	b3 e0       	ldi	r27, 0x03	; 3
    5512:	0f d0       	rcall	.+30     	; 0x5532 <__ultoa_invert+0x86>
    5514:	c9 f7       	brne	.-14     	; 0x5508 <__ultoa_invert+0x5c>
    5516:	f6 cf       	rjmp	.-20     	; 0x5504 <__ultoa_invert+0x58>
    5518:	46 2f       	mov	r20, r22
    551a:	4f 70       	andi	r20, 0x0F	; 15
    551c:	40 5d       	subi	r20, 0xD0	; 208
    551e:	4a 33       	cpi	r20, 0x3A	; 58
    5520:	18 f0       	brcs	.+6      	; 0x5528 <__ultoa_invert+0x7c>
    5522:	49 5d       	subi	r20, 0xD9	; 217
    5524:	31 fd       	sbrc	r19, 1
    5526:	40 52       	subi	r20, 0x20	; 32
    5528:	41 93       	st	Z+, r20
    552a:	02 d0       	rcall	.+4      	; 0x5530 <__ultoa_invert+0x84>
    552c:	a9 f7       	brne	.-22     	; 0x5518 <__ultoa_invert+0x6c>
    552e:	ea cf       	rjmp	.-44     	; 0x5504 <__ultoa_invert+0x58>
    5530:	b4 e0       	ldi	r27, 0x04	; 4
    5532:	a6 95       	lsr	r26
    5534:	97 95       	ror	r25
    5536:	87 95       	ror	r24
    5538:	77 95       	ror	r23
    553a:	67 95       	ror	r22
    553c:	ba 95       	dec	r27
    553e:	c9 f7       	brne	.-14     	; 0x5532 <__ultoa_invert+0x86>
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	61 05       	cpc	r22, r1
    5544:	71 05       	cpc	r23, r1
    5546:	08 95       	ret
    5548:	9b 01       	movw	r18, r22
    554a:	ac 01       	movw	r20, r24
    554c:	0a 2e       	mov	r0, r26
    554e:	06 94       	lsr	r0
    5550:	57 95       	ror	r21
    5552:	47 95       	ror	r20
    5554:	37 95       	ror	r19
    5556:	27 95       	ror	r18
    5558:	ba 95       	dec	r27
    555a:	c9 f7       	brne	.-14     	; 0x554e <__ultoa_invert+0xa2>
    555c:	62 0f       	add	r22, r18
    555e:	73 1f       	adc	r23, r19
    5560:	84 1f       	adc	r24, r20
    5562:	95 1f       	adc	r25, r21
    5564:	a0 1d       	adc	r26, r0
    5566:	08 95       	ret

00005568 <_exit>:
    5568:	f8 94       	cli

0000556a <__stop_program>:
    556a:	ff cf       	rjmp	.-2      	; 0x556a <__stop_program>
