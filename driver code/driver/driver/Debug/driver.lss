
driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000602  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  00800104  00800104  0000069a  2**0
                  ALLOC
  3 .stab         00000e88  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000214  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a8  00000000  00000000  00001738  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bc  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024e  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ac  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__bad_interrupt>
   4:	40 c0       	rjmp	.+128    	; 0x86 <__bad_interrupt>
   6:	3f c0       	rjmp	.+126    	; 0x86 <__bad_interrupt>
   8:	3e c0       	rjmp	.+124    	; 0x86 <__bad_interrupt>
   a:	75 c1       	rjmp	.+746    	; 0x2f6 <__vector_5>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__bad_interrupt>
   e:	3b c0       	rjmp	.+118    	; 0x86 <__bad_interrupt>
  10:	3a c0       	rjmp	.+116    	; 0x86 <__bad_interrupt>
  12:	39 c0       	rjmp	.+114    	; 0x86 <__bad_interrupt>
  14:	38 c0       	rjmp	.+112    	; 0x86 <__bad_interrupt>
  16:	37 c0       	rjmp	.+110    	; 0x86 <__bad_interrupt>
  18:	36 c0       	rjmp	.+108    	; 0x86 <__bad_interrupt>
  1a:	35 c0       	rjmp	.+106    	; 0x86 <__bad_interrupt>
  1c:	34 c0       	rjmp	.+104    	; 0x86 <__bad_interrupt>
  1e:	33 c0       	rjmp	.+102    	; 0x86 <__bad_interrupt>
  20:	32 c0       	rjmp	.+100    	; 0x86 <__bad_interrupt>
  22:	31 c0       	rjmp	.+98     	; 0x86 <__bad_interrupt>
  24:	0d c1       	rjmp	.+538    	; 0x240 <__vector_18>
  26:	2f c0       	rjmp	.+94     	; 0x86 <__bad_interrupt>
  28:	2e c0       	rjmp	.+92     	; 0x86 <__bad_interrupt>
  2a:	2d c0       	rjmp	.+90     	; 0x86 <__bad_interrupt>
  2c:	2c c0       	rjmp	.+88     	; 0x86 <__bad_interrupt>
  2e:	2b c0       	rjmp	.+86     	; 0x86 <__bad_interrupt>
  30:	2a c0       	rjmp	.+84     	; 0x86 <__bad_interrupt>
  32:	29 c0       	rjmp	.+82     	; 0x86 <__bad_interrupt>
  34:	81 c0       	rjmp	.+258    	; 0x138 <Motor_Update+0xb0>
  36:	a3 c0       	rjmp	.+326    	; 0x17e <Motor_Update+0xf6>
  38:	8e c0       	rjmp	.+284    	; 0x156 <Motor_Update+0xce>
  3a:	c4 c0       	rjmp	.+392    	; 0x1c4 <Motor_Update+0x13c>
  3c:	d5 c0       	rjmp	.+426    	; 0x1e8 <Motor_Update+0x160>
  3e:	ae c0       	rjmp	.+348    	; 0x19c <Motor_Update+0x114>
  40:	e9 c0       	rjmp	.+466    	; 0x214 <Motor_Update+0x18c>
  42:	e8 c0       	rjmp	.+464    	; 0x214 <Motor_Update+0x18c>
  44:	ab c0       	rjmp	.+342    	; 0x19c <Motor_Update+0x114>
  46:	d0 c0       	rjmp	.+416    	; 0x1e8 <Motor_Update+0x160>
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <Motor_Update+0x13c>
  4a:	85 c0       	rjmp	.+266    	; 0x156 <Motor_Update+0xce>
  4c:	98 c0       	rjmp	.+304    	; 0x17e <Motor_Update+0xf6>
  4e:	74 c0       	rjmp	.+232    	; 0x138 <Motor_Update+0xb0>

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf ef       	ldi	r28, 0xFF	; 255
  56:	d4 e0       	ldi	r29, 0x04	; 4
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	11 e0       	ldi	r17, 0x01	; 1
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	b1 e0       	ldi	r27, 0x01	; 1
  62:	e2 e0       	ldi	r30, 0x02	; 2
  64:	f6 e0       	ldi	r31, 0x06	; 6
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a4 30       	cpi	r26, 0x04	; 4
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	12 e0       	ldi	r17, 0x02	; 2
  74:	a4 e0       	ldi	r26, 0x04	; 4
  76:	b1 e0       	ldi	r27, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a3 32       	cpi	r26, 0x23	; 35
  7e:	b1 07       	cpc	r27, r17
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	5b d1       	rcall	.+694    	; 0x33a <main>
  84:	bc c2       	rjmp	.+1400   	; 0x5fe <_exit>

00000086 <__bad_interrupt>:
  86:	bc cf       	rjmp	.-136    	; 0x0 <__vectors>

00000088 <Motor_Update>:
}

void Motor_Update(uint8_t Speed, uint8_t Direction)
{
	 unsigned char Hall_State;
	 Hall_State = (HALL3<<2)|(HALL2<<1)|(HALL1);
  88:	e9 b1       	in	r30, 0x09	; 9
  8a:	29 b1       	in	r18, 0x09	; 9
  8c:	79 b1       	in	r23, 0x09	; 9
	 LED_1  (HALL1);
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	a9 b1       	in	r26, 0x09	; 9
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	a4 70       	andi	r26, 0x04	; 4
  96:	b0 70       	andi	r27, 0x00	; 0
  98:	b5 95       	asr	r27
  9a:	a7 95       	ror	r26
  9c:	b5 95       	asr	r27
  9e:	a7 95       	ror	r26
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	9a 2b       	or	r25, r26
  a4:	95 b9       	out	0x05, r25	; 5
	 LED_2  (HALL2);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	49 b1       	in	r20, 0x09	; 9
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	40 72       	andi	r20, 0x20	; 32
  ae:	50 70       	andi	r21, 0x00	; 0
  b0:	f5 e0       	ldi	r31, 0x05	; 5
  b2:	55 95       	asr	r21
  b4:	47 95       	ror	r20
  b6:	fa 95       	dec	r31
  b8:	e1 f7       	brne	.-8      	; 0xb2 <Motor_Update+0x2a>
  ba:	a4 e0       	ldi	r26, 0x04	; 4
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	aa 95       	dec	r26
  c2:	e1 f7       	brne	.-8      	; 0xbc <Motor_Update+0x34>
  c4:	9f 7e       	andi	r25, 0xEF	; 239
  c6:	94 2b       	or	r25, r20
  c8:	95 b9       	out	0x05, r25	; 5
	 LED_3  (HALL3);
  ca:	35 b1       	in	r19, 0x05	; 5
  cc:	99 b1       	in	r25, 0x09	; 9
  ce:	99 1f       	adc	r25, r25
  d0:	99 27       	eor	r25, r25
  d2:	99 1f       	adc	r25, r25
  d4:	92 95       	swap	r25
  d6:	99 0f       	add	r25, r25
  d8:	90 7e       	andi	r25, 0xE0	; 224
  da:	3f 7d       	andi	r19, 0xDF	; 223
  dc:	93 2b       	or	r25, r19
  de:	95 b9       	out	0x05, r25	; 5
}

void Motor_Update(uint8_t Speed, uint8_t Direction)
{
	 unsigned char Hall_State;
	 Hall_State = (HALL3<<2)|(HALL2<<1)|(HALL1);
  e0:	47 2f       	mov	r20, r23
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	44 70       	andi	r20, 0x04	; 4
  e6:	50 70       	andi	r21, 0x00	; 0
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	ee 1f       	adc	r30, r30
  f2:	ee 27       	eor	r30, r30
  f4:	ee 1f       	adc	r30, r30
  f6:	ee 0f       	add	r30, r30
  f8:	ee 0f       	add	r30, r30
  fa:	e4 2b       	or	r30, r20
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	20 72       	andi	r18, 0x20	; 32
 100:	30 70       	andi	r19, 0x00	; 0
 102:	95 e0       	ldi	r25, 0x05	; 5
 104:	35 95       	asr	r19
 106:	27 95       	ror	r18
 108:	9a 95       	dec	r25
 10a:	e1 f7       	brne	.-8      	; 0x104 <Motor_Update+0x7c>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	e2 2b       	or	r30, r18
	 LED_1  (HALL1);
	 LED_2  (HALL2);
	 LED_3  (HALL3);

	switch(Hall_State | ((Direction<<3)&0x8))
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	53 e0       	ldi	r21, 0x03	; 3
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	5a 95       	dec	r21
 11e:	e1 f7       	brne	.-8      	; 0x118 <Motor_Update+0x90>
 120:	68 70       	andi	r22, 0x08	; 8
 122:	70 70       	andi	r23, 0x00	; 0
 124:	e6 2b       	or	r30, r22
 126:	f7 2b       	or	r31, r23
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	ee 30       	cpi	r30, 0x0E	; 14
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <Motor_Update+0xaa>
 130:	71 c0       	rjmp	.+226    	; 0x214 <Motor_Update+0x18c>
 132:	e6 5e       	subi	r30, 0xE6	; 230
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	09 94       	ijmp
	{		
		case 1:
		case (6|0x8):
		M2p (OFF);
 138:	29 98       	cbi	0x05, 1	; 5
		M3p (OFF);
 13a:	2a 98       	cbi	0x05, 2	; 5
		M2n_PWM = 0; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm));
 13c:	17 bc       	out	0x27, r1	; 39
 13e:	94 b5       	in	r25, 0x24	; 36
 140:	9f 77       	andi	r25, 0x7F	; 127
 142:	94 bd       	out	0x24, r25	; 36
		M1n_PWM = 0; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm));
 144:	10 92 b4 00 	sts	0x00B4, r1
 148:	90 91 b0 00 	lds	r25, 0x00B0
 14c:	9f 7d       	andi	r25, 0xDF	; 223
 14e:	90 93 b0 00 	sts	0x00B0, r25
		M1p (ON);
 152:	5c 9a       	sbi	0x0b, 4	; 11
 154:	0e c0       	rjmp	.+28     	; 0x172 <Motor_Update+0xea>
		M3n_PWM = Speed; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm)) | (M3_TCCR_gm);
		break;
		
		case 3:
		case (4|0x8):
		M1p (OFF);
 156:	5c 98       	cbi	0x0b, 4	; 11
		M3p (OFF);
 158:	2a 98       	cbi	0x05, 2	; 5
		M1n_PWM = 0; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm));
 15a:	10 92 b4 00 	sts	0x00B4, r1
 15e:	90 91 b0 00 	lds	r25, 0x00B0
 162:	9f 7d       	andi	r25, 0xDF	; 223
 164:	90 93 b0 00 	sts	0x00B0, r25
		M2n_PWM = 0; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm));
 168:	17 bc       	out	0x27, r1	; 39
 16a:	94 b5       	in	r25, 0x24	; 36
 16c:	9f 77       	andi	r25, 0x7F	; 127
 16e:	94 bd       	out	0x24, r25	; 36
		M2p (ON);
 170:	29 9a       	sbi	0x05, 1	; 5
		M3n_PWM = Speed; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm)) | (M3_TCCR_gm);
 172:	80 93 b3 00 	sts	0x00B3, r24
 176:	80 91 b0 00 	lds	r24, 0x00B0
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	5e c0       	rjmp	.+188    	; 0x23a <Motor_Update+0x1b2>
		break;
		
		case 2:
		case (5|0x8):
		M1p (OFF);
 17e:	5c 98       	cbi	0x0b, 4	; 11
		M3p (OFF);
 180:	2a 98       	cbi	0x05, 2	; 5
		M2n_PWM = 0; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm));
 182:	17 bc       	out	0x27, r1	; 39
 184:	94 b5       	in	r25, 0x24	; 36
 186:	9f 77       	andi	r25, 0x7F	; 127
 188:	94 bd       	out	0x24, r25	; 36
		M3n_PWM = 0; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm));
 18a:	10 92 b3 00 	sts	0x00B3, r1
 18e:	90 91 b0 00 	lds	r25, 0x00B0
 192:	9f 77       	andi	r25, 0x7F	; 127
 194:	90 93 b0 00 	sts	0x00B0, r25
		M2p (ON);
 198:	29 9a       	sbi	0x05, 1	; 5
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <Motor_Update+0x130>
		M1n_PWM = Speed; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm)) | (M1_TCCR_gm);
		break;
		
		case 6:
		case (1|0x8):
		M1p (OFF);
 19c:	5c 98       	cbi	0x0b, 4	; 11
		M2p (OFF);
 19e:	29 98       	cbi	0x05, 1	; 5
		M2n_PWM = 0; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm));
 1a0:	17 bc       	out	0x27, r1	; 39
 1a2:	94 b5       	in	r25, 0x24	; 36
 1a4:	9f 77       	andi	r25, 0x7F	; 127
 1a6:	94 bd       	out	0x24, r25	; 36
		M3n_PWM = 0; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm));
 1a8:	10 92 b3 00 	sts	0x00B3, r1
 1ac:	90 91 b0 00 	lds	r25, 0x00B0
 1b0:	9f 77       	andi	r25, 0x7F	; 127
 1b2:	90 93 b0 00 	sts	0x00B0, r25
		M3p (ON);
 1b6:	2a 9a       	sbi	0x05, 2	; 5
		M1n_PWM = Speed; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm)) | (M1_TCCR_gm);
 1b8:	80 93 b4 00 	sts	0x00B4, r24
 1bc:	80 91 b0 00 	lds	r24, 0x00B0
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	3b c0       	rjmp	.+118    	; 0x23a <Motor_Update+0x1b2>
		break;
		
		case 4:
		case (3|0x8):
		M1p (OFF);
 1c4:	5c 98       	cbi	0x0b, 4	; 11
		M2p (OFF);
 1c6:	29 98       	cbi	0x05, 1	; 5
		M1n_PWM = 0; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm));
 1c8:	10 92 b4 00 	sts	0x00B4, r1
 1cc:	90 91 b0 00 	lds	r25, 0x00B0
 1d0:	9f 7d       	andi	r25, 0xDF	; 223
 1d2:	90 93 b0 00 	sts	0x00B0, r25
		M3n_PWM = 0; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm));
 1d6:	10 92 b3 00 	sts	0x00B3, r1
 1da:	90 91 b0 00 	lds	r25, 0x00B0
 1de:	9f 77       	andi	r25, 0x7F	; 127
 1e0:	90 93 b0 00 	sts	0x00B0, r25
		M3p (ON);
 1e4:	2a 9a       	sbi	0x05, 2	; 5
 1e6:	11 c0       	rjmp	.+34     	; 0x20a <Motor_Update+0x182>
		M2n_PWM = Speed; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm)) | (M2_TCCR_gm);
		break;
		
		case 5:
		case (2|0x8):
		M2p (OFF);
 1e8:	29 98       	cbi	0x05, 1	; 5
		M3p (OFF);
 1ea:	2a 98       	cbi	0x05, 2	; 5
		M1n_PWM = 0; M1_TCCR = (M1_TCCR & (~M1_TCCR_gm));
 1ec:	10 92 b4 00 	sts	0x00B4, r1
 1f0:	90 91 b0 00 	lds	r25, 0x00B0
 1f4:	9f 7d       	andi	r25, 0xDF	; 223
 1f6:	90 93 b0 00 	sts	0x00B0, r25
		M3n_PWM = 0; M3_TCCR = (M3_TCCR & (~M3_TCCR_gm));
 1fa:	10 92 b3 00 	sts	0x00B3, r1
 1fe:	90 91 b0 00 	lds	r25, 0x00B0
 202:	9f 77       	andi	r25, 0x7F	; 127
 204:	90 93 b0 00 	sts	0x00B0, r25
		M1p (ON);
 208:	5c 9a       	sbi	0x0b, 4	; 11
		M2n_PWM = Speed; M2_TCCR = (M2_TCCR & (~M2_TCCR_gm)) | (M2_TCCR_gm);
 20a:	87 bd       	out	0x27, r24	; 39
 20c:	84 b5       	in	r24, 0x24	; 36
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	84 bd       	out	0x24, r24	; 36
		break;
 212:	08 95       	ret
		case 7:
		default:
		M1p (OFF);
 214:	5c 98       	cbi	0x0b, 4	; 11
		M2p (OFF);
 216:	29 98       	cbi	0x05, 1	; 5
		M3p (OFF);
 218:	2a 98       	cbi	0x05, 2	; 5
		M1n_PWM = 0; M1_TCCR= (M1_TCCR & (~M1_TCCR_gm));
 21a:	10 92 b4 00 	sts	0x00B4, r1
 21e:	80 91 b0 00 	lds	r24, 0x00B0
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	80 93 b0 00 	sts	0x00B0, r24
		M2n_PWM = 0; M2_TCCR= (M2_TCCR & (~M2_TCCR_gm));
 228:	17 bc       	out	0x27, r1	; 39
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	8f 77       	andi	r24, 0x7F	; 127
 22e:	84 bd       	out	0x24, r24	; 36
		M3n_PWM = 0; M3_TCCR= (M3_TCCR & (~M3_TCCR_gm));
 230:	10 92 b3 00 	sts	0x00B3, r1
 234:	80 91 b0 00 	lds	r24, 0x00B0
 238:	8f 77       	andi	r24, 0x7F	; 127
 23a:	80 93 b0 00 	sts	0x00B0, r24
 23e:	08 95       	ret

00000240 <__vector_18>:
}



ISR(USART_RX_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
char status,data;
status=UCSR0A;
 25a:	80 91 c0 00 	lds	r24, 0x00C0
data=UDR0;
 25e:	50 91 c6 00 	lds	r21, 0x00C6

if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 262:	8c 71       	andi	r24, 0x1C	; 28
 264:	d9 f5       	brne	.+118    	; 0x2dc <__vector_18+0x9c>
{
	switch (pck_num)
 266:	40 91 07 01 	lds	r20, 0x0107
 26a:	46 30       	cpi	r20, 0x06	; 6
 26c:	38 f4       	brcc	.+14     	; 0x27c <__vector_18+0x3c>
 26e:	42 30       	cpi	r20, 0x02	; 2
 270:	90 f4       	brcc	.+36     	; 0x296 <__vector_18+0x56>
 272:	44 23       	and	r20, r20
 274:	31 f0       	breq	.+12     	; 0x282 <__vector_18+0x42>
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	89 f5       	brne	.+98     	; 0x2dc <__vector_18+0x9c>
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__vector_18+0x4a>
 27c:	46 30       	cpi	r20, 0x06	; 6
 27e:	71 f5       	brne	.+92     	; 0x2dc <__vector_18+0x9c>
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <__vector_18+0x74>
	{
		case 0:
		if(data == '*')
 282:	5a 32       	cpi	r21, 0x2A	; 42
 284:	59 f5       	brne	.+86     	; 0x2dc <__vector_18+0x9c>
		pck_num++;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	03 c0       	rjmp	.+6      	; 0x290 <__vector_18+0x50>
		break;
		case 1:
		if(data == '~')
 28a:	5e 37       	cpi	r21, 0x7E	; 126
 28c:	29 f5       	brne	.+74     	; 0x2d8 <__vector_18+0x98>
		pck_num++;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	80 93 07 01 	sts	0x0107, r24
 294:	23 c0       	rjmp	.+70     	; 0x2dc <__vector_18+0x9c>
		break;
		case 2:
		case 3:
		case 4:
		case 5:
		if(slave_address == pck_num-2)
 296:	20 91 0c 01 	lds	r18, 0x010C
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	84 2f       	mov	r24, r20
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 97       	sbiw	r24, 0x02	; 2
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	11 f4       	brne	.+4      	; 0x2ac <__vector_18+0x6c>
		tmp_setpoint = data & 0x0ff;
 2a8:	50 93 0d 01 	sts	0x010D, r21
		pck_num++;
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	40 93 07 01 	sts	0x0107, r20
		break;
 2b2:	14 c0       	rjmp	.+40     	; 0x2dc <__vector_18+0x9c>
		case 6:
		if(data == '#')
 2b4:	53 32       	cpi	r21, 0x23	; 35
 2b6:	81 f4       	brne	.+32     	; 0x2d8 <__vector_18+0x98>
		{
			//LED_1=~LED_1;
			asm("wdr");
 2b8:	a8 95       	wdr
			master_setpoint = tmp_setpoint;
 2ba:	80 91 0d 01 	lds	r24, 0x010D
 2be:	99 27       	eor	r25, r25
 2c0:	87 fd       	sbrc	r24, 7
 2c2:	90 95       	com	r25
 2c4:	a9 2f       	mov	r26, r25
 2c6:	b9 2f       	mov	r27, r25
 2c8:	80 93 00 01 	sts	0x0100, r24
 2cc:	90 93 01 01 	sts	0x0101, r25
 2d0:	a0 93 02 01 	sts	0x0102, r26
 2d4:	b0 93 03 01 	sts	0x0103, r27
		}
		pck_num=0;
 2d8:	10 92 07 01 	sts	0x0107, r1
		break;
	}
}
}
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_5>:

ISR(PCINT2_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	         if(HALL1 == 1){
 306:	4a 9b       	sbis	0x09, 2	; 9
 308:	10 c0       	rjmp	.+32     	; 0x32a <__vector_5+0x34>
	         WRITE_PORT(PORTD,1, HALL2);}
 30a:	2b b1       	in	r18, 0x0b	; 11
 30c:	89 b1       	in	r24, 0x09	; 9
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	80 72       	andi	r24, 0x20	; 32
 312:	90 70       	andi	r25, 0x00	; 0
 314:	68 94       	set
 316:	14 f8       	bld	r1, 4
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	16 94       	lsr	r1
 31e:	e1 f7       	brne	.-8      	; 0x318 <__vector_5+0x22>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	2d 7f       	andi	r18, 0xFD	; 253
 326:	28 2b       	or	r18, r24
 328:	2b b9       	out	0x0b, r18	; 11
}
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <main>:

// Input/Output Ports initialization
// Port B initialization
// Func7=In Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
// State7=T State6=T State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
PORTB=0x00;
 33a:	15 b8       	out	0x05, r1	; 5
DDRB=0x3F;
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	84 b9       	out	0x04, r24	; 4

// Port C initialization
// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTC=0x00;
 340:	18 b8       	out	0x08, r1	; 8
DDRC=0x00;
 342:	17 b8       	out	0x07, r1	; 7

// Port D initialization
// Func7=In Func6=Out Func5=In Func4=Out Func3=Out Func2=In Func1=Out Func0=In
// State7=T State6=0 State5=T State4=0 State3=0 State2=T State1=0 State0=T
PORTD=0x00;
 344:	1b b8       	out	0x0b, r1	; 11
DDRD=0x5A;
 346:	8a e5       	ldi	r24, 0x5A	; 90
 348:	8a b9       	out	0x0a, r24	; 10
// Clock source: System Clock
// Clock value: 8000.000 kHz
// Mode: Fast PWM top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
TCCR0A=0x03;
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	94 bd       	out	0x24, r25	; 36
TCCR0B=0x01;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	85 bd       	out	0x25, r24	; 37
TCNT0=0x00;
 352:	16 bc       	out	0x26, r1	; 38
OCR0A=0x00;
 354:	17 bc       	out	0x27, r1	; 39
OCR0B=0x00;
 356:	18 bc       	out	0x28, r1	; 40
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
 358:	10 92 80 00 	sts	0x0080, r1
TCCR1B=0x00;
 35c:	10 92 81 00 	sts	0x0081, r1
TCNT1H=0x00;
 360:	10 92 85 00 	sts	0x0085, r1
TCNT1L=0x00;
 364:	10 92 84 00 	sts	0x0084, r1
ICR1H=0x00;
 368:	10 92 87 00 	sts	0x0087, r1
ICR1L=0x00;
 36c:	10 92 86 00 	sts	0x0086, r1
OCR1AH=0x00;
 370:	10 92 89 00 	sts	0x0089, r1
OCR1AL=0x00;
 374:	10 92 88 00 	sts	0x0088, r1
OCR1BH=0x00;
 378:	10 92 8b 00 	sts	0x008B, r1
OCR1BL=0x00;
 37c:	10 92 8a 00 	sts	0x008A, r1
// Clock source: System Clock
// Clock value: 8000.000 kHz
// Mode: Fast PWM top=0xFF
// OC2A output: Disconnected
// OC2B output: Disconnected
ASSR=0x00;
 380:	10 92 b6 00 	sts	0x00B6, r1
TCCR2A=0x03;
 384:	90 93 b0 00 	sts	0x00B0, r25
TCCR2B=0x01;
 388:	80 93 b1 00 	sts	0x00B1, r24
TCNT2=0x00;
 38c:	10 92 b2 00 	sts	0x00B2, r1
OCR2A=0x00;
 390:	10 92 b3 00 	sts	0x00B3, r1
OCR2B=0x00;
 394:	10 92 b4 00 	sts	0x00B4, r1
// INT0: Off
// INT1: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-14: Off
// Interrupt on any change on pins PCINT16-23: On
EICRA=0x00;
 398:	10 92 69 00 	sts	0x0069, r1
EIMSK=0x00;
 39c:	1d ba       	out	0x1d, r1	; 29
PCICR=0x04;
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	80 93 68 00 	sts	0x0068, r24
PCMSK2=0x04;
 3a4:	80 93 6d 00 	sts	0x006D, r24
PCIFR=0x04;
 3a8:	8b bb       	out	0x1b, r24	; 27

// Timer/Counter 0 Interrupt(s) initialization
TIMSK0=0x00;
 3aa:	10 92 6e 00 	sts	0x006E, r1

// Timer/Counter 1 Interrupt(s) initialization
TIMSK1=0x00;
 3ae:	10 92 6f 00 	sts	0x006F, r1

// Timer/Counter 2 Interrupt(s) initialization
TIMSK2=0x00;
 3b2:	10 92 70 00 	sts	0x0070, r1
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: Off
// USART0 Mode: Asynchronous
// USART Baud Rate: 9600
UCSR0A=0x00;
 3b6:	10 92 c0 00 	sts	0x00C0, r1
UCSR0B=0x90;
 3ba:	80 e9       	ldi	r24, 0x90	; 144
 3bc:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0x06;
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	80 93 c2 00 	sts	0x00C2, r24
UBRR0H=0x00;
 3c6:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L=0x33;
 3ca:	83 e3       	ldi	r24, 0x33	; 51
 3cc:	80 93 c4 00 	sts	0x00C4, r24

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	80 bf       	out	0x30, r24	; 48
ADCSRB=0x00;
 3d4:	10 92 7b 00 	sts	0x007B, r1
DIDR1=0x00;
 3d8:	10 92 7f 00 	sts	0x007F, r1

// ADC initialization
// ADC disabled
ADCSRA=0x00;
 3dc:	10 92 7a 00 	sts	0x007A, r1

// SPI initialization
// SPI disabled
SPCR=0x00;
 3e0:	1c bc       	out	0x2c, r1	; 44

// TWI initialization
// TWI disabled
TWCR=0x00;
 3e2:	10 92 bc 00 	sts	0x00BC, r1
//WDTCSR=0x1A;
//WDTCSR=0x0A;
//#ifdef _OPTIMIZE_SIZE_
//#pragma optsize+
//#endif
slave_address=ADD0|(ADD1<<1);
 3e6:	26 b1       	in	r18, 0x06	; 6
 3e8:	86 b1       	in	r24, 0x06	; 6
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	84 70       	andi	r24, 0x04	; 4
 3ee:	90 70       	andi	r25, 0x00	; 0
 3f0:	95 95       	asr	r25
 3f2:	87 95       	ror	r24
 3f4:	95 95       	asr	r25
 3f6:	87 95       	ror	r24
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	28 70       	andi	r18, 0x08	; 8
 400:	30 70       	andi	r19, 0x00	; 0
 402:	b3 e0       	ldi	r27, 0x03	; 3
 404:	35 95       	asr	r19
 406:	27 95       	ror	r18
 408:	ba 95       	dec	r27
 40a:	e1 f7       	brne	.-8      	; 0x404 <main+0xca>
 40c:	82 2b       	or	r24, r18
 40e:	80 93 0c 01 	sts	0x010C, r24
// Global enable interrupts
asm("sei");
 412:	78 94       	sei
DDRC|=(1<<PINC5);
 414:	3d 9a       	sbi	0x07, 5	; 7
    while(1)
    {
        // Place your code here
        if ( master_setpoint<0)
        {
	        Motor_Direction=1;
 416:	c1 e0       	ldi	r28, 0x01	; 1
asm("sei");
DDRC|=(1<<PINC5);
    while(1)
    {
        // Place your code here
        if ( master_setpoint<0)
 418:	60 91 00 01 	lds	r22, 0x0100
 41c:	70 91 01 01 	lds	r23, 0x0101
 420:	80 91 02 01 	lds	r24, 0x0102
 424:	90 91 03 01 	lds	r25, 0x0103
 428:	97 ff       	sbrs	r25, 7
 42a:	13 c0       	rjmp	.+38     	; 0x452 <main+0x118>
        {
	        Motor_Direction=1;
 42c:	c0 93 1e 01 	sts	0x011E, r28
	        pwm = -master_setpoint*2;
 430:	2e ef       	ldi	r18, 0xFE	; 254
 432:	3f ef       	ldi	r19, 0xFF	; 255
 434:	4f ef       	ldi	r20, 0xFF	; 255
 436:	5f ef       	ldi	r21, 0xFF	; 255
 438:	c3 d0       	rcall	.+390    	; 0x5c0 <__mulsi3>
 43a:	5e d0       	rcall	.+188    	; 0x4f8 <__floatsisf>
 43c:	dc 01       	movw	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	80 93 9c 01 	sts	0x019C, r24
 444:	90 93 9d 01 	sts	0x019D, r25
 448:	a0 93 9e 01 	sts	0x019E, r26
 44c:	b0 93 9f 01 	sts	0x019F, r27
 450:	11 c0       	rjmp	.+34     	; 0x474 <main+0x13a>
	        //LED_2(~READ_PIN(PORTB,4));
        }
        else if (master_setpoint >=0)
        {
	        pwm = master_setpoint*2;
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	4e d0       	rcall	.+156    	; 0x4f8 <__floatsisf>
 45c:	dc 01       	movw	r26, r24
 45e:	cb 01       	movw	r24, r22
 460:	80 93 9c 01 	sts	0x019C, r24
 464:	90 93 9d 01 	sts	0x019D, r25
 468:	a0 93 9e 01 	sts	0x019E, r26
 46c:	b0 93 9f 01 	sts	0x019F, r27
	        Motor_Direction= 0;
 470:	10 92 1e 01 	sts	0x011E, r1
	         
        }
        //LED_3=~LED_3;
        if(TCNT0>100){
 474:	86 b5       	in	r24, 0x26	; 38
 476:	85 36       	cpi	r24, 0x65	; 101
 478:	10 f0       	brcs	.+4      	; 0x47e <main+0x144>
	        PORTC=PORTC&(~(1<<PINC5));
 47a:	45 98       	cbi	0x08, 5	; 8
 47c:	01 c0       	rjmp	.+2      	; 0x480 <main+0x146>
        }
        else
        {
	       PORTC=PORTC|(1<<PINC5);
 47e:	45 9a       	sbi	0x08, 5	; 8
        //        M3p=0;
        //M1_TCCR = (M1_TCCR & (~M1_TCCR_gm)) | (M1_TCCR_gm)|0x03;
        //M2_TCCR = (M2_TCCR & (~M2_TCCR_gm)) | (M2_TCCR_gm)|0x03;
        // M3_TCCR = (M3_TCCR & (~M3_TCCR_gm)) | (M3_TCCR_gm)|0x03;
		//pwm = 80;
        Motor_Update(pwm,Motor_Direction);
 480:	60 91 9c 01 	lds	r22, 0x019C
 484:	70 91 9d 01 	lds	r23, 0x019D
 488:	80 91 9e 01 	lds	r24, 0x019E
 48c:	90 91 9f 01 	lds	r25, 0x019F
 490:	05 d0       	rcall	.+10     	; 0x49c <__fixunssfsi>
 492:	86 2f       	mov	r24, r22
 494:	60 91 1e 01 	lds	r22, 0x011E
 498:	f7 dd       	rcall	.-1042   	; 0x88 <Motor_Update>
    }
 49a:	be cf       	rjmp	.-132    	; 0x418 <main+0xde>

0000049c <__fixunssfsi>:
 49c:	70 d0       	rcall	.+224    	; 0x57e <__fp_splitA>
 49e:	88 f0       	brcs	.+34     	; 0x4c2 <__fixunssfsi+0x26>
 4a0:	9f 57       	subi	r25, 0x7F	; 127
 4a2:	90 f0       	brcs	.+36     	; 0x4c8 <__fixunssfsi+0x2c>
 4a4:	b9 2f       	mov	r27, r25
 4a6:	99 27       	eor	r25, r25
 4a8:	b7 51       	subi	r27, 0x17	; 23
 4aa:	a0 f0       	brcs	.+40     	; 0x4d4 <__fixunssfsi+0x38>
 4ac:	d1 f0       	breq	.+52     	; 0x4e2 <__fixunssfsi+0x46>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	1a f0       	brmi	.+6      	; 0x4be <__fixunssfsi+0x22>
 4b8:	ba 95       	dec	r27
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <__fixunssfsi+0x12>
 4bc:	12 c0       	rjmp	.+36     	; 0x4e2 <__fixunssfsi+0x46>
 4be:	b1 30       	cpi	r27, 0x01	; 1
 4c0:	81 f0       	breq	.+32     	; 0x4e2 <__fixunssfsi+0x46>
 4c2:	77 d0       	rcall	.+238    	; 0x5b2 <__fp_zero>
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	74 c0       	rjmp	.+232    	; 0x5b2 <__fp_zero>
 4ca:	67 2f       	mov	r22, r23
 4cc:	78 2f       	mov	r23, r24
 4ce:	88 27       	eor	r24, r24
 4d0:	b8 5f       	subi	r27, 0xF8	; 248
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__fixunssfsi+0x46>
 4d4:	b9 3f       	cpi	r27, 0xF9	; 249
 4d6:	cc f3       	brlt	.-14     	; 0x4ca <__fixunssfsi+0x2e>
 4d8:	86 95       	lsr	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b3 95       	inc	r27
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__fixunssfsi+0x3c>
 4e2:	3e f4       	brtc	.+14     	; 0x4f2 <__fixunssfsi+0x56>
 4e4:	90 95       	com	r25
 4e6:	80 95       	com	r24
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <__floatunsisf>:
 4f4:	e8 94       	clt
 4f6:	09 c0       	rjmp	.+18     	; 0x50a <__stack+0xb>

000004f8 <__floatsisf>:
 4f8:	97 fb       	bst	r25, 7
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__stack+0xb>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	99 23       	and	r25, r25
 50c:	a9 f0       	breq	.+42     	; 0x538 <__stack+0x39>
 50e:	f9 2f       	mov	r31, r25
 510:	96 e9       	ldi	r25, 0x96	; 150
 512:	bb 27       	eor	r27, r27
 514:	93 95       	inc	r25
 516:	f6 95       	lsr	r31
 518:	87 95       	ror	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f1 11       	cpse	r31, r1
 522:	f8 cf       	rjmp	.-16     	; 0x514 <__stack+0x15>
 524:	fa f4       	brpl	.+62     	; 0x564 <__stack+0x65>
 526:	bb 0f       	add	r27, r27
 528:	11 f4       	brne	.+4      	; 0x52e <__stack+0x2f>
 52a:	60 ff       	sbrs	r22, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <__stack+0x65>
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	16 c0       	rjmp	.+44     	; 0x564 <__stack+0x65>
 538:	88 23       	and	r24, r24
 53a:	11 f0       	breq	.+4      	; 0x540 <__stack+0x41>
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	11 c0       	rjmp	.+34     	; 0x562 <__stack+0x63>
 540:	77 23       	and	r23, r23
 542:	21 f0       	breq	.+8      	; 0x54c <__stack+0x4d>
 544:	9e e8       	ldi	r25, 0x8E	; 142
 546:	87 2f       	mov	r24, r23
 548:	76 2f       	mov	r23, r22
 54a:	05 c0       	rjmp	.+10     	; 0x556 <__stack+0x57>
 54c:	66 23       	and	r22, r22
 54e:	71 f0       	breq	.+28     	; 0x56c <__stack+0x6d>
 550:	96 e8       	ldi	r25, 0x86	; 134
 552:	86 2f       	mov	r24, r22
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	2a f0       	brmi	.+10     	; 0x564 <__stack+0x65>
 55a:	9a 95       	dec	r25
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	da f7       	brpl	.-10     	; 0x55a <__stack+0x5b>
 564:	88 0f       	add	r24, r24
 566:	96 95       	lsr	r25
 568:	87 95       	ror	r24
 56a:	97 f9       	bld	r25, 7
 56c:	08 95       	ret

0000056e <__fp_split3>:
 56e:	57 fd       	sbrc	r21, 7
 570:	90 58       	subi	r25, 0x80	; 128
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	59 f0       	breq	.+22     	; 0x58e <__fp_splitA+0x10>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	71 f0       	breq	.+28     	; 0x598 <__fp_splitA+0x1a>
 57c:	47 95       	ror	r20

0000057e <__fp_splitA>:
 57e:	88 0f       	add	r24, r24
 580:	97 fb       	bst	r25, 7
 582:	99 1f       	adc	r25, r25
 584:	61 f0       	breq	.+24     	; 0x59e <__fp_splitA+0x20>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	79 f0       	breq	.+30     	; 0x5a8 <__fp_splitA+0x2a>
 58a:	87 95       	ror	r24
 58c:	08 95       	ret
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	55 1f       	adc	r21, r21
 596:	f2 cf       	rjmp	.-28     	; 0x57c <__fp_split3+0xe>
 598:	46 95       	lsr	r20
 59a:	f1 df       	rcall	.-30     	; 0x57e <__fp_splitA>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__fp_splitA+0x30>
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <__fp_splitA+0xc>
 5a8:	86 95       	lsr	r24
 5aa:	71 05       	cpc	r23, r1
 5ac:	61 05       	cpc	r22, r1
 5ae:	08 94       	sec
 5b0:	08 95       	ret

000005b2 <__fp_zero>:
 5b2:	e8 94       	clt

000005b4 <__fp_szero>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	66 27       	eor	r22, r22
 5b8:	77 27       	eor	r23, r23
 5ba:	cb 01       	movw	r24, r22
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__mulsi3>:
 5c0:	62 9f       	mul	r22, r18
 5c2:	d0 01       	movw	r26, r0
 5c4:	73 9f       	mul	r23, r19
 5c6:	f0 01       	movw	r30, r0
 5c8:	82 9f       	mul	r24, r18
 5ca:	e0 0d       	add	r30, r0
 5cc:	f1 1d       	adc	r31, r1
 5ce:	64 9f       	mul	r22, r20
 5d0:	e0 0d       	add	r30, r0
 5d2:	f1 1d       	adc	r31, r1
 5d4:	92 9f       	mul	r25, r18
 5d6:	f0 0d       	add	r31, r0
 5d8:	83 9f       	mul	r24, r19
 5da:	f0 0d       	add	r31, r0
 5dc:	74 9f       	mul	r23, r20
 5de:	f0 0d       	add	r31, r0
 5e0:	65 9f       	mul	r22, r21
 5e2:	f0 0d       	add	r31, r0
 5e4:	99 27       	eor	r25, r25
 5e6:	72 9f       	mul	r23, r18
 5e8:	b0 0d       	add	r27, r0
 5ea:	e1 1d       	adc	r30, r1
 5ec:	f9 1f       	adc	r31, r25
 5ee:	63 9f       	mul	r22, r19
 5f0:	b0 0d       	add	r27, r0
 5f2:	e1 1d       	adc	r30, r1
 5f4:	f9 1f       	adc	r31, r25
 5f6:	bd 01       	movw	r22, r26
 5f8:	cf 01       	movw	r24, r30
 5fa:	11 24       	eor	r1, r1
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
